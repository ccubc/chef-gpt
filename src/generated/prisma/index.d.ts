
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model FoodImage
 * 
 */
export type FoodImage = $Result.DefaultSelection<Prisma.$FoodImagePayload>
/**
 * Model Recipe
 * 
 */
export type Recipe = $Result.DefaultSelection<Prisma.$RecipePayload>
/**
 * Model Ingredient
 * 
 */
export type Ingredient = $Result.DefaultSelection<Prisma.$IngredientPayload>
/**
 * Model RecipeIngredient
 * 
 */
export type RecipeIngredient = $Result.DefaultSelection<Prisma.$RecipeIngredientPayload>
/**
 * Model RecipeLike
 * 
 */
export type RecipeLike = $Result.DefaultSelection<Prisma.$RecipeLikePayload>
/**
 * Model SavedRecipe
 * 
 */
export type SavedRecipe = $Result.DefaultSelection<Prisma.$SavedRecipePayload>
/**
 * Model RecipeReview
 * 
 */
export type RecipeReview = $Result.DefaultSelection<Prisma.$RecipeReviewPayload>
/**
 * Model MadeRecipe
 * 
 */
export type MadeRecipe = $Result.DefaultSelection<Prisma.$MadeRecipePayload>
/**
 * Model Follow
 * 
 */
export type Follow = $Result.DefaultSelection<Prisma.$FollowPayload>
/**
 * Model MealPlan
 * 
 */
export type MealPlan = $Result.DefaultSelection<Prisma.$MealPlanPayload>
/**
 * Model MealPlanItem
 * 
 */
export type MealPlanItem = $Result.DefaultSelection<Prisma.$MealPlanItemPayload>
/**
 * Model ShoppingList
 * 
 */
export type ShoppingList = $Result.DefaultSelection<Prisma.$ShoppingListPayload>
/**
 * Model TrendingRecipe
 * 
 */
export type TrendingRecipe = $Result.DefaultSelection<Prisma.$TrendingRecipePayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.foodImage`: Exposes CRUD operations for the **FoodImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FoodImages
    * const foodImages = await prisma.foodImage.findMany()
    * ```
    */
  get foodImage(): Prisma.FoodImageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.recipe`: Exposes CRUD operations for the **Recipe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recipes
    * const recipes = await prisma.recipe.findMany()
    * ```
    */
  get recipe(): Prisma.RecipeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ingredient`: Exposes CRUD operations for the **Ingredient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ingredients
    * const ingredients = await prisma.ingredient.findMany()
    * ```
    */
  get ingredient(): Prisma.IngredientDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.recipeIngredient`: Exposes CRUD operations for the **RecipeIngredient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RecipeIngredients
    * const recipeIngredients = await prisma.recipeIngredient.findMany()
    * ```
    */
  get recipeIngredient(): Prisma.RecipeIngredientDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.recipeLike`: Exposes CRUD operations for the **RecipeLike** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RecipeLikes
    * const recipeLikes = await prisma.recipeLike.findMany()
    * ```
    */
  get recipeLike(): Prisma.RecipeLikeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.savedRecipe`: Exposes CRUD operations for the **SavedRecipe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SavedRecipes
    * const savedRecipes = await prisma.savedRecipe.findMany()
    * ```
    */
  get savedRecipe(): Prisma.SavedRecipeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.recipeReview`: Exposes CRUD operations for the **RecipeReview** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RecipeReviews
    * const recipeReviews = await prisma.recipeReview.findMany()
    * ```
    */
  get recipeReview(): Prisma.RecipeReviewDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.madeRecipe`: Exposes CRUD operations for the **MadeRecipe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MadeRecipes
    * const madeRecipes = await prisma.madeRecipe.findMany()
    * ```
    */
  get madeRecipe(): Prisma.MadeRecipeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.follow`: Exposes CRUD operations for the **Follow** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Follows
    * const follows = await prisma.follow.findMany()
    * ```
    */
  get follow(): Prisma.FollowDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.mealPlan`: Exposes CRUD operations for the **MealPlan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MealPlans
    * const mealPlans = await prisma.mealPlan.findMany()
    * ```
    */
  get mealPlan(): Prisma.MealPlanDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.mealPlanItem`: Exposes CRUD operations for the **MealPlanItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MealPlanItems
    * const mealPlanItems = await prisma.mealPlanItem.findMany()
    * ```
    */
  get mealPlanItem(): Prisma.MealPlanItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.shoppingList`: Exposes CRUD operations for the **ShoppingList** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShoppingLists
    * const shoppingLists = await prisma.shoppingList.findMany()
    * ```
    */
  get shoppingList(): Prisma.ShoppingListDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.trendingRecipe`: Exposes CRUD operations for the **TrendingRecipe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TrendingRecipes
    * const trendingRecipes = await prisma.trendingRecipe.findMany()
    * ```
    */
  get trendingRecipe(): Prisma.TrendingRecipeDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.10.1
   * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends bigint
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Account: 'Account',
    Session: 'Session',
    FoodImage: 'FoodImage',
    Recipe: 'Recipe',
    Ingredient: 'Ingredient',
    RecipeIngredient: 'RecipeIngredient',
    RecipeLike: 'RecipeLike',
    SavedRecipe: 'SavedRecipe',
    RecipeReview: 'RecipeReview',
    MadeRecipe: 'MadeRecipe',
    Follow: 'Follow',
    MealPlan: 'MealPlan',
    MealPlanItem: 'MealPlanItem',
    ShoppingList: 'ShoppingList',
    TrendingRecipe: 'TrendingRecipe'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "account" | "session" | "foodImage" | "recipe" | "ingredient" | "recipeIngredient" | "recipeLike" | "savedRecipe" | "recipeReview" | "madeRecipe" | "follow" | "mealPlan" | "mealPlanItem" | "shoppingList" | "trendingRecipe"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      FoodImage: {
        payload: Prisma.$FoodImagePayload<ExtArgs>
        fields: Prisma.FoodImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FoodImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FoodImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodImagePayload>
          }
          findFirst: {
            args: Prisma.FoodImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FoodImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodImagePayload>
          }
          findMany: {
            args: Prisma.FoodImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodImagePayload>[]
          }
          create: {
            args: Prisma.FoodImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodImagePayload>
          }
          createMany: {
            args: Prisma.FoodImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FoodImageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodImagePayload>[]
          }
          delete: {
            args: Prisma.FoodImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodImagePayload>
          }
          update: {
            args: Prisma.FoodImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodImagePayload>
          }
          deleteMany: {
            args: Prisma.FoodImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FoodImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FoodImageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodImagePayload>[]
          }
          upsert: {
            args: Prisma.FoodImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodImagePayload>
          }
          aggregate: {
            args: Prisma.FoodImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFoodImage>
          }
          groupBy: {
            args: Prisma.FoodImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<FoodImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.FoodImageCountArgs<ExtArgs>
            result: $Utils.Optional<FoodImageCountAggregateOutputType> | number
          }
        }
      }
      Recipe: {
        payload: Prisma.$RecipePayload<ExtArgs>
        fields: Prisma.RecipeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecipeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecipeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          findFirst: {
            args: Prisma.RecipeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecipeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          findMany: {
            args: Prisma.RecipeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>[]
          }
          create: {
            args: Prisma.RecipeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          createMany: {
            args: Prisma.RecipeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RecipeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>[]
          }
          delete: {
            args: Prisma.RecipeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          update: {
            args: Prisma.RecipeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          deleteMany: {
            args: Prisma.RecipeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecipeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RecipeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>[]
          }
          upsert: {
            args: Prisma.RecipeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          aggregate: {
            args: Prisma.RecipeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecipe>
          }
          groupBy: {
            args: Prisma.RecipeGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecipeGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecipeCountArgs<ExtArgs>
            result: $Utils.Optional<RecipeCountAggregateOutputType> | number
          }
        }
      }
      Ingredient: {
        payload: Prisma.$IngredientPayload<ExtArgs>
        fields: Prisma.IngredientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IngredientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IngredientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>
          }
          findFirst: {
            args: Prisma.IngredientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IngredientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>
          }
          findMany: {
            args: Prisma.IngredientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>[]
          }
          create: {
            args: Prisma.IngredientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>
          }
          createMany: {
            args: Prisma.IngredientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IngredientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>[]
          }
          delete: {
            args: Prisma.IngredientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>
          }
          update: {
            args: Prisma.IngredientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>
          }
          deleteMany: {
            args: Prisma.IngredientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IngredientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.IngredientUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>[]
          }
          upsert: {
            args: Prisma.IngredientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>
          }
          aggregate: {
            args: Prisma.IngredientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIngredient>
          }
          groupBy: {
            args: Prisma.IngredientGroupByArgs<ExtArgs>
            result: $Utils.Optional<IngredientGroupByOutputType>[]
          }
          count: {
            args: Prisma.IngredientCountArgs<ExtArgs>
            result: $Utils.Optional<IngredientCountAggregateOutputType> | number
          }
        }
      }
      RecipeIngredient: {
        payload: Prisma.$RecipeIngredientPayload<ExtArgs>
        fields: Prisma.RecipeIngredientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecipeIngredientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecipeIngredientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>
          }
          findFirst: {
            args: Prisma.RecipeIngredientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecipeIngredientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>
          }
          findMany: {
            args: Prisma.RecipeIngredientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>[]
          }
          create: {
            args: Prisma.RecipeIngredientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>
          }
          createMany: {
            args: Prisma.RecipeIngredientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RecipeIngredientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>[]
          }
          delete: {
            args: Prisma.RecipeIngredientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>
          }
          update: {
            args: Prisma.RecipeIngredientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>
          }
          deleteMany: {
            args: Prisma.RecipeIngredientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecipeIngredientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RecipeIngredientUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>[]
          }
          upsert: {
            args: Prisma.RecipeIngredientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>
          }
          aggregate: {
            args: Prisma.RecipeIngredientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecipeIngredient>
          }
          groupBy: {
            args: Prisma.RecipeIngredientGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecipeIngredientGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecipeIngredientCountArgs<ExtArgs>
            result: $Utils.Optional<RecipeIngredientCountAggregateOutputType> | number
          }
        }
      }
      RecipeLike: {
        payload: Prisma.$RecipeLikePayload<ExtArgs>
        fields: Prisma.RecipeLikeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecipeLikeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeLikePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecipeLikeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeLikePayload>
          }
          findFirst: {
            args: Prisma.RecipeLikeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeLikePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecipeLikeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeLikePayload>
          }
          findMany: {
            args: Prisma.RecipeLikeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeLikePayload>[]
          }
          create: {
            args: Prisma.RecipeLikeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeLikePayload>
          }
          createMany: {
            args: Prisma.RecipeLikeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RecipeLikeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeLikePayload>[]
          }
          delete: {
            args: Prisma.RecipeLikeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeLikePayload>
          }
          update: {
            args: Prisma.RecipeLikeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeLikePayload>
          }
          deleteMany: {
            args: Prisma.RecipeLikeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecipeLikeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RecipeLikeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeLikePayload>[]
          }
          upsert: {
            args: Prisma.RecipeLikeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeLikePayload>
          }
          aggregate: {
            args: Prisma.RecipeLikeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecipeLike>
          }
          groupBy: {
            args: Prisma.RecipeLikeGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecipeLikeGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecipeLikeCountArgs<ExtArgs>
            result: $Utils.Optional<RecipeLikeCountAggregateOutputType> | number
          }
        }
      }
      SavedRecipe: {
        payload: Prisma.$SavedRecipePayload<ExtArgs>
        fields: Prisma.SavedRecipeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SavedRecipeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedRecipePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SavedRecipeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedRecipePayload>
          }
          findFirst: {
            args: Prisma.SavedRecipeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedRecipePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SavedRecipeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedRecipePayload>
          }
          findMany: {
            args: Prisma.SavedRecipeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedRecipePayload>[]
          }
          create: {
            args: Prisma.SavedRecipeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedRecipePayload>
          }
          createMany: {
            args: Prisma.SavedRecipeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SavedRecipeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedRecipePayload>[]
          }
          delete: {
            args: Prisma.SavedRecipeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedRecipePayload>
          }
          update: {
            args: Prisma.SavedRecipeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedRecipePayload>
          }
          deleteMany: {
            args: Prisma.SavedRecipeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SavedRecipeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SavedRecipeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedRecipePayload>[]
          }
          upsert: {
            args: Prisma.SavedRecipeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedRecipePayload>
          }
          aggregate: {
            args: Prisma.SavedRecipeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSavedRecipe>
          }
          groupBy: {
            args: Prisma.SavedRecipeGroupByArgs<ExtArgs>
            result: $Utils.Optional<SavedRecipeGroupByOutputType>[]
          }
          count: {
            args: Prisma.SavedRecipeCountArgs<ExtArgs>
            result: $Utils.Optional<SavedRecipeCountAggregateOutputType> | number
          }
        }
      }
      RecipeReview: {
        payload: Prisma.$RecipeReviewPayload<ExtArgs>
        fields: Prisma.RecipeReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecipeReviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecipeReviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeReviewPayload>
          }
          findFirst: {
            args: Prisma.RecipeReviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecipeReviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeReviewPayload>
          }
          findMany: {
            args: Prisma.RecipeReviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeReviewPayload>[]
          }
          create: {
            args: Prisma.RecipeReviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeReviewPayload>
          }
          createMany: {
            args: Prisma.RecipeReviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RecipeReviewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeReviewPayload>[]
          }
          delete: {
            args: Prisma.RecipeReviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeReviewPayload>
          }
          update: {
            args: Prisma.RecipeReviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeReviewPayload>
          }
          deleteMany: {
            args: Prisma.RecipeReviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecipeReviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RecipeReviewUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeReviewPayload>[]
          }
          upsert: {
            args: Prisma.RecipeReviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeReviewPayload>
          }
          aggregate: {
            args: Prisma.RecipeReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecipeReview>
          }
          groupBy: {
            args: Prisma.RecipeReviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecipeReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecipeReviewCountArgs<ExtArgs>
            result: $Utils.Optional<RecipeReviewCountAggregateOutputType> | number
          }
        }
      }
      MadeRecipe: {
        payload: Prisma.$MadeRecipePayload<ExtArgs>
        fields: Prisma.MadeRecipeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MadeRecipeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MadeRecipePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MadeRecipeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MadeRecipePayload>
          }
          findFirst: {
            args: Prisma.MadeRecipeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MadeRecipePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MadeRecipeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MadeRecipePayload>
          }
          findMany: {
            args: Prisma.MadeRecipeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MadeRecipePayload>[]
          }
          create: {
            args: Prisma.MadeRecipeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MadeRecipePayload>
          }
          createMany: {
            args: Prisma.MadeRecipeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MadeRecipeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MadeRecipePayload>[]
          }
          delete: {
            args: Prisma.MadeRecipeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MadeRecipePayload>
          }
          update: {
            args: Prisma.MadeRecipeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MadeRecipePayload>
          }
          deleteMany: {
            args: Prisma.MadeRecipeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MadeRecipeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MadeRecipeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MadeRecipePayload>[]
          }
          upsert: {
            args: Prisma.MadeRecipeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MadeRecipePayload>
          }
          aggregate: {
            args: Prisma.MadeRecipeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMadeRecipe>
          }
          groupBy: {
            args: Prisma.MadeRecipeGroupByArgs<ExtArgs>
            result: $Utils.Optional<MadeRecipeGroupByOutputType>[]
          }
          count: {
            args: Prisma.MadeRecipeCountArgs<ExtArgs>
            result: $Utils.Optional<MadeRecipeCountAggregateOutputType> | number
          }
        }
      }
      Follow: {
        payload: Prisma.$FollowPayload<ExtArgs>
        fields: Prisma.FollowFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FollowFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FollowFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          findFirst: {
            args: Prisma.FollowFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FollowFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          findMany: {
            args: Prisma.FollowFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>[]
          }
          create: {
            args: Prisma.FollowCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          createMany: {
            args: Prisma.FollowCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FollowCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>[]
          }
          delete: {
            args: Prisma.FollowDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          update: {
            args: Prisma.FollowUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          deleteMany: {
            args: Prisma.FollowDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FollowUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FollowUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>[]
          }
          upsert: {
            args: Prisma.FollowUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          aggregate: {
            args: Prisma.FollowAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFollow>
          }
          groupBy: {
            args: Prisma.FollowGroupByArgs<ExtArgs>
            result: $Utils.Optional<FollowGroupByOutputType>[]
          }
          count: {
            args: Prisma.FollowCountArgs<ExtArgs>
            result: $Utils.Optional<FollowCountAggregateOutputType> | number
          }
        }
      }
      MealPlan: {
        payload: Prisma.$MealPlanPayload<ExtArgs>
        fields: Prisma.MealPlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MealPlanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MealPlanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload>
          }
          findFirst: {
            args: Prisma.MealPlanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MealPlanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload>
          }
          findMany: {
            args: Prisma.MealPlanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload>[]
          }
          create: {
            args: Prisma.MealPlanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload>
          }
          createMany: {
            args: Prisma.MealPlanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MealPlanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload>[]
          }
          delete: {
            args: Prisma.MealPlanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload>
          }
          update: {
            args: Prisma.MealPlanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload>
          }
          deleteMany: {
            args: Prisma.MealPlanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MealPlanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MealPlanUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload>[]
          }
          upsert: {
            args: Prisma.MealPlanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanPayload>
          }
          aggregate: {
            args: Prisma.MealPlanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMealPlan>
          }
          groupBy: {
            args: Prisma.MealPlanGroupByArgs<ExtArgs>
            result: $Utils.Optional<MealPlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.MealPlanCountArgs<ExtArgs>
            result: $Utils.Optional<MealPlanCountAggregateOutputType> | number
          }
        }
      }
      MealPlanItem: {
        payload: Prisma.$MealPlanItemPayload<ExtArgs>
        fields: Prisma.MealPlanItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MealPlanItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MealPlanItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanItemPayload>
          }
          findFirst: {
            args: Prisma.MealPlanItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MealPlanItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanItemPayload>
          }
          findMany: {
            args: Prisma.MealPlanItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanItemPayload>[]
          }
          create: {
            args: Prisma.MealPlanItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanItemPayload>
          }
          createMany: {
            args: Prisma.MealPlanItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MealPlanItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanItemPayload>[]
          }
          delete: {
            args: Prisma.MealPlanItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanItemPayload>
          }
          update: {
            args: Prisma.MealPlanItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanItemPayload>
          }
          deleteMany: {
            args: Prisma.MealPlanItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MealPlanItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MealPlanItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanItemPayload>[]
          }
          upsert: {
            args: Prisma.MealPlanItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealPlanItemPayload>
          }
          aggregate: {
            args: Prisma.MealPlanItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMealPlanItem>
          }
          groupBy: {
            args: Prisma.MealPlanItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<MealPlanItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.MealPlanItemCountArgs<ExtArgs>
            result: $Utils.Optional<MealPlanItemCountAggregateOutputType> | number
          }
        }
      }
      ShoppingList: {
        payload: Prisma.$ShoppingListPayload<ExtArgs>
        fields: Prisma.ShoppingListFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShoppingListFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShoppingListFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload>
          }
          findFirst: {
            args: Prisma.ShoppingListFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShoppingListFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload>
          }
          findMany: {
            args: Prisma.ShoppingListFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload>[]
          }
          create: {
            args: Prisma.ShoppingListCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload>
          }
          createMany: {
            args: Prisma.ShoppingListCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShoppingListCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload>[]
          }
          delete: {
            args: Prisma.ShoppingListDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload>
          }
          update: {
            args: Prisma.ShoppingListUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload>
          }
          deleteMany: {
            args: Prisma.ShoppingListDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShoppingListUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ShoppingListUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload>[]
          }
          upsert: {
            args: Prisma.ShoppingListUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload>
          }
          aggregate: {
            args: Prisma.ShoppingListAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShoppingList>
          }
          groupBy: {
            args: Prisma.ShoppingListGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShoppingListGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShoppingListCountArgs<ExtArgs>
            result: $Utils.Optional<ShoppingListCountAggregateOutputType> | number
          }
        }
      }
      TrendingRecipe: {
        payload: Prisma.$TrendingRecipePayload<ExtArgs>
        fields: Prisma.TrendingRecipeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TrendingRecipeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingRecipePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TrendingRecipeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingRecipePayload>
          }
          findFirst: {
            args: Prisma.TrendingRecipeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingRecipePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TrendingRecipeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingRecipePayload>
          }
          findMany: {
            args: Prisma.TrendingRecipeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingRecipePayload>[]
          }
          create: {
            args: Prisma.TrendingRecipeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingRecipePayload>
          }
          createMany: {
            args: Prisma.TrendingRecipeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TrendingRecipeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingRecipePayload>[]
          }
          delete: {
            args: Prisma.TrendingRecipeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingRecipePayload>
          }
          update: {
            args: Prisma.TrendingRecipeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingRecipePayload>
          }
          deleteMany: {
            args: Prisma.TrendingRecipeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TrendingRecipeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TrendingRecipeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingRecipePayload>[]
          }
          upsert: {
            args: Prisma.TrendingRecipeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrendingRecipePayload>
          }
          aggregate: {
            args: Prisma.TrendingRecipeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrendingRecipe>
          }
          groupBy: {
            args: Prisma.TrendingRecipeGroupByArgs<ExtArgs>
            result: $Utils.Optional<TrendingRecipeGroupByOutputType>[]
          }
          count: {
            args: Prisma.TrendingRecipeCountArgs<ExtArgs>
            result: $Utils.Optional<TrendingRecipeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    account?: AccountOmit
    session?: SessionOmit
    foodImage?: FoodImageOmit
    recipe?: RecipeOmit
    ingredient?: IngredientOmit
    recipeIngredient?: RecipeIngredientOmit
    recipeLike?: RecipeLikeOmit
    savedRecipe?: SavedRecipeOmit
    recipeReview?: RecipeReviewOmit
    madeRecipe?: MadeRecipeOmit
    follow?: FollowOmit
    mealPlan?: MealPlanOmit
    mealPlanItem?: MealPlanItemOmit
    shoppingList?: ShoppingListOmit
    trendingRecipe?: TrendingRecipeOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accounts: number
    sessions: number
    recipes: number
    savedRecipes: number
    recipeLikes: number
    recipeReviews: number
    madeRecipes: number
    mealPlans: number
    foodImages: number
    following: number
    followers: number
    shoppingLists: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    recipes?: boolean | UserCountOutputTypeCountRecipesArgs
    savedRecipes?: boolean | UserCountOutputTypeCountSavedRecipesArgs
    recipeLikes?: boolean | UserCountOutputTypeCountRecipeLikesArgs
    recipeReviews?: boolean | UserCountOutputTypeCountRecipeReviewsArgs
    madeRecipes?: boolean | UserCountOutputTypeCountMadeRecipesArgs
    mealPlans?: boolean | UserCountOutputTypeCountMealPlansArgs
    foodImages?: boolean | UserCountOutputTypeCountFoodImagesArgs
    following?: boolean | UserCountOutputTypeCountFollowingArgs
    followers?: boolean | UserCountOutputTypeCountFollowersArgs
    shoppingLists?: boolean | UserCountOutputTypeCountShoppingListsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRecipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSavedRecipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SavedRecipeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRecipeLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeLikeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRecipeReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeReviewWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMadeRecipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MadeRecipeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMealPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealPlanWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFoodImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodImageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFollowingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FollowWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFollowersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FollowWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountShoppingListsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShoppingListWhereInput
  }


  /**
   * Count Type RecipeCountOutputType
   */

  export type RecipeCountOutputType = {
    ingredients: number
    likes: number
    saves: number
    reviews: number
    madeRecipes: number
    mealPlanItems: number
    foodImages: number
  }

  export type RecipeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ingredients?: boolean | RecipeCountOutputTypeCountIngredientsArgs
    likes?: boolean | RecipeCountOutputTypeCountLikesArgs
    saves?: boolean | RecipeCountOutputTypeCountSavesArgs
    reviews?: boolean | RecipeCountOutputTypeCountReviewsArgs
    madeRecipes?: boolean | RecipeCountOutputTypeCountMadeRecipesArgs
    mealPlanItems?: boolean | RecipeCountOutputTypeCountMealPlanItemsArgs
    foodImages?: boolean | RecipeCountOutputTypeCountFoodImagesArgs
  }

  // Custom InputTypes
  /**
   * RecipeCountOutputType without action
   */
  export type RecipeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeCountOutputType
     */
    select?: RecipeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RecipeCountOutputType without action
   */
  export type RecipeCountOutputTypeCountIngredientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeIngredientWhereInput
  }

  /**
   * RecipeCountOutputType without action
   */
  export type RecipeCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeLikeWhereInput
  }

  /**
   * RecipeCountOutputType without action
   */
  export type RecipeCountOutputTypeCountSavesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SavedRecipeWhereInput
  }

  /**
   * RecipeCountOutputType without action
   */
  export type RecipeCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeReviewWhereInput
  }

  /**
   * RecipeCountOutputType without action
   */
  export type RecipeCountOutputTypeCountMadeRecipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MadeRecipeWhereInput
  }

  /**
   * RecipeCountOutputType without action
   */
  export type RecipeCountOutputTypeCountMealPlanItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealPlanItemWhereInput
  }

  /**
   * RecipeCountOutputType without action
   */
  export type RecipeCountOutputTypeCountFoodImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodImageWhereInput
  }


  /**
   * Count Type IngredientCountOutputType
   */

  export type IngredientCountOutputType = {
    recipeIngredients: number
  }

  export type IngredientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipeIngredients?: boolean | IngredientCountOutputTypeCountRecipeIngredientsArgs
  }

  // Custom InputTypes
  /**
   * IngredientCountOutputType without action
   */
  export type IngredientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IngredientCountOutputType
     */
    select?: IngredientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * IngredientCountOutputType without action
   */
  export type IngredientCountOutputTypeCountRecipeIngredientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeIngredientWhereInput
  }


  /**
   * Count Type MealPlanCountOutputType
   */

  export type MealPlanCountOutputType = {
    items: number
  }

  export type MealPlanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | MealPlanCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * MealPlanCountOutputType without action
   */
  export type MealPlanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlanCountOutputType
     */
    select?: MealPlanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MealPlanCountOutputType without action
   */
  export type MealPlanCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealPlanItemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    name: string | null
    bio: string | null
    avatar: string | null
    verified: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    name: string | null
    bio: string | null
    avatar: string | null
    verified: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    username: number
    name: number
    bio: number
    avatar: number
    verified: number
    createdAt: number
    updatedAt: number
    password: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    username?: true
    name?: true
    bio?: true
    avatar?: true
    verified?: true
    createdAt?: true
    updatedAt?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    username?: true
    name?: true
    bio?: true
    avatar?: true
    verified?: true
    createdAt?: true
    updatedAt?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    username?: true
    name?: true
    bio?: true
    avatar?: true
    verified?: true
    createdAt?: true
    updatedAt?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    username: string
    name: string | null
    bio: string | null
    avatar: string | null
    verified: boolean
    createdAt: Date
    updatedAt: Date
    password: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    name?: boolean
    bio?: boolean
    avatar?: boolean
    verified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    password?: boolean
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    recipes?: boolean | User$recipesArgs<ExtArgs>
    savedRecipes?: boolean | User$savedRecipesArgs<ExtArgs>
    recipeLikes?: boolean | User$recipeLikesArgs<ExtArgs>
    recipeReviews?: boolean | User$recipeReviewsArgs<ExtArgs>
    madeRecipes?: boolean | User$madeRecipesArgs<ExtArgs>
    mealPlans?: boolean | User$mealPlansArgs<ExtArgs>
    foodImages?: boolean | User$foodImagesArgs<ExtArgs>
    following?: boolean | User$followingArgs<ExtArgs>
    followers?: boolean | User$followersArgs<ExtArgs>
    shoppingLists?: boolean | User$shoppingListsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    name?: boolean
    bio?: boolean
    avatar?: boolean
    verified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    password?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    name?: boolean
    bio?: boolean
    avatar?: boolean
    verified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    password?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    username?: boolean
    name?: boolean
    bio?: boolean
    avatar?: boolean
    verified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    password?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "username" | "name" | "bio" | "avatar" | "verified" | "createdAt" | "updatedAt" | "password", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    recipes?: boolean | User$recipesArgs<ExtArgs>
    savedRecipes?: boolean | User$savedRecipesArgs<ExtArgs>
    recipeLikes?: boolean | User$recipeLikesArgs<ExtArgs>
    recipeReviews?: boolean | User$recipeReviewsArgs<ExtArgs>
    madeRecipes?: boolean | User$madeRecipesArgs<ExtArgs>
    mealPlans?: boolean | User$mealPlansArgs<ExtArgs>
    foodImages?: boolean | User$foodImagesArgs<ExtArgs>
    following?: boolean | User$followingArgs<ExtArgs>
    followers?: boolean | User$followersArgs<ExtArgs>
    shoppingLists?: boolean | User$shoppingListsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      recipes: Prisma.$RecipePayload<ExtArgs>[]
      savedRecipes: Prisma.$SavedRecipePayload<ExtArgs>[]
      recipeLikes: Prisma.$RecipeLikePayload<ExtArgs>[]
      recipeReviews: Prisma.$RecipeReviewPayload<ExtArgs>[]
      madeRecipes: Prisma.$MadeRecipePayload<ExtArgs>[]
      mealPlans: Prisma.$MealPlanPayload<ExtArgs>[]
      foodImages: Prisma.$FoodImagePayload<ExtArgs>[]
      following: Prisma.$FollowPayload<ExtArgs>[]
      followers: Prisma.$FollowPayload<ExtArgs>[]
      shoppingLists: Prisma.$ShoppingListPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      username: string
      name: string | null
      bio: string | null
      avatar: string | null
      verified: boolean
      createdAt: Date
      updatedAt: Date
      password: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    recipes<T extends User$recipesArgs<ExtArgs> = {}>(args?: Subset<T, User$recipesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    savedRecipes<T extends User$savedRecipesArgs<ExtArgs> = {}>(args?: Subset<T, User$savedRecipesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SavedRecipePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    recipeLikes<T extends User$recipeLikesArgs<ExtArgs> = {}>(args?: Subset<T, User$recipeLikesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    recipeReviews<T extends User$recipeReviewsArgs<ExtArgs> = {}>(args?: Subset<T, User$recipeReviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    madeRecipes<T extends User$madeRecipesArgs<ExtArgs> = {}>(args?: Subset<T, User$madeRecipesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MadeRecipePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    mealPlans<T extends User$mealPlansArgs<ExtArgs> = {}>(args?: Subset<T, User$mealPlansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    foodImages<T extends User$foodImagesArgs<ExtArgs> = {}>(args?: Subset<T, User$foodImagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    following<T extends User$followingArgs<ExtArgs> = {}>(args?: Subset<T, User$followingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    followers<T extends User$followersArgs<ExtArgs> = {}>(args?: Subset<T, User$followersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    shoppingLists<T extends User$shoppingListsArgs<ExtArgs> = {}>(args?: Subset<T, User$shoppingListsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly bio: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly verified: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly password: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.recipes
   */
  export type User$recipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    where?: RecipeWhereInput
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    cursor?: RecipeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecipeScalarFieldEnum | RecipeScalarFieldEnum[]
  }

  /**
   * User.savedRecipes
   */
  export type User$savedRecipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedRecipe
     */
    select?: SavedRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedRecipe
     */
    omit?: SavedRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedRecipeInclude<ExtArgs> | null
    where?: SavedRecipeWhereInput
    orderBy?: SavedRecipeOrderByWithRelationInput | SavedRecipeOrderByWithRelationInput[]
    cursor?: SavedRecipeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SavedRecipeScalarFieldEnum | SavedRecipeScalarFieldEnum[]
  }

  /**
   * User.recipeLikes
   */
  export type User$recipeLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeLike
     */
    select?: RecipeLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeLike
     */
    omit?: RecipeLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeLikeInclude<ExtArgs> | null
    where?: RecipeLikeWhereInput
    orderBy?: RecipeLikeOrderByWithRelationInput | RecipeLikeOrderByWithRelationInput[]
    cursor?: RecipeLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecipeLikeScalarFieldEnum | RecipeLikeScalarFieldEnum[]
  }

  /**
   * User.recipeReviews
   */
  export type User$recipeReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeReview
     */
    select?: RecipeReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeReview
     */
    omit?: RecipeReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeReviewInclude<ExtArgs> | null
    where?: RecipeReviewWhereInput
    orderBy?: RecipeReviewOrderByWithRelationInput | RecipeReviewOrderByWithRelationInput[]
    cursor?: RecipeReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecipeReviewScalarFieldEnum | RecipeReviewScalarFieldEnum[]
  }

  /**
   * User.madeRecipes
   */
  export type User$madeRecipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MadeRecipe
     */
    select?: MadeRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MadeRecipe
     */
    omit?: MadeRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MadeRecipeInclude<ExtArgs> | null
    where?: MadeRecipeWhereInput
    orderBy?: MadeRecipeOrderByWithRelationInput | MadeRecipeOrderByWithRelationInput[]
    cursor?: MadeRecipeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MadeRecipeScalarFieldEnum | MadeRecipeScalarFieldEnum[]
  }

  /**
   * User.mealPlans
   */
  export type User$mealPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealPlan
     */
    omit?: MealPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    where?: MealPlanWhereInput
    orderBy?: MealPlanOrderByWithRelationInput | MealPlanOrderByWithRelationInput[]
    cursor?: MealPlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MealPlanScalarFieldEnum | MealPlanScalarFieldEnum[]
  }

  /**
   * User.foodImages
   */
  export type User$foodImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodImage
     */
    select?: FoodImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodImage
     */
    omit?: FoodImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodImageInclude<ExtArgs> | null
    where?: FoodImageWhereInput
    orderBy?: FoodImageOrderByWithRelationInput | FoodImageOrderByWithRelationInput[]
    cursor?: FoodImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FoodImageScalarFieldEnum | FoodImageScalarFieldEnum[]
  }

  /**
   * User.following
   */
  export type User$followingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    where?: FollowWhereInput
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    cursor?: FollowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }

  /**
   * User.followers
   */
  export type User$followersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    where?: FollowWhereInput
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    cursor?: FollowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }

  /**
   * User.shoppingLists
   */
  export type User$shoppingListsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingList
     */
    omit?: ShoppingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    where?: ShoppingListWhereInput
    orderBy?: ShoppingListOrderByWithRelationInput | ShoppingListOrderByWithRelationInput[]
    cursor?: ShoppingListWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShoppingListScalarFieldEnum | ShoppingListScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "provider" | "providerAccountId" | "refresh_token" | "access_token" | "expires_at" | "token_type" | "scope" | "id_token" | "session_state", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      provider: string
      providerAccountId: string
      refresh_token: string | null
      access_token: string | null
      expires_at: number | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      session_state: string | null
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    userId: string
    expires: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionToken" | "userId" | "expires", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionToken: string
      userId: string
      expires: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly sessionToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly expires: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model FoodImage
   */

  export type AggregateFoodImage = {
    _count: FoodImageCountAggregateOutputType | null
    _min: FoodImageMinAggregateOutputType | null
    _max: FoodImageMaxAggregateOutputType | null
  }

  export type FoodImageMinAggregateOutputType = {
    id: string | null
    filename: string | null
    base64: string | null
    uploadedAt: Date | null
    userId: string | null
    recipeId: string | null
  }

  export type FoodImageMaxAggregateOutputType = {
    id: string | null
    filename: string | null
    base64: string | null
    uploadedAt: Date | null
    userId: string | null
    recipeId: string | null
  }

  export type FoodImageCountAggregateOutputType = {
    id: number
    filename: number
    base64: number
    uploadedAt: number
    analysis: number
    userId: number
    recipeId: number
    _all: number
  }


  export type FoodImageMinAggregateInputType = {
    id?: true
    filename?: true
    base64?: true
    uploadedAt?: true
    userId?: true
    recipeId?: true
  }

  export type FoodImageMaxAggregateInputType = {
    id?: true
    filename?: true
    base64?: true
    uploadedAt?: true
    userId?: true
    recipeId?: true
  }

  export type FoodImageCountAggregateInputType = {
    id?: true
    filename?: true
    base64?: true
    uploadedAt?: true
    analysis?: true
    userId?: true
    recipeId?: true
    _all?: true
  }

  export type FoodImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FoodImage to aggregate.
     */
    where?: FoodImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodImages to fetch.
     */
    orderBy?: FoodImageOrderByWithRelationInput | FoodImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FoodImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FoodImages
    **/
    _count?: true | FoodImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FoodImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FoodImageMaxAggregateInputType
  }

  export type GetFoodImageAggregateType<T extends FoodImageAggregateArgs> = {
        [P in keyof T & keyof AggregateFoodImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFoodImage[P]>
      : GetScalarType<T[P], AggregateFoodImage[P]>
  }




  export type FoodImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodImageWhereInput
    orderBy?: FoodImageOrderByWithAggregationInput | FoodImageOrderByWithAggregationInput[]
    by: FoodImageScalarFieldEnum[] | FoodImageScalarFieldEnum
    having?: FoodImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FoodImageCountAggregateInputType | true
    _min?: FoodImageMinAggregateInputType
    _max?: FoodImageMaxAggregateInputType
  }

  export type FoodImageGroupByOutputType = {
    id: string
    filename: string
    base64: string
    uploadedAt: Date
    analysis: JsonValue | null
    userId: string | null
    recipeId: string | null
    _count: FoodImageCountAggregateOutputType | null
    _min: FoodImageMinAggregateOutputType | null
    _max: FoodImageMaxAggregateOutputType | null
  }

  type GetFoodImageGroupByPayload<T extends FoodImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FoodImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FoodImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FoodImageGroupByOutputType[P]>
            : GetScalarType<T[P], FoodImageGroupByOutputType[P]>
        }
      >
    >


  export type FoodImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    base64?: boolean
    uploadedAt?: boolean
    analysis?: boolean
    userId?: boolean
    recipeId?: boolean
    user?: boolean | FoodImage$userArgs<ExtArgs>
    recipe?: boolean | FoodImage$recipeArgs<ExtArgs>
  }, ExtArgs["result"]["foodImage"]>

  export type FoodImageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    base64?: boolean
    uploadedAt?: boolean
    analysis?: boolean
    userId?: boolean
    recipeId?: boolean
    user?: boolean | FoodImage$userArgs<ExtArgs>
    recipe?: boolean | FoodImage$recipeArgs<ExtArgs>
  }, ExtArgs["result"]["foodImage"]>

  export type FoodImageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    base64?: boolean
    uploadedAt?: boolean
    analysis?: boolean
    userId?: boolean
    recipeId?: boolean
    user?: boolean | FoodImage$userArgs<ExtArgs>
    recipe?: boolean | FoodImage$recipeArgs<ExtArgs>
  }, ExtArgs["result"]["foodImage"]>

  export type FoodImageSelectScalar = {
    id?: boolean
    filename?: boolean
    base64?: boolean
    uploadedAt?: boolean
    analysis?: boolean
    userId?: boolean
    recipeId?: boolean
  }

  export type FoodImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "filename" | "base64" | "uploadedAt" | "analysis" | "userId" | "recipeId", ExtArgs["result"]["foodImage"]>
  export type FoodImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | FoodImage$userArgs<ExtArgs>
    recipe?: boolean | FoodImage$recipeArgs<ExtArgs>
  }
  export type FoodImageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | FoodImage$userArgs<ExtArgs>
    recipe?: boolean | FoodImage$recipeArgs<ExtArgs>
  }
  export type FoodImageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | FoodImage$userArgs<ExtArgs>
    recipe?: boolean | FoodImage$recipeArgs<ExtArgs>
  }

  export type $FoodImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FoodImage"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      recipe: Prisma.$RecipePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      filename: string
      base64: string
      uploadedAt: Date
      analysis: Prisma.JsonValue | null
      userId: string | null
      recipeId: string | null
    }, ExtArgs["result"]["foodImage"]>
    composites: {}
  }

  type FoodImageGetPayload<S extends boolean | null | undefined | FoodImageDefaultArgs> = $Result.GetResult<Prisma.$FoodImagePayload, S>

  type FoodImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FoodImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FoodImageCountAggregateInputType | true
    }

  export interface FoodImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FoodImage'], meta: { name: 'FoodImage' } }
    /**
     * Find zero or one FoodImage that matches the filter.
     * @param {FoodImageFindUniqueArgs} args - Arguments to find a FoodImage
     * @example
     * // Get one FoodImage
     * const foodImage = await prisma.foodImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FoodImageFindUniqueArgs>(args: SelectSubset<T, FoodImageFindUniqueArgs<ExtArgs>>): Prisma__FoodImageClient<$Result.GetResult<Prisma.$FoodImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FoodImage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FoodImageFindUniqueOrThrowArgs} args - Arguments to find a FoodImage
     * @example
     * // Get one FoodImage
     * const foodImage = await prisma.foodImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FoodImageFindUniqueOrThrowArgs>(args: SelectSubset<T, FoodImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FoodImageClient<$Result.GetResult<Prisma.$FoodImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FoodImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodImageFindFirstArgs} args - Arguments to find a FoodImage
     * @example
     * // Get one FoodImage
     * const foodImage = await prisma.foodImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FoodImageFindFirstArgs>(args?: SelectSubset<T, FoodImageFindFirstArgs<ExtArgs>>): Prisma__FoodImageClient<$Result.GetResult<Prisma.$FoodImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FoodImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodImageFindFirstOrThrowArgs} args - Arguments to find a FoodImage
     * @example
     * // Get one FoodImage
     * const foodImage = await prisma.foodImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FoodImageFindFirstOrThrowArgs>(args?: SelectSubset<T, FoodImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__FoodImageClient<$Result.GetResult<Prisma.$FoodImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FoodImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FoodImages
     * const foodImages = await prisma.foodImage.findMany()
     * 
     * // Get first 10 FoodImages
     * const foodImages = await prisma.foodImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const foodImageWithIdOnly = await prisma.foodImage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FoodImageFindManyArgs>(args?: SelectSubset<T, FoodImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FoodImage.
     * @param {FoodImageCreateArgs} args - Arguments to create a FoodImage.
     * @example
     * // Create one FoodImage
     * const FoodImage = await prisma.foodImage.create({
     *   data: {
     *     // ... data to create a FoodImage
     *   }
     * })
     * 
     */
    create<T extends FoodImageCreateArgs>(args: SelectSubset<T, FoodImageCreateArgs<ExtArgs>>): Prisma__FoodImageClient<$Result.GetResult<Prisma.$FoodImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FoodImages.
     * @param {FoodImageCreateManyArgs} args - Arguments to create many FoodImages.
     * @example
     * // Create many FoodImages
     * const foodImage = await prisma.foodImage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FoodImageCreateManyArgs>(args?: SelectSubset<T, FoodImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FoodImages and returns the data saved in the database.
     * @param {FoodImageCreateManyAndReturnArgs} args - Arguments to create many FoodImages.
     * @example
     * // Create many FoodImages
     * const foodImage = await prisma.foodImage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FoodImages and only return the `id`
     * const foodImageWithIdOnly = await prisma.foodImage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FoodImageCreateManyAndReturnArgs>(args?: SelectSubset<T, FoodImageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodImagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FoodImage.
     * @param {FoodImageDeleteArgs} args - Arguments to delete one FoodImage.
     * @example
     * // Delete one FoodImage
     * const FoodImage = await prisma.foodImage.delete({
     *   where: {
     *     // ... filter to delete one FoodImage
     *   }
     * })
     * 
     */
    delete<T extends FoodImageDeleteArgs>(args: SelectSubset<T, FoodImageDeleteArgs<ExtArgs>>): Prisma__FoodImageClient<$Result.GetResult<Prisma.$FoodImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FoodImage.
     * @param {FoodImageUpdateArgs} args - Arguments to update one FoodImage.
     * @example
     * // Update one FoodImage
     * const foodImage = await prisma.foodImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FoodImageUpdateArgs>(args: SelectSubset<T, FoodImageUpdateArgs<ExtArgs>>): Prisma__FoodImageClient<$Result.GetResult<Prisma.$FoodImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FoodImages.
     * @param {FoodImageDeleteManyArgs} args - Arguments to filter FoodImages to delete.
     * @example
     * // Delete a few FoodImages
     * const { count } = await prisma.foodImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FoodImageDeleteManyArgs>(args?: SelectSubset<T, FoodImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FoodImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FoodImages
     * const foodImage = await prisma.foodImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FoodImageUpdateManyArgs>(args: SelectSubset<T, FoodImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FoodImages and returns the data updated in the database.
     * @param {FoodImageUpdateManyAndReturnArgs} args - Arguments to update many FoodImages.
     * @example
     * // Update many FoodImages
     * const foodImage = await prisma.foodImage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FoodImages and only return the `id`
     * const foodImageWithIdOnly = await prisma.foodImage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FoodImageUpdateManyAndReturnArgs>(args: SelectSubset<T, FoodImageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodImagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FoodImage.
     * @param {FoodImageUpsertArgs} args - Arguments to update or create a FoodImage.
     * @example
     * // Update or create a FoodImage
     * const foodImage = await prisma.foodImage.upsert({
     *   create: {
     *     // ... data to create a FoodImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FoodImage we want to update
     *   }
     * })
     */
    upsert<T extends FoodImageUpsertArgs>(args: SelectSubset<T, FoodImageUpsertArgs<ExtArgs>>): Prisma__FoodImageClient<$Result.GetResult<Prisma.$FoodImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FoodImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodImageCountArgs} args - Arguments to filter FoodImages to count.
     * @example
     * // Count the number of FoodImages
     * const count = await prisma.foodImage.count({
     *   where: {
     *     // ... the filter for the FoodImages we want to count
     *   }
     * })
    **/
    count<T extends FoodImageCountArgs>(
      args?: Subset<T, FoodImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FoodImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FoodImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FoodImageAggregateArgs>(args: Subset<T, FoodImageAggregateArgs>): Prisma.PrismaPromise<GetFoodImageAggregateType<T>>

    /**
     * Group by FoodImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FoodImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FoodImageGroupByArgs['orderBy'] }
        : { orderBy?: FoodImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FoodImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFoodImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FoodImage model
   */
  readonly fields: FoodImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FoodImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FoodImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends FoodImage$userArgs<ExtArgs> = {}>(args?: Subset<T, FoodImage$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    recipe<T extends FoodImage$recipeArgs<ExtArgs> = {}>(args?: Subset<T, FoodImage$recipeArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FoodImage model
   */
  interface FoodImageFieldRefs {
    readonly id: FieldRef<"FoodImage", 'String'>
    readonly filename: FieldRef<"FoodImage", 'String'>
    readonly base64: FieldRef<"FoodImage", 'String'>
    readonly uploadedAt: FieldRef<"FoodImage", 'DateTime'>
    readonly analysis: FieldRef<"FoodImage", 'Json'>
    readonly userId: FieldRef<"FoodImage", 'String'>
    readonly recipeId: FieldRef<"FoodImage", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FoodImage findUnique
   */
  export type FoodImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodImage
     */
    select?: FoodImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodImage
     */
    omit?: FoodImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodImageInclude<ExtArgs> | null
    /**
     * Filter, which FoodImage to fetch.
     */
    where: FoodImageWhereUniqueInput
  }

  /**
   * FoodImage findUniqueOrThrow
   */
  export type FoodImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodImage
     */
    select?: FoodImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodImage
     */
    omit?: FoodImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodImageInclude<ExtArgs> | null
    /**
     * Filter, which FoodImage to fetch.
     */
    where: FoodImageWhereUniqueInput
  }

  /**
   * FoodImage findFirst
   */
  export type FoodImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodImage
     */
    select?: FoodImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodImage
     */
    omit?: FoodImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodImageInclude<ExtArgs> | null
    /**
     * Filter, which FoodImage to fetch.
     */
    where?: FoodImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodImages to fetch.
     */
    orderBy?: FoodImageOrderByWithRelationInput | FoodImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoodImages.
     */
    cursor?: FoodImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoodImages.
     */
    distinct?: FoodImageScalarFieldEnum | FoodImageScalarFieldEnum[]
  }

  /**
   * FoodImage findFirstOrThrow
   */
  export type FoodImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodImage
     */
    select?: FoodImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodImage
     */
    omit?: FoodImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodImageInclude<ExtArgs> | null
    /**
     * Filter, which FoodImage to fetch.
     */
    where?: FoodImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodImages to fetch.
     */
    orderBy?: FoodImageOrderByWithRelationInput | FoodImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoodImages.
     */
    cursor?: FoodImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoodImages.
     */
    distinct?: FoodImageScalarFieldEnum | FoodImageScalarFieldEnum[]
  }

  /**
   * FoodImage findMany
   */
  export type FoodImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodImage
     */
    select?: FoodImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodImage
     */
    omit?: FoodImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodImageInclude<ExtArgs> | null
    /**
     * Filter, which FoodImages to fetch.
     */
    where?: FoodImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodImages to fetch.
     */
    orderBy?: FoodImageOrderByWithRelationInput | FoodImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FoodImages.
     */
    cursor?: FoodImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodImages.
     */
    skip?: number
    distinct?: FoodImageScalarFieldEnum | FoodImageScalarFieldEnum[]
  }

  /**
   * FoodImage create
   */
  export type FoodImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodImage
     */
    select?: FoodImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodImage
     */
    omit?: FoodImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodImageInclude<ExtArgs> | null
    /**
     * The data needed to create a FoodImage.
     */
    data: XOR<FoodImageCreateInput, FoodImageUncheckedCreateInput>
  }

  /**
   * FoodImage createMany
   */
  export type FoodImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FoodImages.
     */
    data: FoodImageCreateManyInput | FoodImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FoodImage createManyAndReturn
   */
  export type FoodImageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodImage
     */
    select?: FoodImageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FoodImage
     */
    omit?: FoodImageOmit<ExtArgs> | null
    /**
     * The data used to create many FoodImages.
     */
    data: FoodImageCreateManyInput | FoodImageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodImageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FoodImage update
   */
  export type FoodImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodImage
     */
    select?: FoodImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodImage
     */
    omit?: FoodImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodImageInclude<ExtArgs> | null
    /**
     * The data needed to update a FoodImage.
     */
    data: XOR<FoodImageUpdateInput, FoodImageUncheckedUpdateInput>
    /**
     * Choose, which FoodImage to update.
     */
    where: FoodImageWhereUniqueInput
  }

  /**
   * FoodImage updateMany
   */
  export type FoodImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FoodImages.
     */
    data: XOR<FoodImageUpdateManyMutationInput, FoodImageUncheckedUpdateManyInput>
    /**
     * Filter which FoodImages to update
     */
    where?: FoodImageWhereInput
    /**
     * Limit how many FoodImages to update.
     */
    limit?: number
  }

  /**
   * FoodImage updateManyAndReturn
   */
  export type FoodImageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodImage
     */
    select?: FoodImageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FoodImage
     */
    omit?: FoodImageOmit<ExtArgs> | null
    /**
     * The data used to update FoodImages.
     */
    data: XOR<FoodImageUpdateManyMutationInput, FoodImageUncheckedUpdateManyInput>
    /**
     * Filter which FoodImages to update
     */
    where?: FoodImageWhereInput
    /**
     * Limit how many FoodImages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodImageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FoodImage upsert
   */
  export type FoodImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodImage
     */
    select?: FoodImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodImage
     */
    omit?: FoodImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodImageInclude<ExtArgs> | null
    /**
     * The filter to search for the FoodImage to update in case it exists.
     */
    where: FoodImageWhereUniqueInput
    /**
     * In case the FoodImage found by the `where` argument doesn't exist, create a new FoodImage with this data.
     */
    create: XOR<FoodImageCreateInput, FoodImageUncheckedCreateInput>
    /**
     * In case the FoodImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FoodImageUpdateInput, FoodImageUncheckedUpdateInput>
  }

  /**
   * FoodImage delete
   */
  export type FoodImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodImage
     */
    select?: FoodImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodImage
     */
    omit?: FoodImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodImageInclude<ExtArgs> | null
    /**
     * Filter which FoodImage to delete.
     */
    where: FoodImageWhereUniqueInput
  }

  /**
   * FoodImage deleteMany
   */
  export type FoodImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FoodImages to delete
     */
    where?: FoodImageWhereInput
    /**
     * Limit how many FoodImages to delete.
     */
    limit?: number
  }

  /**
   * FoodImage.user
   */
  export type FoodImage$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * FoodImage.recipe
   */
  export type FoodImage$recipeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    where?: RecipeWhereInput
  }

  /**
   * FoodImage without action
   */
  export type FoodImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodImage
     */
    select?: FoodImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodImage
     */
    omit?: FoodImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodImageInclude<ExtArgs> | null
  }


  /**
   * Model Recipe
   */

  export type AggregateRecipe = {
    _count: RecipeCountAggregateOutputType | null
    _avg: RecipeAvgAggregateOutputType | null
    _sum: RecipeSumAggregateOutputType | null
    _min: RecipeMinAggregateOutputType | null
    _max: RecipeMaxAggregateOutputType | null
  }

  export type RecipeAvgAggregateOutputType = {
    prepTime: number | null
    cookTime: number | null
    servings: number | null
    likesCount: number | null
    savesCount: number | null
    madeCount: number | null
    viewsCount: number | null
    avgRating: number | null
    reviewsCount: number | null
  }

  export type RecipeSumAggregateOutputType = {
    prepTime: number | null
    cookTime: number | null
    servings: number | null
    likesCount: number | null
    savesCount: number | null
    madeCount: number | null
    viewsCount: number | null
    avgRating: number | null
    reviewsCount: number | null
  }

  export type RecipeMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    prepTime: number | null
    cookTime: number | null
    servings: number | null
    difficulty: string | null
    cuisine: string | null
    category: string | null
    mainImage: string | null
    likesCount: number | null
    savesCount: number | null
    madeCount: number | null
    viewsCount: number | null
    avgRating: number | null
    reviewsCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
    publishedAt: Date | null
    isPublished: boolean | null
    authorId: string | null
  }

  export type RecipeMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    prepTime: number | null
    cookTime: number | null
    servings: number | null
    difficulty: string | null
    cuisine: string | null
    category: string | null
    mainImage: string | null
    likesCount: number | null
    savesCount: number | null
    madeCount: number | null
    viewsCount: number | null
    avgRating: number | null
    reviewsCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
    publishedAt: Date | null
    isPublished: boolean | null
    authorId: string | null
  }

  export type RecipeCountAggregateOutputType = {
    id: number
    title: number
    description: number
    instructions: number
    prepTime: number
    cookTime: number
    servings: number
    difficulty: number
    cuisine: number
    category: number
    images: number
    mainImage: number
    aiTags: number
    userTags: number
    allTags: number
    pairings: number
    nutrition: number
    likesCount: number
    savesCount: number
    madeCount: number
    viewsCount: number
    avgRating: number
    reviewsCount: number
    createdAt: number
    updatedAt: number
    publishedAt: number
    isPublished: number
    authorId: number
    _all: number
  }


  export type RecipeAvgAggregateInputType = {
    prepTime?: true
    cookTime?: true
    servings?: true
    likesCount?: true
    savesCount?: true
    madeCount?: true
    viewsCount?: true
    avgRating?: true
    reviewsCount?: true
  }

  export type RecipeSumAggregateInputType = {
    prepTime?: true
    cookTime?: true
    servings?: true
    likesCount?: true
    savesCount?: true
    madeCount?: true
    viewsCount?: true
    avgRating?: true
    reviewsCount?: true
  }

  export type RecipeMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    prepTime?: true
    cookTime?: true
    servings?: true
    difficulty?: true
    cuisine?: true
    category?: true
    mainImage?: true
    likesCount?: true
    savesCount?: true
    madeCount?: true
    viewsCount?: true
    avgRating?: true
    reviewsCount?: true
    createdAt?: true
    updatedAt?: true
    publishedAt?: true
    isPublished?: true
    authorId?: true
  }

  export type RecipeMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    prepTime?: true
    cookTime?: true
    servings?: true
    difficulty?: true
    cuisine?: true
    category?: true
    mainImage?: true
    likesCount?: true
    savesCount?: true
    madeCount?: true
    viewsCount?: true
    avgRating?: true
    reviewsCount?: true
    createdAt?: true
    updatedAt?: true
    publishedAt?: true
    isPublished?: true
    authorId?: true
  }

  export type RecipeCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    instructions?: true
    prepTime?: true
    cookTime?: true
    servings?: true
    difficulty?: true
    cuisine?: true
    category?: true
    images?: true
    mainImage?: true
    aiTags?: true
    userTags?: true
    allTags?: true
    pairings?: true
    nutrition?: true
    likesCount?: true
    savesCount?: true
    madeCount?: true
    viewsCount?: true
    avgRating?: true
    reviewsCount?: true
    createdAt?: true
    updatedAt?: true
    publishedAt?: true
    isPublished?: true
    authorId?: true
    _all?: true
  }

  export type RecipeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recipe to aggregate.
     */
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recipes
    **/
    _count?: true | RecipeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecipeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecipeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecipeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecipeMaxAggregateInputType
  }

  export type GetRecipeAggregateType<T extends RecipeAggregateArgs> = {
        [P in keyof T & keyof AggregateRecipe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecipe[P]>
      : GetScalarType<T[P], AggregateRecipe[P]>
  }




  export type RecipeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeWhereInput
    orderBy?: RecipeOrderByWithAggregationInput | RecipeOrderByWithAggregationInput[]
    by: RecipeScalarFieldEnum[] | RecipeScalarFieldEnum
    having?: RecipeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecipeCountAggregateInputType | true
    _avg?: RecipeAvgAggregateInputType
    _sum?: RecipeSumAggregateInputType
    _min?: RecipeMinAggregateInputType
    _max?: RecipeMaxAggregateInputType
  }

  export type RecipeGroupByOutputType = {
    id: string
    title: string
    description: string | null
    instructions: JsonValue
    prepTime: number | null
    cookTime: number | null
    servings: number | null
    difficulty: string | null
    cuisine: string | null
    category: string | null
    images: string[]
    mainImage: string | null
    aiTags: string[]
    userTags: string[]
    allTags: string[]
    pairings: JsonValue | null
    nutrition: JsonValue | null
    likesCount: number
    savesCount: number
    madeCount: number
    viewsCount: number
    avgRating: number
    reviewsCount: number
    createdAt: Date
    updatedAt: Date
    publishedAt: Date | null
    isPublished: boolean
    authorId: string
    _count: RecipeCountAggregateOutputType | null
    _avg: RecipeAvgAggregateOutputType | null
    _sum: RecipeSumAggregateOutputType | null
    _min: RecipeMinAggregateOutputType | null
    _max: RecipeMaxAggregateOutputType | null
  }

  type GetRecipeGroupByPayload<T extends RecipeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecipeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecipeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecipeGroupByOutputType[P]>
            : GetScalarType<T[P], RecipeGroupByOutputType[P]>
        }
      >
    >


  export type RecipeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    instructions?: boolean
    prepTime?: boolean
    cookTime?: boolean
    servings?: boolean
    difficulty?: boolean
    cuisine?: boolean
    category?: boolean
    images?: boolean
    mainImage?: boolean
    aiTags?: boolean
    userTags?: boolean
    allTags?: boolean
    pairings?: boolean
    nutrition?: boolean
    likesCount?: boolean
    savesCount?: boolean
    madeCount?: boolean
    viewsCount?: boolean
    avgRating?: boolean
    reviewsCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    publishedAt?: boolean
    isPublished?: boolean
    authorId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    ingredients?: boolean | Recipe$ingredientsArgs<ExtArgs>
    likes?: boolean | Recipe$likesArgs<ExtArgs>
    saves?: boolean | Recipe$savesArgs<ExtArgs>
    reviews?: boolean | Recipe$reviewsArgs<ExtArgs>
    madeRecipes?: boolean | Recipe$madeRecipesArgs<ExtArgs>
    mealPlanItems?: boolean | Recipe$mealPlanItemsArgs<ExtArgs>
    foodImages?: boolean | Recipe$foodImagesArgs<ExtArgs>
    _count?: boolean | RecipeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recipe"]>

  export type RecipeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    instructions?: boolean
    prepTime?: boolean
    cookTime?: boolean
    servings?: boolean
    difficulty?: boolean
    cuisine?: boolean
    category?: boolean
    images?: boolean
    mainImage?: boolean
    aiTags?: boolean
    userTags?: boolean
    allTags?: boolean
    pairings?: boolean
    nutrition?: boolean
    likesCount?: boolean
    savesCount?: boolean
    madeCount?: boolean
    viewsCount?: boolean
    avgRating?: boolean
    reviewsCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    publishedAt?: boolean
    isPublished?: boolean
    authorId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recipe"]>

  export type RecipeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    instructions?: boolean
    prepTime?: boolean
    cookTime?: boolean
    servings?: boolean
    difficulty?: boolean
    cuisine?: boolean
    category?: boolean
    images?: boolean
    mainImage?: boolean
    aiTags?: boolean
    userTags?: boolean
    allTags?: boolean
    pairings?: boolean
    nutrition?: boolean
    likesCount?: boolean
    savesCount?: boolean
    madeCount?: boolean
    viewsCount?: boolean
    avgRating?: boolean
    reviewsCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    publishedAt?: boolean
    isPublished?: boolean
    authorId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recipe"]>

  export type RecipeSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    instructions?: boolean
    prepTime?: boolean
    cookTime?: boolean
    servings?: boolean
    difficulty?: boolean
    cuisine?: boolean
    category?: boolean
    images?: boolean
    mainImage?: boolean
    aiTags?: boolean
    userTags?: boolean
    allTags?: boolean
    pairings?: boolean
    nutrition?: boolean
    likesCount?: boolean
    savesCount?: boolean
    madeCount?: boolean
    viewsCount?: boolean
    avgRating?: boolean
    reviewsCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    publishedAt?: boolean
    isPublished?: boolean
    authorId?: boolean
  }

  export type RecipeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "instructions" | "prepTime" | "cookTime" | "servings" | "difficulty" | "cuisine" | "category" | "images" | "mainImage" | "aiTags" | "userTags" | "allTags" | "pairings" | "nutrition" | "likesCount" | "savesCount" | "madeCount" | "viewsCount" | "avgRating" | "reviewsCount" | "createdAt" | "updatedAt" | "publishedAt" | "isPublished" | "authorId", ExtArgs["result"]["recipe"]>
  export type RecipeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    ingredients?: boolean | Recipe$ingredientsArgs<ExtArgs>
    likes?: boolean | Recipe$likesArgs<ExtArgs>
    saves?: boolean | Recipe$savesArgs<ExtArgs>
    reviews?: boolean | Recipe$reviewsArgs<ExtArgs>
    madeRecipes?: boolean | Recipe$madeRecipesArgs<ExtArgs>
    mealPlanItems?: boolean | Recipe$mealPlanItemsArgs<ExtArgs>
    foodImages?: boolean | Recipe$foodImagesArgs<ExtArgs>
    _count?: boolean | RecipeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RecipeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RecipeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RecipePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Recipe"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
      ingredients: Prisma.$RecipeIngredientPayload<ExtArgs>[]
      likes: Prisma.$RecipeLikePayload<ExtArgs>[]
      saves: Prisma.$SavedRecipePayload<ExtArgs>[]
      reviews: Prisma.$RecipeReviewPayload<ExtArgs>[]
      madeRecipes: Prisma.$MadeRecipePayload<ExtArgs>[]
      mealPlanItems: Prisma.$MealPlanItemPayload<ExtArgs>[]
      foodImages: Prisma.$FoodImagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      instructions: Prisma.JsonValue
      prepTime: number | null
      cookTime: number | null
      servings: number | null
      difficulty: string | null
      cuisine: string | null
      category: string | null
      images: string[]
      mainImage: string | null
      aiTags: string[]
      userTags: string[]
      allTags: string[]
      pairings: Prisma.JsonValue | null
      nutrition: Prisma.JsonValue | null
      likesCount: number
      savesCount: number
      madeCount: number
      viewsCount: number
      avgRating: number
      reviewsCount: number
      createdAt: Date
      updatedAt: Date
      publishedAt: Date | null
      isPublished: boolean
      authorId: string
    }, ExtArgs["result"]["recipe"]>
    composites: {}
  }

  type RecipeGetPayload<S extends boolean | null | undefined | RecipeDefaultArgs> = $Result.GetResult<Prisma.$RecipePayload, S>

  type RecipeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RecipeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RecipeCountAggregateInputType | true
    }

  export interface RecipeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Recipe'], meta: { name: 'Recipe' } }
    /**
     * Find zero or one Recipe that matches the filter.
     * @param {RecipeFindUniqueArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecipeFindUniqueArgs>(args: SelectSubset<T, RecipeFindUniqueArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Recipe that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RecipeFindUniqueOrThrowArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecipeFindUniqueOrThrowArgs>(args: SelectSubset<T, RecipeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Recipe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeFindFirstArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecipeFindFirstArgs>(args?: SelectSubset<T, RecipeFindFirstArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Recipe that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeFindFirstOrThrowArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecipeFindFirstOrThrowArgs>(args?: SelectSubset<T, RecipeFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Recipes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recipes
     * const recipes = await prisma.recipe.findMany()
     * 
     * // Get first 10 Recipes
     * const recipes = await prisma.recipe.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recipeWithIdOnly = await prisma.recipe.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RecipeFindManyArgs>(args?: SelectSubset<T, RecipeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Recipe.
     * @param {RecipeCreateArgs} args - Arguments to create a Recipe.
     * @example
     * // Create one Recipe
     * const Recipe = await prisma.recipe.create({
     *   data: {
     *     // ... data to create a Recipe
     *   }
     * })
     * 
     */
    create<T extends RecipeCreateArgs>(args: SelectSubset<T, RecipeCreateArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Recipes.
     * @param {RecipeCreateManyArgs} args - Arguments to create many Recipes.
     * @example
     * // Create many Recipes
     * const recipe = await prisma.recipe.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecipeCreateManyArgs>(args?: SelectSubset<T, RecipeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Recipes and returns the data saved in the database.
     * @param {RecipeCreateManyAndReturnArgs} args - Arguments to create many Recipes.
     * @example
     * // Create many Recipes
     * const recipe = await prisma.recipe.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Recipes and only return the `id`
     * const recipeWithIdOnly = await prisma.recipe.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RecipeCreateManyAndReturnArgs>(args?: SelectSubset<T, RecipeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Recipe.
     * @param {RecipeDeleteArgs} args - Arguments to delete one Recipe.
     * @example
     * // Delete one Recipe
     * const Recipe = await prisma.recipe.delete({
     *   where: {
     *     // ... filter to delete one Recipe
     *   }
     * })
     * 
     */
    delete<T extends RecipeDeleteArgs>(args: SelectSubset<T, RecipeDeleteArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Recipe.
     * @param {RecipeUpdateArgs} args - Arguments to update one Recipe.
     * @example
     * // Update one Recipe
     * const recipe = await prisma.recipe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecipeUpdateArgs>(args: SelectSubset<T, RecipeUpdateArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Recipes.
     * @param {RecipeDeleteManyArgs} args - Arguments to filter Recipes to delete.
     * @example
     * // Delete a few Recipes
     * const { count } = await prisma.recipe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecipeDeleteManyArgs>(args?: SelectSubset<T, RecipeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recipes
     * const recipe = await prisma.recipe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecipeUpdateManyArgs>(args: SelectSubset<T, RecipeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recipes and returns the data updated in the database.
     * @param {RecipeUpdateManyAndReturnArgs} args - Arguments to update many Recipes.
     * @example
     * // Update many Recipes
     * const recipe = await prisma.recipe.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Recipes and only return the `id`
     * const recipeWithIdOnly = await prisma.recipe.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RecipeUpdateManyAndReturnArgs>(args: SelectSubset<T, RecipeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Recipe.
     * @param {RecipeUpsertArgs} args - Arguments to update or create a Recipe.
     * @example
     * // Update or create a Recipe
     * const recipe = await prisma.recipe.upsert({
     *   create: {
     *     // ... data to create a Recipe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recipe we want to update
     *   }
     * })
     */
    upsert<T extends RecipeUpsertArgs>(args: SelectSubset<T, RecipeUpsertArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Recipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeCountArgs} args - Arguments to filter Recipes to count.
     * @example
     * // Count the number of Recipes
     * const count = await prisma.recipe.count({
     *   where: {
     *     // ... the filter for the Recipes we want to count
     *   }
     * })
    **/
    count<T extends RecipeCountArgs>(
      args?: Subset<T, RecipeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecipeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecipeAggregateArgs>(args: Subset<T, RecipeAggregateArgs>): Prisma.PrismaPromise<GetRecipeAggregateType<T>>

    /**
     * Group by Recipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecipeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecipeGroupByArgs['orderBy'] }
        : { orderBy?: RecipeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecipeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecipeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Recipe model
   */
  readonly fields: RecipeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Recipe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecipeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    ingredients<T extends Recipe$ingredientsArgs<ExtArgs> = {}>(args?: Subset<T, Recipe$ingredientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    likes<T extends Recipe$likesArgs<ExtArgs> = {}>(args?: Subset<T, Recipe$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    saves<T extends Recipe$savesArgs<ExtArgs> = {}>(args?: Subset<T, Recipe$savesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SavedRecipePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviews<T extends Recipe$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, Recipe$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    madeRecipes<T extends Recipe$madeRecipesArgs<ExtArgs> = {}>(args?: Subset<T, Recipe$madeRecipesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MadeRecipePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    mealPlanItems<T extends Recipe$mealPlanItemsArgs<ExtArgs> = {}>(args?: Subset<T, Recipe$mealPlanItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealPlanItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    foodImages<T extends Recipe$foodImagesArgs<ExtArgs> = {}>(args?: Subset<T, Recipe$foodImagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Recipe model
   */
  interface RecipeFieldRefs {
    readonly id: FieldRef<"Recipe", 'String'>
    readonly title: FieldRef<"Recipe", 'String'>
    readonly description: FieldRef<"Recipe", 'String'>
    readonly instructions: FieldRef<"Recipe", 'Json'>
    readonly prepTime: FieldRef<"Recipe", 'Int'>
    readonly cookTime: FieldRef<"Recipe", 'Int'>
    readonly servings: FieldRef<"Recipe", 'Int'>
    readonly difficulty: FieldRef<"Recipe", 'String'>
    readonly cuisine: FieldRef<"Recipe", 'String'>
    readonly category: FieldRef<"Recipe", 'String'>
    readonly images: FieldRef<"Recipe", 'String[]'>
    readonly mainImage: FieldRef<"Recipe", 'String'>
    readonly aiTags: FieldRef<"Recipe", 'String[]'>
    readonly userTags: FieldRef<"Recipe", 'String[]'>
    readonly allTags: FieldRef<"Recipe", 'String[]'>
    readonly pairings: FieldRef<"Recipe", 'Json'>
    readonly nutrition: FieldRef<"Recipe", 'Json'>
    readonly likesCount: FieldRef<"Recipe", 'Int'>
    readonly savesCount: FieldRef<"Recipe", 'Int'>
    readonly madeCount: FieldRef<"Recipe", 'Int'>
    readonly viewsCount: FieldRef<"Recipe", 'Int'>
    readonly avgRating: FieldRef<"Recipe", 'Float'>
    readonly reviewsCount: FieldRef<"Recipe", 'Int'>
    readonly createdAt: FieldRef<"Recipe", 'DateTime'>
    readonly updatedAt: FieldRef<"Recipe", 'DateTime'>
    readonly publishedAt: FieldRef<"Recipe", 'DateTime'>
    readonly isPublished: FieldRef<"Recipe", 'Boolean'>
    readonly authorId: FieldRef<"Recipe", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Recipe findUnique
   */
  export type RecipeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipe to fetch.
     */
    where: RecipeWhereUniqueInput
  }

  /**
   * Recipe findUniqueOrThrow
   */
  export type RecipeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipe to fetch.
     */
    where: RecipeWhereUniqueInput
  }

  /**
   * Recipe findFirst
   */
  export type RecipeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipe to fetch.
     */
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recipes.
     */
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recipes.
     */
    distinct?: RecipeScalarFieldEnum | RecipeScalarFieldEnum[]
  }

  /**
   * Recipe findFirstOrThrow
   */
  export type RecipeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipe to fetch.
     */
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recipes.
     */
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recipes.
     */
    distinct?: RecipeScalarFieldEnum | RecipeScalarFieldEnum[]
  }

  /**
   * Recipe findMany
   */
  export type RecipeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipes to fetch.
     */
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recipes.
     */
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    distinct?: RecipeScalarFieldEnum | RecipeScalarFieldEnum[]
  }

  /**
   * Recipe create
   */
  export type RecipeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * The data needed to create a Recipe.
     */
    data: XOR<RecipeCreateInput, RecipeUncheckedCreateInput>
  }

  /**
   * Recipe createMany
   */
  export type RecipeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Recipes.
     */
    data: RecipeCreateManyInput | RecipeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Recipe createManyAndReturn
   */
  export type RecipeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * The data used to create many Recipes.
     */
    data: RecipeCreateManyInput | RecipeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Recipe update
   */
  export type RecipeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * The data needed to update a Recipe.
     */
    data: XOR<RecipeUpdateInput, RecipeUncheckedUpdateInput>
    /**
     * Choose, which Recipe to update.
     */
    where: RecipeWhereUniqueInput
  }

  /**
   * Recipe updateMany
   */
  export type RecipeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Recipes.
     */
    data: XOR<RecipeUpdateManyMutationInput, RecipeUncheckedUpdateManyInput>
    /**
     * Filter which Recipes to update
     */
    where?: RecipeWhereInput
    /**
     * Limit how many Recipes to update.
     */
    limit?: number
  }

  /**
   * Recipe updateManyAndReturn
   */
  export type RecipeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * The data used to update Recipes.
     */
    data: XOR<RecipeUpdateManyMutationInput, RecipeUncheckedUpdateManyInput>
    /**
     * Filter which Recipes to update
     */
    where?: RecipeWhereInput
    /**
     * Limit how many Recipes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Recipe upsert
   */
  export type RecipeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * The filter to search for the Recipe to update in case it exists.
     */
    where: RecipeWhereUniqueInput
    /**
     * In case the Recipe found by the `where` argument doesn't exist, create a new Recipe with this data.
     */
    create: XOR<RecipeCreateInput, RecipeUncheckedCreateInput>
    /**
     * In case the Recipe was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecipeUpdateInput, RecipeUncheckedUpdateInput>
  }

  /**
   * Recipe delete
   */
  export type RecipeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter which Recipe to delete.
     */
    where: RecipeWhereUniqueInput
  }

  /**
   * Recipe deleteMany
   */
  export type RecipeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recipes to delete
     */
    where?: RecipeWhereInput
    /**
     * Limit how many Recipes to delete.
     */
    limit?: number
  }

  /**
   * Recipe.ingredients
   */
  export type Recipe$ingredientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeIngredient
     */
    omit?: RecipeIngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    where?: RecipeIngredientWhereInput
    orderBy?: RecipeIngredientOrderByWithRelationInput | RecipeIngredientOrderByWithRelationInput[]
    cursor?: RecipeIngredientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecipeIngredientScalarFieldEnum | RecipeIngredientScalarFieldEnum[]
  }

  /**
   * Recipe.likes
   */
  export type Recipe$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeLike
     */
    select?: RecipeLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeLike
     */
    omit?: RecipeLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeLikeInclude<ExtArgs> | null
    where?: RecipeLikeWhereInput
    orderBy?: RecipeLikeOrderByWithRelationInput | RecipeLikeOrderByWithRelationInput[]
    cursor?: RecipeLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecipeLikeScalarFieldEnum | RecipeLikeScalarFieldEnum[]
  }

  /**
   * Recipe.saves
   */
  export type Recipe$savesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedRecipe
     */
    select?: SavedRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedRecipe
     */
    omit?: SavedRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedRecipeInclude<ExtArgs> | null
    where?: SavedRecipeWhereInput
    orderBy?: SavedRecipeOrderByWithRelationInput | SavedRecipeOrderByWithRelationInput[]
    cursor?: SavedRecipeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SavedRecipeScalarFieldEnum | SavedRecipeScalarFieldEnum[]
  }

  /**
   * Recipe.reviews
   */
  export type Recipe$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeReview
     */
    select?: RecipeReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeReview
     */
    omit?: RecipeReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeReviewInclude<ExtArgs> | null
    where?: RecipeReviewWhereInput
    orderBy?: RecipeReviewOrderByWithRelationInput | RecipeReviewOrderByWithRelationInput[]
    cursor?: RecipeReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecipeReviewScalarFieldEnum | RecipeReviewScalarFieldEnum[]
  }

  /**
   * Recipe.madeRecipes
   */
  export type Recipe$madeRecipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MadeRecipe
     */
    select?: MadeRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MadeRecipe
     */
    omit?: MadeRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MadeRecipeInclude<ExtArgs> | null
    where?: MadeRecipeWhereInput
    orderBy?: MadeRecipeOrderByWithRelationInput | MadeRecipeOrderByWithRelationInput[]
    cursor?: MadeRecipeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MadeRecipeScalarFieldEnum | MadeRecipeScalarFieldEnum[]
  }

  /**
   * Recipe.mealPlanItems
   */
  export type Recipe$mealPlanItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlanItem
     */
    select?: MealPlanItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealPlanItem
     */
    omit?: MealPlanItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanItemInclude<ExtArgs> | null
    where?: MealPlanItemWhereInput
    orderBy?: MealPlanItemOrderByWithRelationInput | MealPlanItemOrderByWithRelationInput[]
    cursor?: MealPlanItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MealPlanItemScalarFieldEnum | MealPlanItemScalarFieldEnum[]
  }

  /**
   * Recipe.foodImages
   */
  export type Recipe$foodImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodImage
     */
    select?: FoodImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodImage
     */
    omit?: FoodImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodImageInclude<ExtArgs> | null
    where?: FoodImageWhereInput
    orderBy?: FoodImageOrderByWithRelationInput | FoodImageOrderByWithRelationInput[]
    cursor?: FoodImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FoodImageScalarFieldEnum | FoodImageScalarFieldEnum[]
  }

  /**
   * Recipe without action
   */
  export type RecipeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
  }


  /**
   * Model Ingredient
   */

  export type AggregateIngredient = {
    _count: IngredientCountAggregateOutputType | null
    _min: IngredientMinAggregateOutputType | null
    _max: IngredientMaxAggregateOutputType | null
  }

  export type IngredientMinAggregateOutputType = {
    id: string | null
    name: string | null
    category: string | null
    commonUnit: string | null
    createdAt: Date | null
  }

  export type IngredientMaxAggregateOutputType = {
    id: string | null
    name: string | null
    category: string | null
    commonUnit: string | null
    createdAt: Date | null
  }

  export type IngredientCountAggregateOutputType = {
    id: number
    name: number
    category: number
    commonUnit: number
    nutritionPer100g: number
    aliases: number
    createdAt: number
    _all: number
  }


  export type IngredientMinAggregateInputType = {
    id?: true
    name?: true
    category?: true
    commonUnit?: true
    createdAt?: true
  }

  export type IngredientMaxAggregateInputType = {
    id?: true
    name?: true
    category?: true
    commonUnit?: true
    createdAt?: true
  }

  export type IngredientCountAggregateInputType = {
    id?: true
    name?: true
    category?: true
    commonUnit?: true
    nutritionPer100g?: true
    aliases?: true
    createdAt?: true
    _all?: true
  }

  export type IngredientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ingredient to aggregate.
     */
    where?: IngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     */
    orderBy?: IngredientOrderByWithRelationInput | IngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ingredients
    **/
    _count?: true | IngredientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IngredientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IngredientMaxAggregateInputType
  }

  export type GetIngredientAggregateType<T extends IngredientAggregateArgs> = {
        [P in keyof T & keyof AggregateIngredient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIngredient[P]>
      : GetScalarType<T[P], AggregateIngredient[P]>
  }




  export type IngredientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IngredientWhereInput
    orderBy?: IngredientOrderByWithAggregationInput | IngredientOrderByWithAggregationInput[]
    by: IngredientScalarFieldEnum[] | IngredientScalarFieldEnum
    having?: IngredientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IngredientCountAggregateInputType | true
    _min?: IngredientMinAggregateInputType
    _max?: IngredientMaxAggregateInputType
  }

  export type IngredientGroupByOutputType = {
    id: string
    name: string
    category: string | null
    commonUnit: string | null
    nutritionPer100g: JsonValue | null
    aliases: string[]
    createdAt: Date
    _count: IngredientCountAggregateOutputType | null
    _min: IngredientMinAggregateOutputType | null
    _max: IngredientMaxAggregateOutputType | null
  }

  type GetIngredientGroupByPayload<T extends IngredientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IngredientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IngredientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IngredientGroupByOutputType[P]>
            : GetScalarType<T[P], IngredientGroupByOutputType[P]>
        }
      >
    >


  export type IngredientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    commonUnit?: boolean
    nutritionPer100g?: boolean
    aliases?: boolean
    createdAt?: boolean
    recipeIngredients?: boolean | Ingredient$recipeIngredientsArgs<ExtArgs>
    _count?: boolean | IngredientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ingredient"]>

  export type IngredientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    commonUnit?: boolean
    nutritionPer100g?: boolean
    aliases?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["ingredient"]>

  export type IngredientSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    commonUnit?: boolean
    nutritionPer100g?: boolean
    aliases?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["ingredient"]>

  export type IngredientSelectScalar = {
    id?: boolean
    name?: boolean
    category?: boolean
    commonUnit?: boolean
    nutritionPer100g?: boolean
    aliases?: boolean
    createdAt?: boolean
  }

  export type IngredientOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "category" | "commonUnit" | "nutritionPer100g" | "aliases" | "createdAt", ExtArgs["result"]["ingredient"]>
  export type IngredientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipeIngredients?: boolean | Ingredient$recipeIngredientsArgs<ExtArgs>
    _count?: boolean | IngredientCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type IngredientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type IngredientIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $IngredientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ingredient"
    objects: {
      recipeIngredients: Prisma.$RecipeIngredientPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      category: string | null
      commonUnit: string | null
      nutritionPer100g: Prisma.JsonValue | null
      aliases: string[]
      createdAt: Date
    }, ExtArgs["result"]["ingredient"]>
    composites: {}
  }

  type IngredientGetPayload<S extends boolean | null | undefined | IngredientDefaultArgs> = $Result.GetResult<Prisma.$IngredientPayload, S>

  type IngredientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<IngredientFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: IngredientCountAggregateInputType | true
    }

  export interface IngredientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ingredient'], meta: { name: 'Ingredient' } }
    /**
     * Find zero or one Ingredient that matches the filter.
     * @param {IngredientFindUniqueArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IngredientFindUniqueArgs>(args: SelectSubset<T, IngredientFindUniqueArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Ingredient that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {IngredientFindUniqueOrThrowArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IngredientFindUniqueOrThrowArgs>(args: SelectSubset<T, IngredientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ingredient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientFindFirstArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IngredientFindFirstArgs>(args?: SelectSubset<T, IngredientFindFirstArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ingredient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientFindFirstOrThrowArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IngredientFindFirstOrThrowArgs>(args?: SelectSubset<T, IngredientFindFirstOrThrowArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ingredients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ingredients
     * const ingredients = await prisma.ingredient.findMany()
     * 
     * // Get first 10 Ingredients
     * const ingredients = await prisma.ingredient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ingredientWithIdOnly = await prisma.ingredient.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IngredientFindManyArgs>(args?: SelectSubset<T, IngredientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Ingredient.
     * @param {IngredientCreateArgs} args - Arguments to create a Ingredient.
     * @example
     * // Create one Ingredient
     * const Ingredient = await prisma.ingredient.create({
     *   data: {
     *     // ... data to create a Ingredient
     *   }
     * })
     * 
     */
    create<T extends IngredientCreateArgs>(args: SelectSubset<T, IngredientCreateArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ingredients.
     * @param {IngredientCreateManyArgs} args - Arguments to create many Ingredients.
     * @example
     * // Create many Ingredients
     * const ingredient = await prisma.ingredient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IngredientCreateManyArgs>(args?: SelectSubset<T, IngredientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ingredients and returns the data saved in the database.
     * @param {IngredientCreateManyAndReturnArgs} args - Arguments to create many Ingredients.
     * @example
     * // Create many Ingredients
     * const ingredient = await prisma.ingredient.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ingredients and only return the `id`
     * const ingredientWithIdOnly = await prisma.ingredient.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IngredientCreateManyAndReturnArgs>(args?: SelectSubset<T, IngredientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Ingredient.
     * @param {IngredientDeleteArgs} args - Arguments to delete one Ingredient.
     * @example
     * // Delete one Ingredient
     * const Ingredient = await prisma.ingredient.delete({
     *   where: {
     *     // ... filter to delete one Ingredient
     *   }
     * })
     * 
     */
    delete<T extends IngredientDeleteArgs>(args: SelectSubset<T, IngredientDeleteArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Ingredient.
     * @param {IngredientUpdateArgs} args - Arguments to update one Ingredient.
     * @example
     * // Update one Ingredient
     * const ingredient = await prisma.ingredient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IngredientUpdateArgs>(args: SelectSubset<T, IngredientUpdateArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ingredients.
     * @param {IngredientDeleteManyArgs} args - Arguments to filter Ingredients to delete.
     * @example
     * // Delete a few Ingredients
     * const { count } = await prisma.ingredient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IngredientDeleteManyArgs>(args?: SelectSubset<T, IngredientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ingredients
     * const ingredient = await prisma.ingredient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IngredientUpdateManyArgs>(args: SelectSubset<T, IngredientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ingredients and returns the data updated in the database.
     * @param {IngredientUpdateManyAndReturnArgs} args - Arguments to update many Ingredients.
     * @example
     * // Update many Ingredients
     * const ingredient = await prisma.ingredient.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Ingredients and only return the `id`
     * const ingredientWithIdOnly = await prisma.ingredient.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends IngredientUpdateManyAndReturnArgs>(args: SelectSubset<T, IngredientUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Ingredient.
     * @param {IngredientUpsertArgs} args - Arguments to update or create a Ingredient.
     * @example
     * // Update or create a Ingredient
     * const ingredient = await prisma.ingredient.upsert({
     *   create: {
     *     // ... data to create a Ingredient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ingredient we want to update
     *   }
     * })
     */
    upsert<T extends IngredientUpsertArgs>(args: SelectSubset<T, IngredientUpsertArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientCountArgs} args - Arguments to filter Ingredients to count.
     * @example
     * // Count the number of Ingredients
     * const count = await prisma.ingredient.count({
     *   where: {
     *     // ... the filter for the Ingredients we want to count
     *   }
     * })
    **/
    count<T extends IngredientCountArgs>(
      args?: Subset<T, IngredientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IngredientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ingredient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IngredientAggregateArgs>(args: Subset<T, IngredientAggregateArgs>): Prisma.PrismaPromise<GetIngredientAggregateType<T>>

    /**
     * Group by Ingredient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IngredientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IngredientGroupByArgs['orderBy'] }
        : { orderBy?: IngredientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IngredientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIngredientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ingredient model
   */
  readonly fields: IngredientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ingredient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IngredientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    recipeIngredients<T extends Ingredient$recipeIngredientsArgs<ExtArgs> = {}>(args?: Subset<T, Ingredient$recipeIngredientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ingredient model
   */
  interface IngredientFieldRefs {
    readonly id: FieldRef<"Ingredient", 'String'>
    readonly name: FieldRef<"Ingredient", 'String'>
    readonly category: FieldRef<"Ingredient", 'String'>
    readonly commonUnit: FieldRef<"Ingredient", 'String'>
    readonly nutritionPer100g: FieldRef<"Ingredient", 'Json'>
    readonly aliases: FieldRef<"Ingredient", 'String[]'>
    readonly createdAt: FieldRef<"Ingredient", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Ingredient findUnique
   */
  export type IngredientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingredient
     */
    omit?: IngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * Filter, which Ingredient to fetch.
     */
    where: IngredientWhereUniqueInput
  }

  /**
   * Ingredient findUniqueOrThrow
   */
  export type IngredientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingredient
     */
    omit?: IngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * Filter, which Ingredient to fetch.
     */
    where: IngredientWhereUniqueInput
  }

  /**
   * Ingredient findFirst
   */
  export type IngredientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingredient
     */
    omit?: IngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * Filter, which Ingredient to fetch.
     */
    where?: IngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     */
    orderBy?: IngredientOrderByWithRelationInput | IngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ingredients.
     */
    cursor?: IngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ingredients.
     */
    distinct?: IngredientScalarFieldEnum | IngredientScalarFieldEnum[]
  }

  /**
   * Ingredient findFirstOrThrow
   */
  export type IngredientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingredient
     */
    omit?: IngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * Filter, which Ingredient to fetch.
     */
    where?: IngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     */
    orderBy?: IngredientOrderByWithRelationInput | IngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ingredients.
     */
    cursor?: IngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ingredients.
     */
    distinct?: IngredientScalarFieldEnum | IngredientScalarFieldEnum[]
  }

  /**
   * Ingredient findMany
   */
  export type IngredientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingredient
     */
    omit?: IngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * Filter, which Ingredients to fetch.
     */
    where?: IngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     */
    orderBy?: IngredientOrderByWithRelationInput | IngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ingredients.
     */
    cursor?: IngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     */
    skip?: number
    distinct?: IngredientScalarFieldEnum | IngredientScalarFieldEnum[]
  }

  /**
   * Ingredient create
   */
  export type IngredientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingredient
     */
    omit?: IngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * The data needed to create a Ingredient.
     */
    data: XOR<IngredientCreateInput, IngredientUncheckedCreateInput>
  }

  /**
   * Ingredient createMany
   */
  export type IngredientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ingredients.
     */
    data: IngredientCreateManyInput | IngredientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ingredient createManyAndReturn
   */
  export type IngredientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ingredient
     */
    omit?: IngredientOmit<ExtArgs> | null
    /**
     * The data used to create many Ingredients.
     */
    data: IngredientCreateManyInput | IngredientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ingredient update
   */
  export type IngredientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingredient
     */
    omit?: IngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * The data needed to update a Ingredient.
     */
    data: XOR<IngredientUpdateInput, IngredientUncheckedUpdateInput>
    /**
     * Choose, which Ingredient to update.
     */
    where: IngredientWhereUniqueInput
  }

  /**
   * Ingredient updateMany
   */
  export type IngredientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ingredients.
     */
    data: XOR<IngredientUpdateManyMutationInput, IngredientUncheckedUpdateManyInput>
    /**
     * Filter which Ingredients to update
     */
    where?: IngredientWhereInput
    /**
     * Limit how many Ingredients to update.
     */
    limit?: number
  }

  /**
   * Ingredient updateManyAndReturn
   */
  export type IngredientUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ingredient
     */
    omit?: IngredientOmit<ExtArgs> | null
    /**
     * The data used to update Ingredients.
     */
    data: XOR<IngredientUpdateManyMutationInput, IngredientUncheckedUpdateManyInput>
    /**
     * Filter which Ingredients to update
     */
    where?: IngredientWhereInput
    /**
     * Limit how many Ingredients to update.
     */
    limit?: number
  }

  /**
   * Ingredient upsert
   */
  export type IngredientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingredient
     */
    omit?: IngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * The filter to search for the Ingredient to update in case it exists.
     */
    where: IngredientWhereUniqueInput
    /**
     * In case the Ingredient found by the `where` argument doesn't exist, create a new Ingredient with this data.
     */
    create: XOR<IngredientCreateInput, IngredientUncheckedCreateInput>
    /**
     * In case the Ingredient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IngredientUpdateInput, IngredientUncheckedUpdateInput>
  }

  /**
   * Ingredient delete
   */
  export type IngredientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingredient
     */
    omit?: IngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * Filter which Ingredient to delete.
     */
    where: IngredientWhereUniqueInput
  }

  /**
   * Ingredient deleteMany
   */
  export type IngredientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ingredients to delete
     */
    where?: IngredientWhereInput
    /**
     * Limit how many Ingredients to delete.
     */
    limit?: number
  }

  /**
   * Ingredient.recipeIngredients
   */
  export type Ingredient$recipeIngredientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeIngredient
     */
    omit?: RecipeIngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    where?: RecipeIngredientWhereInput
    orderBy?: RecipeIngredientOrderByWithRelationInput | RecipeIngredientOrderByWithRelationInput[]
    cursor?: RecipeIngredientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecipeIngredientScalarFieldEnum | RecipeIngredientScalarFieldEnum[]
  }

  /**
   * Ingredient without action
   */
  export type IngredientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingredient
     */
    omit?: IngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
  }


  /**
   * Model RecipeIngredient
   */

  export type AggregateRecipeIngredient = {
    _count: RecipeIngredientCountAggregateOutputType | null
    _avg: RecipeIngredientAvgAggregateOutputType | null
    _sum: RecipeIngredientSumAggregateOutputType | null
    _min: RecipeIngredientMinAggregateOutputType | null
    _max: RecipeIngredientMaxAggregateOutputType | null
  }

  export type RecipeIngredientAvgAggregateOutputType = {
    amount: number | null
  }

  export type RecipeIngredientSumAggregateOutputType = {
    amount: number | null
  }

  export type RecipeIngredientMinAggregateOutputType = {
    id: string | null
    recipeId: string | null
    ingredientId: string | null
    amount: number | null
    unit: string | null
    preparation: string | null
    optional: boolean | null
  }

  export type RecipeIngredientMaxAggregateOutputType = {
    id: string | null
    recipeId: string | null
    ingredientId: string | null
    amount: number | null
    unit: string | null
    preparation: string | null
    optional: boolean | null
  }

  export type RecipeIngredientCountAggregateOutputType = {
    id: number
    recipeId: number
    ingredientId: number
    amount: number
    unit: number
    preparation: number
    optional: number
    _all: number
  }


  export type RecipeIngredientAvgAggregateInputType = {
    amount?: true
  }

  export type RecipeIngredientSumAggregateInputType = {
    amount?: true
  }

  export type RecipeIngredientMinAggregateInputType = {
    id?: true
    recipeId?: true
    ingredientId?: true
    amount?: true
    unit?: true
    preparation?: true
    optional?: true
  }

  export type RecipeIngredientMaxAggregateInputType = {
    id?: true
    recipeId?: true
    ingredientId?: true
    amount?: true
    unit?: true
    preparation?: true
    optional?: true
  }

  export type RecipeIngredientCountAggregateInputType = {
    id?: true
    recipeId?: true
    ingredientId?: true
    amount?: true
    unit?: true
    preparation?: true
    optional?: true
    _all?: true
  }

  export type RecipeIngredientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RecipeIngredient to aggregate.
     */
    where?: RecipeIngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeIngredients to fetch.
     */
    orderBy?: RecipeIngredientOrderByWithRelationInput | RecipeIngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecipeIngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeIngredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeIngredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RecipeIngredients
    **/
    _count?: true | RecipeIngredientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecipeIngredientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecipeIngredientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecipeIngredientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecipeIngredientMaxAggregateInputType
  }

  export type GetRecipeIngredientAggregateType<T extends RecipeIngredientAggregateArgs> = {
        [P in keyof T & keyof AggregateRecipeIngredient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecipeIngredient[P]>
      : GetScalarType<T[P], AggregateRecipeIngredient[P]>
  }




  export type RecipeIngredientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeIngredientWhereInput
    orderBy?: RecipeIngredientOrderByWithAggregationInput | RecipeIngredientOrderByWithAggregationInput[]
    by: RecipeIngredientScalarFieldEnum[] | RecipeIngredientScalarFieldEnum
    having?: RecipeIngredientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecipeIngredientCountAggregateInputType | true
    _avg?: RecipeIngredientAvgAggregateInputType
    _sum?: RecipeIngredientSumAggregateInputType
    _min?: RecipeIngredientMinAggregateInputType
    _max?: RecipeIngredientMaxAggregateInputType
  }

  export type RecipeIngredientGroupByOutputType = {
    id: string
    recipeId: string
    ingredientId: string
    amount: number | null
    unit: string | null
    preparation: string | null
    optional: boolean
    _count: RecipeIngredientCountAggregateOutputType | null
    _avg: RecipeIngredientAvgAggregateOutputType | null
    _sum: RecipeIngredientSumAggregateOutputType | null
    _min: RecipeIngredientMinAggregateOutputType | null
    _max: RecipeIngredientMaxAggregateOutputType | null
  }

  type GetRecipeIngredientGroupByPayload<T extends RecipeIngredientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecipeIngredientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecipeIngredientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecipeIngredientGroupByOutputType[P]>
            : GetScalarType<T[P], RecipeIngredientGroupByOutputType[P]>
        }
      >
    >


  export type RecipeIngredientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipeId?: boolean
    ingredientId?: boolean
    amount?: boolean
    unit?: boolean
    preparation?: boolean
    optional?: boolean
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    ingredient?: boolean | IngredientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recipeIngredient"]>

  export type RecipeIngredientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipeId?: boolean
    ingredientId?: boolean
    amount?: boolean
    unit?: boolean
    preparation?: boolean
    optional?: boolean
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    ingredient?: boolean | IngredientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recipeIngredient"]>

  export type RecipeIngredientSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipeId?: boolean
    ingredientId?: boolean
    amount?: boolean
    unit?: boolean
    preparation?: boolean
    optional?: boolean
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    ingredient?: boolean | IngredientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recipeIngredient"]>

  export type RecipeIngredientSelectScalar = {
    id?: boolean
    recipeId?: boolean
    ingredientId?: boolean
    amount?: boolean
    unit?: boolean
    preparation?: boolean
    optional?: boolean
  }

  export type RecipeIngredientOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "recipeId" | "ingredientId" | "amount" | "unit" | "preparation" | "optional", ExtArgs["result"]["recipeIngredient"]>
  export type RecipeIngredientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    ingredient?: boolean | IngredientDefaultArgs<ExtArgs>
  }
  export type RecipeIngredientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    ingredient?: boolean | IngredientDefaultArgs<ExtArgs>
  }
  export type RecipeIngredientIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    ingredient?: boolean | IngredientDefaultArgs<ExtArgs>
  }

  export type $RecipeIngredientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RecipeIngredient"
    objects: {
      recipe: Prisma.$RecipePayload<ExtArgs>
      ingredient: Prisma.$IngredientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      recipeId: string
      ingredientId: string
      amount: number | null
      unit: string | null
      preparation: string | null
      optional: boolean
    }, ExtArgs["result"]["recipeIngredient"]>
    composites: {}
  }

  type RecipeIngredientGetPayload<S extends boolean | null | undefined | RecipeIngredientDefaultArgs> = $Result.GetResult<Prisma.$RecipeIngredientPayload, S>

  type RecipeIngredientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RecipeIngredientFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RecipeIngredientCountAggregateInputType | true
    }

  export interface RecipeIngredientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RecipeIngredient'], meta: { name: 'RecipeIngredient' } }
    /**
     * Find zero or one RecipeIngredient that matches the filter.
     * @param {RecipeIngredientFindUniqueArgs} args - Arguments to find a RecipeIngredient
     * @example
     * // Get one RecipeIngredient
     * const recipeIngredient = await prisma.recipeIngredient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecipeIngredientFindUniqueArgs>(args: SelectSubset<T, RecipeIngredientFindUniqueArgs<ExtArgs>>): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RecipeIngredient that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RecipeIngredientFindUniqueOrThrowArgs} args - Arguments to find a RecipeIngredient
     * @example
     * // Get one RecipeIngredient
     * const recipeIngredient = await prisma.recipeIngredient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecipeIngredientFindUniqueOrThrowArgs>(args: SelectSubset<T, RecipeIngredientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RecipeIngredient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeIngredientFindFirstArgs} args - Arguments to find a RecipeIngredient
     * @example
     * // Get one RecipeIngredient
     * const recipeIngredient = await prisma.recipeIngredient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecipeIngredientFindFirstArgs>(args?: SelectSubset<T, RecipeIngredientFindFirstArgs<ExtArgs>>): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RecipeIngredient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeIngredientFindFirstOrThrowArgs} args - Arguments to find a RecipeIngredient
     * @example
     * // Get one RecipeIngredient
     * const recipeIngredient = await prisma.recipeIngredient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecipeIngredientFindFirstOrThrowArgs>(args?: SelectSubset<T, RecipeIngredientFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RecipeIngredients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeIngredientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RecipeIngredients
     * const recipeIngredients = await prisma.recipeIngredient.findMany()
     * 
     * // Get first 10 RecipeIngredients
     * const recipeIngredients = await prisma.recipeIngredient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recipeIngredientWithIdOnly = await prisma.recipeIngredient.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RecipeIngredientFindManyArgs>(args?: SelectSubset<T, RecipeIngredientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RecipeIngredient.
     * @param {RecipeIngredientCreateArgs} args - Arguments to create a RecipeIngredient.
     * @example
     * // Create one RecipeIngredient
     * const RecipeIngredient = await prisma.recipeIngredient.create({
     *   data: {
     *     // ... data to create a RecipeIngredient
     *   }
     * })
     * 
     */
    create<T extends RecipeIngredientCreateArgs>(args: SelectSubset<T, RecipeIngredientCreateArgs<ExtArgs>>): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RecipeIngredients.
     * @param {RecipeIngredientCreateManyArgs} args - Arguments to create many RecipeIngredients.
     * @example
     * // Create many RecipeIngredients
     * const recipeIngredient = await prisma.recipeIngredient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecipeIngredientCreateManyArgs>(args?: SelectSubset<T, RecipeIngredientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RecipeIngredients and returns the data saved in the database.
     * @param {RecipeIngredientCreateManyAndReturnArgs} args - Arguments to create many RecipeIngredients.
     * @example
     * // Create many RecipeIngredients
     * const recipeIngredient = await prisma.recipeIngredient.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RecipeIngredients and only return the `id`
     * const recipeIngredientWithIdOnly = await prisma.recipeIngredient.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RecipeIngredientCreateManyAndReturnArgs>(args?: SelectSubset<T, RecipeIngredientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RecipeIngredient.
     * @param {RecipeIngredientDeleteArgs} args - Arguments to delete one RecipeIngredient.
     * @example
     * // Delete one RecipeIngredient
     * const RecipeIngredient = await prisma.recipeIngredient.delete({
     *   where: {
     *     // ... filter to delete one RecipeIngredient
     *   }
     * })
     * 
     */
    delete<T extends RecipeIngredientDeleteArgs>(args: SelectSubset<T, RecipeIngredientDeleteArgs<ExtArgs>>): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RecipeIngredient.
     * @param {RecipeIngredientUpdateArgs} args - Arguments to update one RecipeIngredient.
     * @example
     * // Update one RecipeIngredient
     * const recipeIngredient = await prisma.recipeIngredient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecipeIngredientUpdateArgs>(args: SelectSubset<T, RecipeIngredientUpdateArgs<ExtArgs>>): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RecipeIngredients.
     * @param {RecipeIngredientDeleteManyArgs} args - Arguments to filter RecipeIngredients to delete.
     * @example
     * // Delete a few RecipeIngredients
     * const { count } = await prisma.recipeIngredient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecipeIngredientDeleteManyArgs>(args?: SelectSubset<T, RecipeIngredientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RecipeIngredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeIngredientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RecipeIngredients
     * const recipeIngredient = await prisma.recipeIngredient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecipeIngredientUpdateManyArgs>(args: SelectSubset<T, RecipeIngredientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RecipeIngredients and returns the data updated in the database.
     * @param {RecipeIngredientUpdateManyAndReturnArgs} args - Arguments to update many RecipeIngredients.
     * @example
     * // Update many RecipeIngredients
     * const recipeIngredient = await prisma.recipeIngredient.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RecipeIngredients and only return the `id`
     * const recipeIngredientWithIdOnly = await prisma.recipeIngredient.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RecipeIngredientUpdateManyAndReturnArgs>(args: SelectSubset<T, RecipeIngredientUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RecipeIngredient.
     * @param {RecipeIngredientUpsertArgs} args - Arguments to update or create a RecipeIngredient.
     * @example
     * // Update or create a RecipeIngredient
     * const recipeIngredient = await prisma.recipeIngredient.upsert({
     *   create: {
     *     // ... data to create a RecipeIngredient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RecipeIngredient we want to update
     *   }
     * })
     */
    upsert<T extends RecipeIngredientUpsertArgs>(args: SelectSubset<T, RecipeIngredientUpsertArgs<ExtArgs>>): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RecipeIngredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeIngredientCountArgs} args - Arguments to filter RecipeIngredients to count.
     * @example
     * // Count the number of RecipeIngredients
     * const count = await prisma.recipeIngredient.count({
     *   where: {
     *     // ... the filter for the RecipeIngredients we want to count
     *   }
     * })
    **/
    count<T extends RecipeIngredientCountArgs>(
      args?: Subset<T, RecipeIngredientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecipeIngredientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RecipeIngredient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeIngredientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecipeIngredientAggregateArgs>(args: Subset<T, RecipeIngredientAggregateArgs>): Prisma.PrismaPromise<GetRecipeIngredientAggregateType<T>>

    /**
     * Group by RecipeIngredient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeIngredientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecipeIngredientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecipeIngredientGroupByArgs['orderBy'] }
        : { orderBy?: RecipeIngredientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecipeIngredientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecipeIngredientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RecipeIngredient model
   */
  readonly fields: RecipeIngredientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RecipeIngredient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecipeIngredientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    recipe<T extends RecipeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RecipeDefaultArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    ingredient<T extends IngredientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, IngredientDefaultArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RecipeIngredient model
   */
  interface RecipeIngredientFieldRefs {
    readonly id: FieldRef<"RecipeIngredient", 'String'>
    readonly recipeId: FieldRef<"RecipeIngredient", 'String'>
    readonly ingredientId: FieldRef<"RecipeIngredient", 'String'>
    readonly amount: FieldRef<"RecipeIngredient", 'Float'>
    readonly unit: FieldRef<"RecipeIngredient", 'String'>
    readonly preparation: FieldRef<"RecipeIngredient", 'String'>
    readonly optional: FieldRef<"RecipeIngredient", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * RecipeIngredient findUnique
   */
  export type RecipeIngredientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeIngredient
     */
    omit?: RecipeIngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * Filter, which RecipeIngredient to fetch.
     */
    where: RecipeIngredientWhereUniqueInput
  }

  /**
   * RecipeIngredient findUniqueOrThrow
   */
  export type RecipeIngredientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeIngredient
     */
    omit?: RecipeIngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * Filter, which RecipeIngredient to fetch.
     */
    where: RecipeIngredientWhereUniqueInput
  }

  /**
   * RecipeIngredient findFirst
   */
  export type RecipeIngredientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeIngredient
     */
    omit?: RecipeIngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * Filter, which RecipeIngredient to fetch.
     */
    where?: RecipeIngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeIngredients to fetch.
     */
    orderBy?: RecipeIngredientOrderByWithRelationInput | RecipeIngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RecipeIngredients.
     */
    cursor?: RecipeIngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeIngredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeIngredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RecipeIngredients.
     */
    distinct?: RecipeIngredientScalarFieldEnum | RecipeIngredientScalarFieldEnum[]
  }

  /**
   * RecipeIngredient findFirstOrThrow
   */
  export type RecipeIngredientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeIngredient
     */
    omit?: RecipeIngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * Filter, which RecipeIngredient to fetch.
     */
    where?: RecipeIngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeIngredients to fetch.
     */
    orderBy?: RecipeIngredientOrderByWithRelationInput | RecipeIngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RecipeIngredients.
     */
    cursor?: RecipeIngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeIngredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeIngredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RecipeIngredients.
     */
    distinct?: RecipeIngredientScalarFieldEnum | RecipeIngredientScalarFieldEnum[]
  }

  /**
   * RecipeIngredient findMany
   */
  export type RecipeIngredientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeIngredient
     */
    omit?: RecipeIngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * Filter, which RecipeIngredients to fetch.
     */
    where?: RecipeIngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeIngredients to fetch.
     */
    orderBy?: RecipeIngredientOrderByWithRelationInput | RecipeIngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RecipeIngredients.
     */
    cursor?: RecipeIngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeIngredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeIngredients.
     */
    skip?: number
    distinct?: RecipeIngredientScalarFieldEnum | RecipeIngredientScalarFieldEnum[]
  }

  /**
   * RecipeIngredient create
   */
  export type RecipeIngredientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeIngredient
     */
    omit?: RecipeIngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * The data needed to create a RecipeIngredient.
     */
    data: XOR<RecipeIngredientCreateInput, RecipeIngredientUncheckedCreateInput>
  }

  /**
   * RecipeIngredient createMany
   */
  export type RecipeIngredientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RecipeIngredients.
     */
    data: RecipeIngredientCreateManyInput | RecipeIngredientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RecipeIngredient createManyAndReturn
   */
  export type RecipeIngredientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeIngredient
     */
    omit?: RecipeIngredientOmit<ExtArgs> | null
    /**
     * The data used to create many RecipeIngredients.
     */
    data: RecipeIngredientCreateManyInput | RecipeIngredientCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RecipeIngredient update
   */
  export type RecipeIngredientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeIngredient
     */
    omit?: RecipeIngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * The data needed to update a RecipeIngredient.
     */
    data: XOR<RecipeIngredientUpdateInput, RecipeIngredientUncheckedUpdateInput>
    /**
     * Choose, which RecipeIngredient to update.
     */
    where: RecipeIngredientWhereUniqueInput
  }

  /**
   * RecipeIngredient updateMany
   */
  export type RecipeIngredientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RecipeIngredients.
     */
    data: XOR<RecipeIngredientUpdateManyMutationInput, RecipeIngredientUncheckedUpdateManyInput>
    /**
     * Filter which RecipeIngredients to update
     */
    where?: RecipeIngredientWhereInput
    /**
     * Limit how many RecipeIngredients to update.
     */
    limit?: number
  }

  /**
   * RecipeIngredient updateManyAndReturn
   */
  export type RecipeIngredientUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeIngredient
     */
    omit?: RecipeIngredientOmit<ExtArgs> | null
    /**
     * The data used to update RecipeIngredients.
     */
    data: XOR<RecipeIngredientUpdateManyMutationInput, RecipeIngredientUncheckedUpdateManyInput>
    /**
     * Filter which RecipeIngredients to update
     */
    where?: RecipeIngredientWhereInput
    /**
     * Limit how many RecipeIngredients to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RecipeIngredient upsert
   */
  export type RecipeIngredientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeIngredient
     */
    omit?: RecipeIngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * The filter to search for the RecipeIngredient to update in case it exists.
     */
    where: RecipeIngredientWhereUniqueInput
    /**
     * In case the RecipeIngredient found by the `where` argument doesn't exist, create a new RecipeIngredient with this data.
     */
    create: XOR<RecipeIngredientCreateInput, RecipeIngredientUncheckedCreateInput>
    /**
     * In case the RecipeIngredient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecipeIngredientUpdateInput, RecipeIngredientUncheckedUpdateInput>
  }

  /**
   * RecipeIngredient delete
   */
  export type RecipeIngredientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeIngredient
     */
    omit?: RecipeIngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * Filter which RecipeIngredient to delete.
     */
    where: RecipeIngredientWhereUniqueInput
  }

  /**
   * RecipeIngredient deleteMany
   */
  export type RecipeIngredientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RecipeIngredients to delete
     */
    where?: RecipeIngredientWhereInput
    /**
     * Limit how many RecipeIngredients to delete.
     */
    limit?: number
  }

  /**
   * RecipeIngredient without action
   */
  export type RecipeIngredientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeIngredient
     */
    omit?: RecipeIngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
  }


  /**
   * Model RecipeLike
   */

  export type AggregateRecipeLike = {
    _count: RecipeLikeCountAggregateOutputType | null
    _min: RecipeLikeMinAggregateOutputType | null
    _max: RecipeLikeMaxAggregateOutputType | null
  }

  export type RecipeLikeMinAggregateOutputType = {
    id: string | null
    recipeId: string | null
    userId: string | null
    likedAt: Date | null
  }

  export type RecipeLikeMaxAggregateOutputType = {
    id: string | null
    recipeId: string | null
    userId: string | null
    likedAt: Date | null
  }

  export type RecipeLikeCountAggregateOutputType = {
    id: number
    recipeId: number
    userId: number
    likedAt: number
    _all: number
  }


  export type RecipeLikeMinAggregateInputType = {
    id?: true
    recipeId?: true
    userId?: true
    likedAt?: true
  }

  export type RecipeLikeMaxAggregateInputType = {
    id?: true
    recipeId?: true
    userId?: true
    likedAt?: true
  }

  export type RecipeLikeCountAggregateInputType = {
    id?: true
    recipeId?: true
    userId?: true
    likedAt?: true
    _all?: true
  }

  export type RecipeLikeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RecipeLike to aggregate.
     */
    where?: RecipeLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeLikes to fetch.
     */
    orderBy?: RecipeLikeOrderByWithRelationInput | RecipeLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecipeLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RecipeLikes
    **/
    _count?: true | RecipeLikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecipeLikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecipeLikeMaxAggregateInputType
  }

  export type GetRecipeLikeAggregateType<T extends RecipeLikeAggregateArgs> = {
        [P in keyof T & keyof AggregateRecipeLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecipeLike[P]>
      : GetScalarType<T[P], AggregateRecipeLike[P]>
  }




  export type RecipeLikeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeLikeWhereInput
    orderBy?: RecipeLikeOrderByWithAggregationInput | RecipeLikeOrderByWithAggregationInput[]
    by: RecipeLikeScalarFieldEnum[] | RecipeLikeScalarFieldEnum
    having?: RecipeLikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecipeLikeCountAggregateInputType | true
    _min?: RecipeLikeMinAggregateInputType
    _max?: RecipeLikeMaxAggregateInputType
  }

  export type RecipeLikeGroupByOutputType = {
    id: string
    recipeId: string
    userId: string
    likedAt: Date
    _count: RecipeLikeCountAggregateOutputType | null
    _min: RecipeLikeMinAggregateOutputType | null
    _max: RecipeLikeMaxAggregateOutputType | null
  }

  type GetRecipeLikeGroupByPayload<T extends RecipeLikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecipeLikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecipeLikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecipeLikeGroupByOutputType[P]>
            : GetScalarType<T[P], RecipeLikeGroupByOutputType[P]>
        }
      >
    >


  export type RecipeLikeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipeId?: boolean
    userId?: boolean
    likedAt?: boolean
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recipeLike"]>

  export type RecipeLikeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipeId?: boolean
    userId?: boolean
    likedAt?: boolean
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recipeLike"]>

  export type RecipeLikeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipeId?: boolean
    userId?: boolean
    likedAt?: boolean
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recipeLike"]>

  export type RecipeLikeSelectScalar = {
    id?: boolean
    recipeId?: boolean
    userId?: boolean
    likedAt?: boolean
  }

  export type RecipeLikeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "recipeId" | "userId" | "likedAt", ExtArgs["result"]["recipeLike"]>
  export type RecipeLikeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RecipeLikeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RecipeLikeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RecipeLikePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RecipeLike"
    objects: {
      recipe: Prisma.$RecipePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      recipeId: string
      userId: string
      likedAt: Date
    }, ExtArgs["result"]["recipeLike"]>
    composites: {}
  }

  type RecipeLikeGetPayload<S extends boolean | null | undefined | RecipeLikeDefaultArgs> = $Result.GetResult<Prisma.$RecipeLikePayload, S>

  type RecipeLikeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RecipeLikeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RecipeLikeCountAggregateInputType | true
    }

  export interface RecipeLikeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RecipeLike'], meta: { name: 'RecipeLike' } }
    /**
     * Find zero or one RecipeLike that matches the filter.
     * @param {RecipeLikeFindUniqueArgs} args - Arguments to find a RecipeLike
     * @example
     * // Get one RecipeLike
     * const recipeLike = await prisma.recipeLike.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecipeLikeFindUniqueArgs>(args: SelectSubset<T, RecipeLikeFindUniqueArgs<ExtArgs>>): Prisma__RecipeLikeClient<$Result.GetResult<Prisma.$RecipeLikePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RecipeLike that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RecipeLikeFindUniqueOrThrowArgs} args - Arguments to find a RecipeLike
     * @example
     * // Get one RecipeLike
     * const recipeLike = await prisma.recipeLike.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecipeLikeFindUniqueOrThrowArgs>(args: SelectSubset<T, RecipeLikeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecipeLikeClient<$Result.GetResult<Prisma.$RecipeLikePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RecipeLike that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeLikeFindFirstArgs} args - Arguments to find a RecipeLike
     * @example
     * // Get one RecipeLike
     * const recipeLike = await prisma.recipeLike.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecipeLikeFindFirstArgs>(args?: SelectSubset<T, RecipeLikeFindFirstArgs<ExtArgs>>): Prisma__RecipeLikeClient<$Result.GetResult<Prisma.$RecipeLikePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RecipeLike that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeLikeFindFirstOrThrowArgs} args - Arguments to find a RecipeLike
     * @example
     * // Get one RecipeLike
     * const recipeLike = await prisma.recipeLike.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecipeLikeFindFirstOrThrowArgs>(args?: SelectSubset<T, RecipeLikeFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecipeLikeClient<$Result.GetResult<Prisma.$RecipeLikePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RecipeLikes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeLikeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RecipeLikes
     * const recipeLikes = await prisma.recipeLike.findMany()
     * 
     * // Get first 10 RecipeLikes
     * const recipeLikes = await prisma.recipeLike.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recipeLikeWithIdOnly = await prisma.recipeLike.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RecipeLikeFindManyArgs>(args?: SelectSubset<T, RecipeLikeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RecipeLike.
     * @param {RecipeLikeCreateArgs} args - Arguments to create a RecipeLike.
     * @example
     * // Create one RecipeLike
     * const RecipeLike = await prisma.recipeLike.create({
     *   data: {
     *     // ... data to create a RecipeLike
     *   }
     * })
     * 
     */
    create<T extends RecipeLikeCreateArgs>(args: SelectSubset<T, RecipeLikeCreateArgs<ExtArgs>>): Prisma__RecipeLikeClient<$Result.GetResult<Prisma.$RecipeLikePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RecipeLikes.
     * @param {RecipeLikeCreateManyArgs} args - Arguments to create many RecipeLikes.
     * @example
     * // Create many RecipeLikes
     * const recipeLike = await prisma.recipeLike.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecipeLikeCreateManyArgs>(args?: SelectSubset<T, RecipeLikeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RecipeLikes and returns the data saved in the database.
     * @param {RecipeLikeCreateManyAndReturnArgs} args - Arguments to create many RecipeLikes.
     * @example
     * // Create many RecipeLikes
     * const recipeLike = await prisma.recipeLike.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RecipeLikes and only return the `id`
     * const recipeLikeWithIdOnly = await prisma.recipeLike.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RecipeLikeCreateManyAndReturnArgs>(args?: SelectSubset<T, RecipeLikeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeLikePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RecipeLike.
     * @param {RecipeLikeDeleteArgs} args - Arguments to delete one RecipeLike.
     * @example
     * // Delete one RecipeLike
     * const RecipeLike = await prisma.recipeLike.delete({
     *   where: {
     *     // ... filter to delete one RecipeLike
     *   }
     * })
     * 
     */
    delete<T extends RecipeLikeDeleteArgs>(args: SelectSubset<T, RecipeLikeDeleteArgs<ExtArgs>>): Prisma__RecipeLikeClient<$Result.GetResult<Prisma.$RecipeLikePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RecipeLike.
     * @param {RecipeLikeUpdateArgs} args - Arguments to update one RecipeLike.
     * @example
     * // Update one RecipeLike
     * const recipeLike = await prisma.recipeLike.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecipeLikeUpdateArgs>(args: SelectSubset<T, RecipeLikeUpdateArgs<ExtArgs>>): Prisma__RecipeLikeClient<$Result.GetResult<Prisma.$RecipeLikePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RecipeLikes.
     * @param {RecipeLikeDeleteManyArgs} args - Arguments to filter RecipeLikes to delete.
     * @example
     * // Delete a few RecipeLikes
     * const { count } = await prisma.recipeLike.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecipeLikeDeleteManyArgs>(args?: SelectSubset<T, RecipeLikeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RecipeLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeLikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RecipeLikes
     * const recipeLike = await prisma.recipeLike.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecipeLikeUpdateManyArgs>(args: SelectSubset<T, RecipeLikeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RecipeLikes and returns the data updated in the database.
     * @param {RecipeLikeUpdateManyAndReturnArgs} args - Arguments to update many RecipeLikes.
     * @example
     * // Update many RecipeLikes
     * const recipeLike = await prisma.recipeLike.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RecipeLikes and only return the `id`
     * const recipeLikeWithIdOnly = await prisma.recipeLike.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RecipeLikeUpdateManyAndReturnArgs>(args: SelectSubset<T, RecipeLikeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeLikePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RecipeLike.
     * @param {RecipeLikeUpsertArgs} args - Arguments to update or create a RecipeLike.
     * @example
     * // Update or create a RecipeLike
     * const recipeLike = await prisma.recipeLike.upsert({
     *   create: {
     *     // ... data to create a RecipeLike
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RecipeLike we want to update
     *   }
     * })
     */
    upsert<T extends RecipeLikeUpsertArgs>(args: SelectSubset<T, RecipeLikeUpsertArgs<ExtArgs>>): Prisma__RecipeLikeClient<$Result.GetResult<Prisma.$RecipeLikePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RecipeLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeLikeCountArgs} args - Arguments to filter RecipeLikes to count.
     * @example
     * // Count the number of RecipeLikes
     * const count = await prisma.recipeLike.count({
     *   where: {
     *     // ... the filter for the RecipeLikes we want to count
     *   }
     * })
    **/
    count<T extends RecipeLikeCountArgs>(
      args?: Subset<T, RecipeLikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecipeLikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RecipeLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeLikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecipeLikeAggregateArgs>(args: Subset<T, RecipeLikeAggregateArgs>): Prisma.PrismaPromise<GetRecipeLikeAggregateType<T>>

    /**
     * Group by RecipeLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeLikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecipeLikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecipeLikeGroupByArgs['orderBy'] }
        : { orderBy?: RecipeLikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecipeLikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecipeLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RecipeLike model
   */
  readonly fields: RecipeLikeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RecipeLike.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecipeLikeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    recipe<T extends RecipeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RecipeDefaultArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RecipeLike model
   */
  interface RecipeLikeFieldRefs {
    readonly id: FieldRef<"RecipeLike", 'String'>
    readonly recipeId: FieldRef<"RecipeLike", 'String'>
    readonly userId: FieldRef<"RecipeLike", 'String'>
    readonly likedAt: FieldRef<"RecipeLike", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RecipeLike findUnique
   */
  export type RecipeLikeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeLike
     */
    select?: RecipeLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeLike
     */
    omit?: RecipeLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeLikeInclude<ExtArgs> | null
    /**
     * Filter, which RecipeLike to fetch.
     */
    where: RecipeLikeWhereUniqueInput
  }

  /**
   * RecipeLike findUniqueOrThrow
   */
  export type RecipeLikeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeLike
     */
    select?: RecipeLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeLike
     */
    omit?: RecipeLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeLikeInclude<ExtArgs> | null
    /**
     * Filter, which RecipeLike to fetch.
     */
    where: RecipeLikeWhereUniqueInput
  }

  /**
   * RecipeLike findFirst
   */
  export type RecipeLikeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeLike
     */
    select?: RecipeLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeLike
     */
    omit?: RecipeLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeLikeInclude<ExtArgs> | null
    /**
     * Filter, which RecipeLike to fetch.
     */
    where?: RecipeLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeLikes to fetch.
     */
    orderBy?: RecipeLikeOrderByWithRelationInput | RecipeLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RecipeLikes.
     */
    cursor?: RecipeLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RecipeLikes.
     */
    distinct?: RecipeLikeScalarFieldEnum | RecipeLikeScalarFieldEnum[]
  }

  /**
   * RecipeLike findFirstOrThrow
   */
  export type RecipeLikeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeLike
     */
    select?: RecipeLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeLike
     */
    omit?: RecipeLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeLikeInclude<ExtArgs> | null
    /**
     * Filter, which RecipeLike to fetch.
     */
    where?: RecipeLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeLikes to fetch.
     */
    orderBy?: RecipeLikeOrderByWithRelationInput | RecipeLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RecipeLikes.
     */
    cursor?: RecipeLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RecipeLikes.
     */
    distinct?: RecipeLikeScalarFieldEnum | RecipeLikeScalarFieldEnum[]
  }

  /**
   * RecipeLike findMany
   */
  export type RecipeLikeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeLike
     */
    select?: RecipeLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeLike
     */
    omit?: RecipeLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeLikeInclude<ExtArgs> | null
    /**
     * Filter, which RecipeLikes to fetch.
     */
    where?: RecipeLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeLikes to fetch.
     */
    orderBy?: RecipeLikeOrderByWithRelationInput | RecipeLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RecipeLikes.
     */
    cursor?: RecipeLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeLikes.
     */
    skip?: number
    distinct?: RecipeLikeScalarFieldEnum | RecipeLikeScalarFieldEnum[]
  }

  /**
   * RecipeLike create
   */
  export type RecipeLikeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeLike
     */
    select?: RecipeLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeLike
     */
    omit?: RecipeLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeLikeInclude<ExtArgs> | null
    /**
     * The data needed to create a RecipeLike.
     */
    data: XOR<RecipeLikeCreateInput, RecipeLikeUncheckedCreateInput>
  }

  /**
   * RecipeLike createMany
   */
  export type RecipeLikeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RecipeLikes.
     */
    data: RecipeLikeCreateManyInput | RecipeLikeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RecipeLike createManyAndReturn
   */
  export type RecipeLikeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeLike
     */
    select?: RecipeLikeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeLike
     */
    omit?: RecipeLikeOmit<ExtArgs> | null
    /**
     * The data used to create many RecipeLikes.
     */
    data: RecipeLikeCreateManyInput | RecipeLikeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeLikeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RecipeLike update
   */
  export type RecipeLikeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeLike
     */
    select?: RecipeLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeLike
     */
    omit?: RecipeLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeLikeInclude<ExtArgs> | null
    /**
     * The data needed to update a RecipeLike.
     */
    data: XOR<RecipeLikeUpdateInput, RecipeLikeUncheckedUpdateInput>
    /**
     * Choose, which RecipeLike to update.
     */
    where: RecipeLikeWhereUniqueInput
  }

  /**
   * RecipeLike updateMany
   */
  export type RecipeLikeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RecipeLikes.
     */
    data: XOR<RecipeLikeUpdateManyMutationInput, RecipeLikeUncheckedUpdateManyInput>
    /**
     * Filter which RecipeLikes to update
     */
    where?: RecipeLikeWhereInput
    /**
     * Limit how many RecipeLikes to update.
     */
    limit?: number
  }

  /**
   * RecipeLike updateManyAndReturn
   */
  export type RecipeLikeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeLike
     */
    select?: RecipeLikeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeLike
     */
    omit?: RecipeLikeOmit<ExtArgs> | null
    /**
     * The data used to update RecipeLikes.
     */
    data: XOR<RecipeLikeUpdateManyMutationInput, RecipeLikeUncheckedUpdateManyInput>
    /**
     * Filter which RecipeLikes to update
     */
    where?: RecipeLikeWhereInput
    /**
     * Limit how many RecipeLikes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeLikeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RecipeLike upsert
   */
  export type RecipeLikeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeLike
     */
    select?: RecipeLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeLike
     */
    omit?: RecipeLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeLikeInclude<ExtArgs> | null
    /**
     * The filter to search for the RecipeLike to update in case it exists.
     */
    where: RecipeLikeWhereUniqueInput
    /**
     * In case the RecipeLike found by the `where` argument doesn't exist, create a new RecipeLike with this data.
     */
    create: XOR<RecipeLikeCreateInput, RecipeLikeUncheckedCreateInput>
    /**
     * In case the RecipeLike was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecipeLikeUpdateInput, RecipeLikeUncheckedUpdateInput>
  }

  /**
   * RecipeLike delete
   */
  export type RecipeLikeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeLike
     */
    select?: RecipeLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeLike
     */
    omit?: RecipeLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeLikeInclude<ExtArgs> | null
    /**
     * Filter which RecipeLike to delete.
     */
    where: RecipeLikeWhereUniqueInput
  }

  /**
   * RecipeLike deleteMany
   */
  export type RecipeLikeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RecipeLikes to delete
     */
    where?: RecipeLikeWhereInput
    /**
     * Limit how many RecipeLikes to delete.
     */
    limit?: number
  }

  /**
   * RecipeLike without action
   */
  export type RecipeLikeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeLike
     */
    select?: RecipeLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeLike
     */
    omit?: RecipeLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeLikeInclude<ExtArgs> | null
  }


  /**
   * Model SavedRecipe
   */

  export type AggregateSavedRecipe = {
    _count: SavedRecipeCountAggregateOutputType | null
    _min: SavedRecipeMinAggregateOutputType | null
    _max: SavedRecipeMaxAggregateOutputType | null
  }

  export type SavedRecipeMinAggregateOutputType = {
    id: string | null
    recipeId: string | null
    userId: string | null
    savedAt: Date | null
    notes: string | null
  }

  export type SavedRecipeMaxAggregateOutputType = {
    id: string | null
    recipeId: string | null
    userId: string | null
    savedAt: Date | null
    notes: string | null
  }

  export type SavedRecipeCountAggregateOutputType = {
    id: number
    recipeId: number
    userId: number
    savedAt: number
    notes: number
    _all: number
  }


  export type SavedRecipeMinAggregateInputType = {
    id?: true
    recipeId?: true
    userId?: true
    savedAt?: true
    notes?: true
  }

  export type SavedRecipeMaxAggregateInputType = {
    id?: true
    recipeId?: true
    userId?: true
    savedAt?: true
    notes?: true
  }

  export type SavedRecipeCountAggregateInputType = {
    id?: true
    recipeId?: true
    userId?: true
    savedAt?: true
    notes?: true
    _all?: true
  }

  export type SavedRecipeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SavedRecipe to aggregate.
     */
    where?: SavedRecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedRecipes to fetch.
     */
    orderBy?: SavedRecipeOrderByWithRelationInput | SavedRecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SavedRecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedRecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedRecipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SavedRecipes
    **/
    _count?: true | SavedRecipeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SavedRecipeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SavedRecipeMaxAggregateInputType
  }

  export type GetSavedRecipeAggregateType<T extends SavedRecipeAggregateArgs> = {
        [P in keyof T & keyof AggregateSavedRecipe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSavedRecipe[P]>
      : GetScalarType<T[P], AggregateSavedRecipe[P]>
  }




  export type SavedRecipeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SavedRecipeWhereInput
    orderBy?: SavedRecipeOrderByWithAggregationInput | SavedRecipeOrderByWithAggregationInput[]
    by: SavedRecipeScalarFieldEnum[] | SavedRecipeScalarFieldEnum
    having?: SavedRecipeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SavedRecipeCountAggregateInputType | true
    _min?: SavedRecipeMinAggregateInputType
    _max?: SavedRecipeMaxAggregateInputType
  }

  export type SavedRecipeGroupByOutputType = {
    id: string
    recipeId: string
    userId: string
    savedAt: Date
    notes: string | null
    _count: SavedRecipeCountAggregateOutputType | null
    _min: SavedRecipeMinAggregateOutputType | null
    _max: SavedRecipeMaxAggregateOutputType | null
  }

  type GetSavedRecipeGroupByPayload<T extends SavedRecipeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SavedRecipeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SavedRecipeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SavedRecipeGroupByOutputType[P]>
            : GetScalarType<T[P], SavedRecipeGroupByOutputType[P]>
        }
      >
    >


  export type SavedRecipeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipeId?: boolean
    userId?: boolean
    savedAt?: boolean
    notes?: boolean
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["savedRecipe"]>

  export type SavedRecipeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipeId?: boolean
    userId?: boolean
    savedAt?: boolean
    notes?: boolean
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["savedRecipe"]>

  export type SavedRecipeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipeId?: boolean
    userId?: boolean
    savedAt?: boolean
    notes?: boolean
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["savedRecipe"]>

  export type SavedRecipeSelectScalar = {
    id?: boolean
    recipeId?: boolean
    userId?: boolean
    savedAt?: boolean
    notes?: boolean
  }

  export type SavedRecipeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "recipeId" | "userId" | "savedAt" | "notes", ExtArgs["result"]["savedRecipe"]>
  export type SavedRecipeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SavedRecipeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SavedRecipeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SavedRecipePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SavedRecipe"
    objects: {
      recipe: Prisma.$RecipePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      recipeId: string
      userId: string
      savedAt: Date
      notes: string | null
    }, ExtArgs["result"]["savedRecipe"]>
    composites: {}
  }

  type SavedRecipeGetPayload<S extends boolean | null | undefined | SavedRecipeDefaultArgs> = $Result.GetResult<Prisma.$SavedRecipePayload, S>

  type SavedRecipeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SavedRecipeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SavedRecipeCountAggregateInputType | true
    }

  export interface SavedRecipeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SavedRecipe'], meta: { name: 'SavedRecipe' } }
    /**
     * Find zero or one SavedRecipe that matches the filter.
     * @param {SavedRecipeFindUniqueArgs} args - Arguments to find a SavedRecipe
     * @example
     * // Get one SavedRecipe
     * const savedRecipe = await prisma.savedRecipe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SavedRecipeFindUniqueArgs>(args: SelectSubset<T, SavedRecipeFindUniqueArgs<ExtArgs>>): Prisma__SavedRecipeClient<$Result.GetResult<Prisma.$SavedRecipePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SavedRecipe that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SavedRecipeFindUniqueOrThrowArgs} args - Arguments to find a SavedRecipe
     * @example
     * // Get one SavedRecipe
     * const savedRecipe = await prisma.savedRecipe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SavedRecipeFindUniqueOrThrowArgs>(args: SelectSubset<T, SavedRecipeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SavedRecipeClient<$Result.GetResult<Prisma.$SavedRecipePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SavedRecipe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedRecipeFindFirstArgs} args - Arguments to find a SavedRecipe
     * @example
     * // Get one SavedRecipe
     * const savedRecipe = await prisma.savedRecipe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SavedRecipeFindFirstArgs>(args?: SelectSubset<T, SavedRecipeFindFirstArgs<ExtArgs>>): Prisma__SavedRecipeClient<$Result.GetResult<Prisma.$SavedRecipePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SavedRecipe that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedRecipeFindFirstOrThrowArgs} args - Arguments to find a SavedRecipe
     * @example
     * // Get one SavedRecipe
     * const savedRecipe = await prisma.savedRecipe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SavedRecipeFindFirstOrThrowArgs>(args?: SelectSubset<T, SavedRecipeFindFirstOrThrowArgs<ExtArgs>>): Prisma__SavedRecipeClient<$Result.GetResult<Prisma.$SavedRecipePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SavedRecipes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedRecipeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SavedRecipes
     * const savedRecipes = await prisma.savedRecipe.findMany()
     * 
     * // Get first 10 SavedRecipes
     * const savedRecipes = await prisma.savedRecipe.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const savedRecipeWithIdOnly = await prisma.savedRecipe.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SavedRecipeFindManyArgs>(args?: SelectSubset<T, SavedRecipeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SavedRecipePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SavedRecipe.
     * @param {SavedRecipeCreateArgs} args - Arguments to create a SavedRecipe.
     * @example
     * // Create one SavedRecipe
     * const SavedRecipe = await prisma.savedRecipe.create({
     *   data: {
     *     // ... data to create a SavedRecipe
     *   }
     * })
     * 
     */
    create<T extends SavedRecipeCreateArgs>(args: SelectSubset<T, SavedRecipeCreateArgs<ExtArgs>>): Prisma__SavedRecipeClient<$Result.GetResult<Prisma.$SavedRecipePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SavedRecipes.
     * @param {SavedRecipeCreateManyArgs} args - Arguments to create many SavedRecipes.
     * @example
     * // Create many SavedRecipes
     * const savedRecipe = await prisma.savedRecipe.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SavedRecipeCreateManyArgs>(args?: SelectSubset<T, SavedRecipeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SavedRecipes and returns the data saved in the database.
     * @param {SavedRecipeCreateManyAndReturnArgs} args - Arguments to create many SavedRecipes.
     * @example
     * // Create many SavedRecipes
     * const savedRecipe = await prisma.savedRecipe.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SavedRecipes and only return the `id`
     * const savedRecipeWithIdOnly = await prisma.savedRecipe.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SavedRecipeCreateManyAndReturnArgs>(args?: SelectSubset<T, SavedRecipeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SavedRecipePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SavedRecipe.
     * @param {SavedRecipeDeleteArgs} args - Arguments to delete one SavedRecipe.
     * @example
     * // Delete one SavedRecipe
     * const SavedRecipe = await prisma.savedRecipe.delete({
     *   where: {
     *     // ... filter to delete one SavedRecipe
     *   }
     * })
     * 
     */
    delete<T extends SavedRecipeDeleteArgs>(args: SelectSubset<T, SavedRecipeDeleteArgs<ExtArgs>>): Prisma__SavedRecipeClient<$Result.GetResult<Prisma.$SavedRecipePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SavedRecipe.
     * @param {SavedRecipeUpdateArgs} args - Arguments to update one SavedRecipe.
     * @example
     * // Update one SavedRecipe
     * const savedRecipe = await prisma.savedRecipe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SavedRecipeUpdateArgs>(args: SelectSubset<T, SavedRecipeUpdateArgs<ExtArgs>>): Prisma__SavedRecipeClient<$Result.GetResult<Prisma.$SavedRecipePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SavedRecipes.
     * @param {SavedRecipeDeleteManyArgs} args - Arguments to filter SavedRecipes to delete.
     * @example
     * // Delete a few SavedRecipes
     * const { count } = await prisma.savedRecipe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SavedRecipeDeleteManyArgs>(args?: SelectSubset<T, SavedRecipeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SavedRecipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedRecipeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SavedRecipes
     * const savedRecipe = await prisma.savedRecipe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SavedRecipeUpdateManyArgs>(args: SelectSubset<T, SavedRecipeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SavedRecipes and returns the data updated in the database.
     * @param {SavedRecipeUpdateManyAndReturnArgs} args - Arguments to update many SavedRecipes.
     * @example
     * // Update many SavedRecipes
     * const savedRecipe = await prisma.savedRecipe.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SavedRecipes and only return the `id`
     * const savedRecipeWithIdOnly = await prisma.savedRecipe.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SavedRecipeUpdateManyAndReturnArgs>(args: SelectSubset<T, SavedRecipeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SavedRecipePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SavedRecipe.
     * @param {SavedRecipeUpsertArgs} args - Arguments to update or create a SavedRecipe.
     * @example
     * // Update or create a SavedRecipe
     * const savedRecipe = await prisma.savedRecipe.upsert({
     *   create: {
     *     // ... data to create a SavedRecipe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SavedRecipe we want to update
     *   }
     * })
     */
    upsert<T extends SavedRecipeUpsertArgs>(args: SelectSubset<T, SavedRecipeUpsertArgs<ExtArgs>>): Prisma__SavedRecipeClient<$Result.GetResult<Prisma.$SavedRecipePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SavedRecipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedRecipeCountArgs} args - Arguments to filter SavedRecipes to count.
     * @example
     * // Count the number of SavedRecipes
     * const count = await prisma.savedRecipe.count({
     *   where: {
     *     // ... the filter for the SavedRecipes we want to count
     *   }
     * })
    **/
    count<T extends SavedRecipeCountArgs>(
      args?: Subset<T, SavedRecipeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SavedRecipeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SavedRecipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedRecipeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SavedRecipeAggregateArgs>(args: Subset<T, SavedRecipeAggregateArgs>): Prisma.PrismaPromise<GetSavedRecipeAggregateType<T>>

    /**
     * Group by SavedRecipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedRecipeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SavedRecipeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SavedRecipeGroupByArgs['orderBy'] }
        : { orderBy?: SavedRecipeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SavedRecipeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSavedRecipeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SavedRecipe model
   */
  readonly fields: SavedRecipeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SavedRecipe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SavedRecipeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    recipe<T extends RecipeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RecipeDefaultArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SavedRecipe model
   */
  interface SavedRecipeFieldRefs {
    readonly id: FieldRef<"SavedRecipe", 'String'>
    readonly recipeId: FieldRef<"SavedRecipe", 'String'>
    readonly userId: FieldRef<"SavedRecipe", 'String'>
    readonly savedAt: FieldRef<"SavedRecipe", 'DateTime'>
    readonly notes: FieldRef<"SavedRecipe", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SavedRecipe findUnique
   */
  export type SavedRecipeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedRecipe
     */
    select?: SavedRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedRecipe
     */
    omit?: SavedRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedRecipeInclude<ExtArgs> | null
    /**
     * Filter, which SavedRecipe to fetch.
     */
    where: SavedRecipeWhereUniqueInput
  }

  /**
   * SavedRecipe findUniqueOrThrow
   */
  export type SavedRecipeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedRecipe
     */
    select?: SavedRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedRecipe
     */
    omit?: SavedRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedRecipeInclude<ExtArgs> | null
    /**
     * Filter, which SavedRecipe to fetch.
     */
    where: SavedRecipeWhereUniqueInput
  }

  /**
   * SavedRecipe findFirst
   */
  export type SavedRecipeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedRecipe
     */
    select?: SavedRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedRecipe
     */
    omit?: SavedRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedRecipeInclude<ExtArgs> | null
    /**
     * Filter, which SavedRecipe to fetch.
     */
    where?: SavedRecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedRecipes to fetch.
     */
    orderBy?: SavedRecipeOrderByWithRelationInput | SavedRecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SavedRecipes.
     */
    cursor?: SavedRecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedRecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedRecipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SavedRecipes.
     */
    distinct?: SavedRecipeScalarFieldEnum | SavedRecipeScalarFieldEnum[]
  }

  /**
   * SavedRecipe findFirstOrThrow
   */
  export type SavedRecipeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedRecipe
     */
    select?: SavedRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedRecipe
     */
    omit?: SavedRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedRecipeInclude<ExtArgs> | null
    /**
     * Filter, which SavedRecipe to fetch.
     */
    where?: SavedRecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedRecipes to fetch.
     */
    orderBy?: SavedRecipeOrderByWithRelationInput | SavedRecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SavedRecipes.
     */
    cursor?: SavedRecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedRecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedRecipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SavedRecipes.
     */
    distinct?: SavedRecipeScalarFieldEnum | SavedRecipeScalarFieldEnum[]
  }

  /**
   * SavedRecipe findMany
   */
  export type SavedRecipeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedRecipe
     */
    select?: SavedRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedRecipe
     */
    omit?: SavedRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedRecipeInclude<ExtArgs> | null
    /**
     * Filter, which SavedRecipes to fetch.
     */
    where?: SavedRecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedRecipes to fetch.
     */
    orderBy?: SavedRecipeOrderByWithRelationInput | SavedRecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SavedRecipes.
     */
    cursor?: SavedRecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedRecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedRecipes.
     */
    skip?: number
    distinct?: SavedRecipeScalarFieldEnum | SavedRecipeScalarFieldEnum[]
  }

  /**
   * SavedRecipe create
   */
  export type SavedRecipeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedRecipe
     */
    select?: SavedRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedRecipe
     */
    omit?: SavedRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedRecipeInclude<ExtArgs> | null
    /**
     * The data needed to create a SavedRecipe.
     */
    data: XOR<SavedRecipeCreateInput, SavedRecipeUncheckedCreateInput>
  }

  /**
   * SavedRecipe createMany
   */
  export type SavedRecipeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SavedRecipes.
     */
    data: SavedRecipeCreateManyInput | SavedRecipeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SavedRecipe createManyAndReturn
   */
  export type SavedRecipeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedRecipe
     */
    select?: SavedRecipeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SavedRecipe
     */
    omit?: SavedRecipeOmit<ExtArgs> | null
    /**
     * The data used to create many SavedRecipes.
     */
    data: SavedRecipeCreateManyInput | SavedRecipeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedRecipeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SavedRecipe update
   */
  export type SavedRecipeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedRecipe
     */
    select?: SavedRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedRecipe
     */
    omit?: SavedRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedRecipeInclude<ExtArgs> | null
    /**
     * The data needed to update a SavedRecipe.
     */
    data: XOR<SavedRecipeUpdateInput, SavedRecipeUncheckedUpdateInput>
    /**
     * Choose, which SavedRecipe to update.
     */
    where: SavedRecipeWhereUniqueInput
  }

  /**
   * SavedRecipe updateMany
   */
  export type SavedRecipeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SavedRecipes.
     */
    data: XOR<SavedRecipeUpdateManyMutationInput, SavedRecipeUncheckedUpdateManyInput>
    /**
     * Filter which SavedRecipes to update
     */
    where?: SavedRecipeWhereInput
    /**
     * Limit how many SavedRecipes to update.
     */
    limit?: number
  }

  /**
   * SavedRecipe updateManyAndReturn
   */
  export type SavedRecipeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedRecipe
     */
    select?: SavedRecipeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SavedRecipe
     */
    omit?: SavedRecipeOmit<ExtArgs> | null
    /**
     * The data used to update SavedRecipes.
     */
    data: XOR<SavedRecipeUpdateManyMutationInput, SavedRecipeUncheckedUpdateManyInput>
    /**
     * Filter which SavedRecipes to update
     */
    where?: SavedRecipeWhereInput
    /**
     * Limit how many SavedRecipes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedRecipeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SavedRecipe upsert
   */
  export type SavedRecipeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedRecipe
     */
    select?: SavedRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedRecipe
     */
    omit?: SavedRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedRecipeInclude<ExtArgs> | null
    /**
     * The filter to search for the SavedRecipe to update in case it exists.
     */
    where: SavedRecipeWhereUniqueInput
    /**
     * In case the SavedRecipe found by the `where` argument doesn't exist, create a new SavedRecipe with this data.
     */
    create: XOR<SavedRecipeCreateInput, SavedRecipeUncheckedCreateInput>
    /**
     * In case the SavedRecipe was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SavedRecipeUpdateInput, SavedRecipeUncheckedUpdateInput>
  }

  /**
   * SavedRecipe delete
   */
  export type SavedRecipeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedRecipe
     */
    select?: SavedRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedRecipe
     */
    omit?: SavedRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedRecipeInclude<ExtArgs> | null
    /**
     * Filter which SavedRecipe to delete.
     */
    where: SavedRecipeWhereUniqueInput
  }

  /**
   * SavedRecipe deleteMany
   */
  export type SavedRecipeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SavedRecipes to delete
     */
    where?: SavedRecipeWhereInput
    /**
     * Limit how many SavedRecipes to delete.
     */
    limit?: number
  }

  /**
   * SavedRecipe without action
   */
  export type SavedRecipeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedRecipe
     */
    select?: SavedRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedRecipe
     */
    omit?: SavedRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedRecipeInclude<ExtArgs> | null
  }


  /**
   * Model RecipeReview
   */

  export type AggregateRecipeReview = {
    _count: RecipeReviewCountAggregateOutputType | null
    _avg: RecipeReviewAvgAggregateOutputType | null
    _sum: RecipeReviewSumAggregateOutputType | null
    _min: RecipeReviewMinAggregateOutputType | null
    _max: RecipeReviewMaxAggregateOutputType | null
  }

  export type RecipeReviewAvgAggregateOutputType = {
    rating: number | null
  }

  export type RecipeReviewSumAggregateOutputType = {
    rating: number | null
  }

  export type RecipeReviewMinAggregateOutputType = {
    id: string | null
    recipeId: string | null
    userId: string | null
    rating: number | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RecipeReviewMaxAggregateOutputType = {
    id: string | null
    recipeId: string | null
    userId: string | null
    rating: number | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RecipeReviewCountAggregateOutputType = {
    id: number
    recipeId: number
    userId: number
    rating: number
    comment: number
    images: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RecipeReviewAvgAggregateInputType = {
    rating?: true
  }

  export type RecipeReviewSumAggregateInputType = {
    rating?: true
  }

  export type RecipeReviewMinAggregateInputType = {
    id?: true
    recipeId?: true
    userId?: true
    rating?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RecipeReviewMaxAggregateInputType = {
    id?: true
    recipeId?: true
    userId?: true
    rating?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RecipeReviewCountAggregateInputType = {
    id?: true
    recipeId?: true
    userId?: true
    rating?: true
    comment?: true
    images?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RecipeReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RecipeReview to aggregate.
     */
    where?: RecipeReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeReviews to fetch.
     */
    orderBy?: RecipeReviewOrderByWithRelationInput | RecipeReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecipeReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RecipeReviews
    **/
    _count?: true | RecipeReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecipeReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecipeReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecipeReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecipeReviewMaxAggregateInputType
  }

  export type GetRecipeReviewAggregateType<T extends RecipeReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateRecipeReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecipeReview[P]>
      : GetScalarType<T[P], AggregateRecipeReview[P]>
  }




  export type RecipeReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeReviewWhereInput
    orderBy?: RecipeReviewOrderByWithAggregationInput | RecipeReviewOrderByWithAggregationInput[]
    by: RecipeReviewScalarFieldEnum[] | RecipeReviewScalarFieldEnum
    having?: RecipeReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecipeReviewCountAggregateInputType | true
    _avg?: RecipeReviewAvgAggregateInputType
    _sum?: RecipeReviewSumAggregateInputType
    _min?: RecipeReviewMinAggregateInputType
    _max?: RecipeReviewMaxAggregateInputType
  }

  export type RecipeReviewGroupByOutputType = {
    id: string
    recipeId: string
    userId: string
    rating: number
    comment: string | null
    images: string[]
    createdAt: Date
    updatedAt: Date
    _count: RecipeReviewCountAggregateOutputType | null
    _avg: RecipeReviewAvgAggregateOutputType | null
    _sum: RecipeReviewSumAggregateOutputType | null
    _min: RecipeReviewMinAggregateOutputType | null
    _max: RecipeReviewMaxAggregateOutputType | null
  }

  type GetRecipeReviewGroupByPayload<T extends RecipeReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecipeReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecipeReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecipeReviewGroupByOutputType[P]>
            : GetScalarType<T[P], RecipeReviewGroupByOutputType[P]>
        }
      >
    >


  export type RecipeReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipeId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    images?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recipeReview"]>

  export type RecipeReviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipeId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    images?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recipeReview"]>

  export type RecipeReviewSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipeId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    images?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recipeReview"]>

  export type RecipeReviewSelectScalar = {
    id?: boolean
    recipeId?: boolean
    userId?: boolean
    rating?: boolean
    comment?: boolean
    images?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RecipeReviewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "recipeId" | "userId" | "rating" | "comment" | "images" | "createdAt" | "updatedAt", ExtArgs["result"]["recipeReview"]>
  export type RecipeReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RecipeReviewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RecipeReviewIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RecipeReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RecipeReview"
    objects: {
      recipe: Prisma.$RecipePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      recipeId: string
      userId: string
      rating: number
      comment: string | null
      images: string[]
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["recipeReview"]>
    composites: {}
  }

  type RecipeReviewGetPayload<S extends boolean | null | undefined | RecipeReviewDefaultArgs> = $Result.GetResult<Prisma.$RecipeReviewPayload, S>

  type RecipeReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RecipeReviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RecipeReviewCountAggregateInputType | true
    }

  export interface RecipeReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RecipeReview'], meta: { name: 'RecipeReview' } }
    /**
     * Find zero or one RecipeReview that matches the filter.
     * @param {RecipeReviewFindUniqueArgs} args - Arguments to find a RecipeReview
     * @example
     * // Get one RecipeReview
     * const recipeReview = await prisma.recipeReview.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecipeReviewFindUniqueArgs>(args: SelectSubset<T, RecipeReviewFindUniqueArgs<ExtArgs>>): Prisma__RecipeReviewClient<$Result.GetResult<Prisma.$RecipeReviewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RecipeReview that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RecipeReviewFindUniqueOrThrowArgs} args - Arguments to find a RecipeReview
     * @example
     * // Get one RecipeReview
     * const recipeReview = await prisma.recipeReview.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecipeReviewFindUniqueOrThrowArgs>(args: SelectSubset<T, RecipeReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecipeReviewClient<$Result.GetResult<Prisma.$RecipeReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RecipeReview that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeReviewFindFirstArgs} args - Arguments to find a RecipeReview
     * @example
     * // Get one RecipeReview
     * const recipeReview = await prisma.recipeReview.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecipeReviewFindFirstArgs>(args?: SelectSubset<T, RecipeReviewFindFirstArgs<ExtArgs>>): Prisma__RecipeReviewClient<$Result.GetResult<Prisma.$RecipeReviewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RecipeReview that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeReviewFindFirstOrThrowArgs} args - Arguments to find a RecipeReview
     * @example
     * // Get one RecipeReview
     * const recipeReview = await prisma.recipeReview.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecipeReviewFindFirstOrThrowArgs>(args?: SelectSubset<T, RecipeReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecipeReviewClient<$Result.GetResult<Prisma.$RecipeReviewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RecipeReviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeReviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RecipeReviews
     * const recipeReviews = await prisma.recipeReview.findMany()
     * 
     * // Get first 10 RecipeReviews
     * const recipeReviews = await prisma.recipeReview.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recipeReviewWithIdOnly = await prisma.recipeReview.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RecipeReviewFindManyArgs>(args?: SelectSubset<T, RecipeReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RecipeReview.
     * @param {RecipeReviewCreateArgs} args - Arguments to create a RecipeReview.
     * @example
     * // Create one RecipeReview
     * const RecipeReview = await prisma.recipeReview.create({
     *   data: {
     *     // ... data to create a RecipeReview
     *   }
     * })
     * 
     */
    create<T extends RecipeReviewCreateArgs>(args: SelectSubset<T, RecipeReviewCreateArgs<ExtArgs>>): Prisma__RecipeReviewClient<$Result.GetResult<Prisma.$RecipeReviewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RecipeReviews.
     * @param {RecipeReviewCreateManyArgs} args - Arguments to create many RecipeReviews.
     * @example
     * // Create many RecipeReviews
     * const recipeReview = await prisma.recipeReview.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecipeReviewCreateManyArgs>(args?: SelectSubset<T, RecipeReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RecipeReviews and returns the data saved in the database.
     * @param {RecipeReviewCreateManyAndReturnArgs} args - Arguments to create many RecipeReviews.
     * @example
     * // Create many RecipeReviews
     * const recipeReview = await prisma.recipeReview.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RecipeReviews and only return the `id`
     * const recipeReviewWithIdOnly = await prisma.recipeReview.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RecipeReviewCreateManyAndReturnArgs>(args?: SelectSubset<T, RecipeReviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeReviewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RecipeReview.
     * @param {RecipeReviewDeleteArgs} args - Arguments to delete one RecipeReview.
     * @example
     * // Delete one RecipeReview
     * const RecipeReview = await prisma.recipeReview.delete({
     *   where: {
     *     // ... filter to delete one RecipeReview
     *   }
     * })
     * 
     */
    delete<T extends RecipeReviewDeleteArgs>(args: SelectSubset<T, RecipeReviewDeleteArgs<ExtArgs>>): Prisma__RecipeReviewClient<$Result.GetResult<Prisma.$RecipeReviewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RecipeReview.
     * @param {RecipeReviewUpdateArgs} args - Arguments to update one RecipeReview.
     * @example
     * // Update one RecipeReview
     * const recipeReview = await prisma.recipeReview.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecipeReviewUpdateArgs>(args: SelectSubset<T, RecipeReviewUpdateArgs<ExtArgs>>): Prisma__RecipeReviewClient<$Result.GetResult<Prisma.$RecipeReviewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RecipeReviews.
     * @param {RecipeReviewDeleteManyArgs} args - Arguments to filter RecipeReviews to delete.
     * @example
     * // Delete a few RecipeReviews
     * const { count } = await prisma.recipeReview.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecipeReviewDeleteManyArgs>(args?: SelectSubset<T, RecipeReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RecipeReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RecipeReviews
     * const recipeReview = await prisma.recipeReview.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecipeReviewUpdateManyArgs>(args: SelectSubset<T, RecipeReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RecipeReviews and returns the data updated in the database.
     * @param {RecipeReviewUpdateManyAndReturnArgs} args - Arguments to update many RecipeReviews.
     * @example
     * // Update many RecipeReviews
     * const recipeReview = await prisma.recipeReview.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RecipeReviews and only return the `id`
     * const recipeReviewWithIdOnly = await prisma.recipeReview.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RecipeReviewUpdateManyAndReturnArgs>(args: SelectSubset<T, RecipeReviewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeReviewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RecipeReview.
     * @param {RecipeReviewUpsertArgs} args - Arguments to update or create a RecipeReview.
     * @example
     * // Update or create a RecipeReview
     * const recipeReview = await prisma.recipeReview.upsert({
     *   create: {
     *     // ... data to create a RecipeReview
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RecipeReview we want to update
     *   }
     * })
     */
    upsert<T extends RecipeReviewUpsertArgs>(args: SelectSubset<T, RecipeReviewUpsertArgs<ExtArgs>>): Prisma__RecipeReviewClient<$Result.GetResult<Prisma.$RecipeReviewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RecipeReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeReviewCountArgs} args - Arguments to filter RecipeReviews to count.
     * @example
     * // Count the number of RecipeReviews
     * const count = await prisma.recipeReview.count({
     *   where: {
     *     // ... the filter for the RecipeReviews we want to count
     *   }
     * })
    **/
    count<T extends RecipeReviewCountArgs>(
      args?: Subset<T, RecipeReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecipeReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RecipeReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecipeReviewAggregateArgs>(args: Subset<T, RecipeReviewAggregateArgs>): Prisma.PrismaPromise<GetRecipeReviewAggregateType<T>>

    /**
     * Group by RecipeReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecipeReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecipeReviewGroupByArgs['orderBy'] }
        : { orderBy?: RecipeReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecipeReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecipeReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RecipeReview model
   */
  readonly fields: RecipeReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RecipeReview.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecipeReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    recipe<T extends RecipeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RecipeDefaultArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RecipeReview model
   */
  interface RecipeReviewFieldRefs {
    readonly id: FieldRef<"RecipeReview", 'String'>
    readonly recipeId: FieldRef<"RecipeReview", 'String'>
    readonly userId: FieldRef<"RecipeReview", 'String'>
    readonly rating: FieldRef<"RecipeReview", 'Int'>
    readonly comment: FieldRef<"RecipeReview", 'String'>
    readonly images: FieldRef<"RecipeReview", 'String[]'>
    readonly createdAt: FieldRef<"RecipeReview", 'DateTime'>
    readonly updatedAt: FieldRef<"RecipeReview", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RecipeReview findUnique
   */
  export type RecipeReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeReview
     */
    select?: RecipeReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeReview
     */
    omit?: RecipeReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeReviewInclude<ExtArgs> | null
    /**
     * Filter, which RecipeReview to fetch.
     */
    where: RecipeReviewWhereUniqueInput
  }

  /**
   * RecipeReview findUniqueOrThrow
   */
  export type RecipeReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeReview
     */
    select?: RecipeReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeReview
     */
    omit?: RecipeReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeReviewInclude<ExtArgs> | null
    /**
     * Filter, which RecipeReview to fetch.
     */
    where: RecipeReviewWhereUniqueInput
  }

  /**
   * RecipeReview findFirst
   */
  export type RecipeReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeReview
     */
    select?: RecipeReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeReview
     */
    omit?: RecipeReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeReviewInclude<ExtArgs> | null
    /**
     * Filter, which RecipeReview to fetch.
     */
    where?: RecipeReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeReviews to fetch.
     */
    orderBy?: RecipeReviewOrderByWithRelationInput | RecipeReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RecipeReviews.
     */
    cursor?: RecipeReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RecipeReviews.
     */
    distinct?: RecipeReviewScalarFieldEnum | RecipeReviewScalarFieldEnum[]
  }

  /**
   * RecipeReview findFirstOrThrow
   */
  export type RecipeReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeReview
     */
    select?: RecipeReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeReview
     */
    omit?: RecipeReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeReviewInclude<ExtArgs> | null
    /**
     * Filter, which RecipeReview to fetch.
     */
    where?: RecipeReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeReviews to fetch.
     */
    orderBy?: RecipeReviewOrderByWithRelationInput | RecipeReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RecipeReviews.
     */
    cursor?: RecipeReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RecipeReviews.
     */
    distinct?: RecipeReviewScalarFieldEnum | RecipeReviewScalarFieldEnum[]
  }

  /**
   * RecipeReview findMany
   */
  export type RecipeReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeReview
     */
    select?: RecipeReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeReview
     */
    omit?: RecipeReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeReviewInclude<ExtArgs> | null
    /**
     * Filter, which RecipeReviews to fetch.
     */
    where?: RecipeReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeReviews to fetch.
     */
    orderBy?: RecipeReviewOrderByWithRelationInput | RecipeReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RecipeReviews.
     */
    cursor?: RecipeReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeReviews.
     */
    skip?: number
    distinct?: RecipeReviewScalarFieldEnum | RecipeReviewScalarFieldEnum[]
  }

  /**
   * RecipeReview create
   */
  export type RecipeReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeReview
     */
    select?: RecipeReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeReview
     */
    omit?: RecipeReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a RecipeReview.
     */
    data: XOR<RecipeReviewCreateInput, RecipeReviewUncheckedCreateInput>
  }

  /**
   * RecipeReview createMany
   */
  export type RecipeReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RecipeReviews.
     */
    data: RecipeReviewCreateManyInput | RecipeReviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RecipeReview createManyAndReturn
   */
  export type RecipeReviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeReview
     */
    select?: RecipeReviewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeReview
     */
    omit?: RecipeReviewOmit<ExtArgs> | null
    /**
     * The data used to create many RecipeReviews.
     */
    data: RecipeReviewCreateManyInput | RecipeReviewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeReviewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RecipeReview update
   */
  export type RecipeReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeReview
     */
    select?: RecipeReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeReview
     */
    omit?: RecipeReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a RecipeReview.
     */
    data: XOR<RecipeReviewUpdateInput, RecipeReviewUncheckedUpdateInput>
    /**
     * Choose, which RecipeReview to update.
     */
    where: RecipeReviewWhereUniqueInput
  }

  /**
   * RecipeReview updateMany
   */
  export type RecipeReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RecipeReviews.
     */
    data: XOR<RecipeReviewUpdateManyMutationInput, RecipeReviewUncheckedUpdateManyInput>
    /**
     * Filter which RecipeReviews to update
     */
    where?: RecipeReviewWhereInput
    /**
     * Limit how many RecipeReviews to update.
     */
    limit?: number
  }

  /**
   * RecipeReview updateManyAndReturn
   */
  export type RecipeReviewUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeReview
     */
    select?: RecipeReviewSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeReview
     */
    omit?: RecipeReviewOmit<ExtArgs> | null
    /**
     * The data used to update RecipeReviews.
     */
    data: XOR<RecipeReviewUpdateManyMutationInput, RecipeReviewUncheckedUpdateManyInput>
    /**
     * Filter which RecipeReviews to update
     */
    where?: RecipeReviewWhereInput
    /**
     * Limit how many RecipeReviews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeReviewIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RecipeReview upsert
   */
  export type RecipeReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeReview
     */
    select?: RecipeReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeReview
     */
    omit?: RecipeReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the RecipeReview to update in case it exists.
     */
    where: RecipeReviewWhereUniqueInput
    /**
     * In case the RecipeReview found by the `where` argument doesn't exist, create a new RecipeReview with this data.
     */
    create: XOR<RecipeReviewCreateInput, RecipeReviewUncheckedCreateInput>
    /**
     * In case the RecipeReview was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecipeReviewUpdateInput, RecipeReviewUncheckedUpdateInput>
  }

  /**
   * RecipeReview delete
   */
  export type RecipeReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeReview
     */
    select?: RecipeReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeReview
     */
    omit?: RecipeReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeReviewInclude<ExtArgs> | null
    /**
     * Filter which RecipeReview to delete.
     */
    where: RecipeReviewWhereUniqueInput
  }

  /**
   * RecipeReview deleteMany
   */
  export type RecipeReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RecipeReviews to delete
     */
    where?: RecipeReviewWhereInput
    /**
     * Limit how many RecipeReviews to delete.
     */
    limit?: number
  }

  /**
   * RecipeReview without action
   */
  export type RecipeReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeReview
     */
    select?: RecipeReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RecipeReview
     */
    omit?: RecipeReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeReviewInclude<ExtArgs> | null
  }


  /**
   * Model MadeRecipe
   */

  export type AggregateMadeRecipe = {
    _count: MadeRecipeCountAggregateOutputType | null
    _avg: MadeRecipeAvgAggregateOutputType | null
    _sum: MadeRecipeSumAggregateOutputType | null
    _min: MadeRecipeMinAggregateOutputType | null
    _max: MadeRecipeMaxAggregateOutputType | null
  }

  export type MadeRecipeAvgAggregateOutputType = {
    rating: number | null
  }

  export type MadeRecipeSumAggregateOutputType = {
    rating: number | null
  }

  export type MadeRecipeMinAggregateOutputType = {
    id: string | null
    recipeId: string | null
    userId: string | null
    madeAt: Date | null
    rating: number | null
    notes: string | null
  }

  export type MadeRecipeMaxAggregateOutputType = {
    id: string | null
    recipeId: string | null
    userId: string | null
    madeAt: Date | null
    rating: number | null
    notes: string | null
  }

  export type MadeRecipeCountAggregateOutputType = {
    id: number
    recipeId: number
    userId: number
    madeAt: number
    rating: number
    notes: number
    images: number
    _all: number
  }


  export type MadeRecipeAvgAggregateInputType = {
    rating?: true
  }

  export type MadeRecipeSumAggregateInputType = {
    rating?: true
  }

  export type MadeRecipeMinAggregateInputType = {
    id?: true
    recipeId?: true
    userId?: true
    madeAt?: true
    rating?: true
    notes?: true
  }

  export type MadeRecipeMaxAggregateInputType = {
    id?: true
    recipeId?: true
    userId?: true
    madeAt?: true
    rating?: true
    notes?: true
  }

  export type MadeRecipeCountAggregateInputType = {
    id?: true
    recipeId?: true
    userId?: true
    madeAt?: true
    rating?: true
    notes?: true
    images?: true
    _all?: true
  }

  export type MadeRecipeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MadeRecipe to aggregate.
     */
    where?: MadeRecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MadeRecipes to fetch.
     */
    orderBy?: MadeRecipeOrderByWithRelationInput | MadeRecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MadeRecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MadeRecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MadeRecipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MadeRecipes
    **/
    _count?: true | MadeRecipeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MadeRecipeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MadeRecipeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MadeRecipeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MadeRecipeMaxAggregateInputType
  }

  export type GetMadeRecipeAggregateType<T extends MadeRecipeAggregateArgs> = {
        [P in keyof T & keyof AggregateMadeRecipe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMadeRecipe[P]>
      : GetScalarType<T[P], AggregateMadeRecipe[P]>
  }




  export type MadeRecipeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MadeRecipeWhereInput
    orderBy?: MadeRecipeOrderByWithAggregationInput | MadeRecipeOrderByWithAggregationInput[]
    by: MadeRecipeScalarFieldEnum[] | MadeRecipeScalarFieldEnum
    having?: MadeRecipeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MadeRecipeCountAggregateInputType | true
    _avg?: MadeRecipeAvgAggregateInputType
    _sum?: MadeRecipeSumAggregateInputType
    _min?: MadeRecipeMinAggregateInputType
    _max?: MadeRecipeMaxAggregateInputType
  }

  export type MadeRecipeGroupByOutputType = {
    id: string
    recipeId: string
    userId: string
    madeAt: Date
    rating: number | null
    notes: string | null
    images: string[]
    _count: MadeRecipeCountAggregateOutputType | null
    _avg: MadeRecipeAvgAggregateOutputType | null
    _sum: MadeRecipeSumAggregateOutputType | null
    _min: MadeRecipeMinAggregateOutputType | null
    _max: MadeRecipeMaxAggregateOutputType | null
  }

  type GetMadeRecipeGroupByPayload<T extends MadeRecipeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MadeRecipeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MadeRecipeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MadeRecipeGroupByOutputType[P]>
            : GetScalarType<T[P], MadeRecipeGroupByOutputType[P]>
        }
      >
    >


  export type MadeRecipeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipeId?: boolean
    userId?: boolean
    madeAt?: boolean
    rating?: boolean
    notes?: boolean
    images?: boolean
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["madeRecipe"]>

  export type MadeRecipeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipeId?: boolean
    userId?: boolean
    madeAt?: boolean
    rating?: boolean
    notes?: boolean
    images?: boolean
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["madeRecipe"]>

  export type MadeRecipeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipeId?: boolean
    userId?: boolean
    madeAt?: boolean
    rating?: boolean
    notes?: boolean
    images?: boolean
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["madeRecipe"]>

  export type MadeRecipeSelectScalar = {
    id?: boolean
    recipeId?: boolean
    userId?: boolean
    madeAt?: boolean
    rating?: boolean
    notes?: boolean
    images?: boolean
  }

  export type MadeRecipeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "recipeId" | "userId" | "madeAt" | "rating" | "notes" | "images", ExtArgs["result"]["madeRecipe"]>
  export type MadeRecipeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MadeRecipeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MadeRecipeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MadeRecipePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MadeRecipe"
    objects: {
      recipe: Prisma.$RecipePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      recipeId: string
      userId: string
      madeAt: Date
      rating: number | null
      notes: string | null
      images: string[]
    }, ExtArgs["result"]["madeRecipe"]>
    composites: {}
  }

  type MadeRecipeGetPayload<S extends boolean | null | undefined | MadeRecipeDefaultArgs> = $Result.GetResult<Prisma.$MadeRecipePayload, S>

  type MadeRecipeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MadeRecipeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MadeRecipeCountAggregateInputType | true
    }

  export interface MadeRecipeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MadeRecipe'], meta: { name: 'MadeRecipe' } }
    /**
     * Find zero or one MadeRecipe that matches the filter.
     * @param {MadeRecipeFindUniqueArgs} args - Arguments to find a MadeRecipe
     * @example
     * // Get one MadeRecipe
     * const madeRecipe = await prisma.madeRecipe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MadeRecipeFindUniqueArgs>(args: SelectSubset<T, MadeRecipeFindUniqueArgs<ExtArgs>>): Prisma__MadeRecipeClient<$Result.GetResult<Prisma.$MadeRecipePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MadeRecipe that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MadeRecipeFindUniqueOrThrowArgs} args - Arguments to find a MadeRecipe
     * @example
     * // Get one MadeRecipe
     * const madeRecipe = await prisma.madeRecipe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MadeRecipeFindUniqueOrThrowArgs>(args: SelectSubset<T, MadeRecipeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MadeRecipeClient<$Result.GetResult<Prisma.$MadeRecipePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MadeRecipe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MadeRecipeFindFirstArgs} args - Arguments to find a MadeRecipe
     * @example
     * // Get one MadeRecipe
     * const madeRecipe = await prisma.madeRecipe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MadeRecipeFindFirstArgs>(args?: SelectSubset<T, MadeRecipeFindFirstArgs<ExtArgs>>): Prisma__MadeRecipeClient<$Result.GetResult<Prisma.$MadeRecipePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MadeRecipe that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MadeRecipeFindFirstOrThrowArgs} args - Arguments to find a MadeRecipe
     * @example
     * // Get one MadeRecipe
     * const madeRecipe = await prisma.madeRecipe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MadeRecipeFindFirstOrThrowArgs>(args?: SelectSubset<T, MadeRecipeFindFirstOrThrowArgs<ExtArgs>>): Prisma__MadeRecipeClient<$Result.GetResult<Prisma.$MadeRecipePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MadeRecipes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MadeRecipeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MadeRecipes
     * const madeRecipes = await prisma.madeRecipe.findMany()
     * 
     * // Get first 10 MadeRecipes
     * const madeRecipes = await prisma.madeRecipe.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const madeRecipeWithIdOnly = await prisma.madeRecipe.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MadeRecipeFindManyArgs>(args?: SelectSubset<T, MadeRecipeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MadeRecipePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MadeRecipe.
     * @param {MadeRecipeCreateArgs} args - Arguments to create a MadeRecipe.
     * @example
     * // Create one MadeRecipe
     * const MadeRecipe = await prisma.madeRecipe.create({
     *   data: {
     *     // ... data to create a MadeRecipe
     *   }
     * })
     * 
     */
    create<T extends MadeRecipeCreateArgs>(args: SelectSubset<T, MadeRecipeCreateArgs<ExtArgs>>): Prisma__MadeRecipeClient<$Result.GetResult<Prisma.$MadeRecipePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MadeRecipes.
     * @param {MadeRecipeCreateManyArgs} args - Arguments to create many MadeRecipes.
     * @example
     * // Create many MadeRecipes
     * const madeRecipe = await prisma.madeRecipe.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MadeRecipeCreateManyArgs>(args?: SelectSubset<T, MadeRecipeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MadeRecipes and returns the data saved in the database.
     * @param {MadeRecipeCreateManyAndReturnArgs} args - Arguments to create many MadeRecipes.
     * @example
     * // Create many MadeRecipes
     * const madeRecipe = await prisma.madeRecipe.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MadeRecipes and only return the `id`
     * const madeRecipeWithIdOnly = await prisma.madeRecipe.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MadeRecipeCreateManyAndReturnArgs>(args?: SelectSubset<T, MadeRecipeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MadeRecipePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MadeRecipe.
     * @param {MadeRecipeDeleteArgs} args - Arguments to delete one MadeRecipe.
     * @example
     * // Delete one MadeRecipe
     * const MadeRecipe = await prisma.madeRecipe.delete({
     *   where: {
     *     // ... filter to delete one MadeRecipe
     *   }
     * })
     * 
     */
    delete<T extends MadeRecipeDeleteArgs>(args: SelectSubset<T, MadeRecipeDeleteArgs<ExtArgs>>): Prisma__MadeRecipeClient<$Result.GetResult<Prisma.$MadeRecipePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MadeRecipe.
     * @param {MadeRecipeUpdateArgs} args - Arguments to update one MadeRecipe.
     * @example
     * // Update one MadeRecipe
     * const madeRecipe = await prisma.madeRecipe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MadeRecipeUpdateArgs>(args: SelectSubset<T, MadeRecipeUpdateArgs<ExtArgs>>): Prisma__MadeRecipeClient<$Result.GetResult<Prisma.$MadeRecipePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MadeRecipes.
     * @param {MadeRecipeDeleteManyArgs} args - Arguments to filter MadeRecipes to delete.
     * @example
     * // Delete a few MadeRecipes
     * const { count } = await prisma.madeRecipe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MadeRecipeDeleteManyArgs>(args?: SelectSubset<T, MadeRecipeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MadeRecipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MadeRecipeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MadeRecipes
     * const madeRecipe = await prisma.madeRecipe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MadeRecipeUpdateManyArgs>(args: SelectSubset<T, MadeRecipeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MadeRecipes and returns the data updated in the database.
     * @param {MadeRecipeUpdateManyAndReturnArgs} args - Arguments to update many MadeRecipes.
     * @example
     * // Update many MadeRecipes
     * const madeRecipe = await prisma.madeRecipe.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MadeRecipes and only return the `id`
     * const madeRecipeWithIdOnly = await prisma.madeRecipe.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MadeRecipeUpdateManyAndReturnArgs>(args: SelectSubset<T, MadeRecipeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MadeRecipePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MadeRecipe.
     * @param {MadeRecipeUpsertArgs} args - Arguments to update or create a MadeRecipe.
     * @example
     * // Update or create a MadeRecipe
     * const madeRecipe = await prisma.madeRecipe.upsert({
     *   create: {
     *     // ... data to create a MadeRecipe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MadeRecipe we want to update
     *   }
     * })
     */
    upsert<T extends MadeRecipeUpsertArgs>(args: SelectSubset<T, MadeRecipeUpsertArgs<ExtArgs>>): Prisma__MadeRecipeClient<$Result.GetResult<Prisma.$MadeRecipePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MadeRecipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MadeRecipeCountArgs} args - Arguments to filter MadeRecipes to count.
     * @example
     * // Count the number of MadeRecipes
     * const count = await prisma.madeRecipe.count({
     *   where: {
     *     // ... the filter for the MadeRecipes we want to count
     *   }
     * })
    **/
    count<T extends MadeRecipeCountArgs>(
      args?: Subset<T, MadeRecipeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MadeRecipeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MadeRecipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MadeRecipeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MadeRecipeAggregateArgs>(args: Subset<T, MadeRecipeAggregateArgs>): Prisma.PrismaPromise<GetMadeRecipeAggregateType<T>>

    /**
     * Group by MadeRecipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MadeRecipeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MadeRecipeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MadeRecipeGroupByArgs['orderBy'] }
        : { orderBy?: MadeRecipeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MadeRecipeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMadeRecipeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MadeRecipe model
   */
  readonly fields: MadeRecipeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MadeRecipe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MadeRecipeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    recipe<T extends RecipeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RecipeDefaultArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MadeRecipe model
   */
  interface MadeRecipeFieldRefs {
    readonly id: FieldRef<"MadeRecipe", 'String'>
    readonly recipeId: FieldRef<"MadeRecipe", 'String'>
    readonly userId: FieldRef<"MadeRecipe", 'String'>
    readonly madeAt: FieldRef<"MadeRecipe", 'DateTime'>
    readonly rating: FieldRef<"MadeRecipe", 'Int'>
    readonly notes: FieldRef<"MadeRecipe", 'String'>
    readonly images: FieldRef<"MadeRecipe", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * MadeRecipe findUnique
   */
  export type MadeRecipeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MadeRecipe
     */
    select?: MadeRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MadeRecipe
     */
    omit?: MadeRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MadeRecipeInclude<ExtArgs> | null
    /**
     * Filter, which MadeRecipe to fetch.
     */
    where: MadeRecipeWhereUniqueInput
  }

  /**
   * MadeRecipe findUniqueOrThrow
   */
  export type MadeRecipeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MadeRecipe
     */
    select?: MadeRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MadeRecipe
     */
    omit?: MadeRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MadeRecipeInclude<ExtArgs> | null
    /**
     * Filter, which MadeRecipe to fetch.
     */
    where: MadeRecipeWhereUniqueInput
  }

  /**
   * MadeRecipe findFirst
   */
  export type MadeRecipeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MadeRecipe
     */
    select?: MadeRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MadeRecipe
     */
    omit?: MadeRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MadeRecipeInclude<ExtArgs> | null
    /**
     * Filter, which MadeRecipe to fetch.
     */
    where?: MadeRecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MadeRecipes to fetch.
     */
    orderBy?: MadeRecipeOrderByWithRelationInput | MadeRecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MadeRecipes.
     */
    cursor?: MadeRecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MadeRecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MadeRecipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MadeRecipes.
     */
    distinct?: MadeRecipeScalarFieldEnum | MadeRecipeScalarFieldEnum[]
  }

  /**
   * MadeRecipe findFirstOrThrow
   */
  export type MadeRecipeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MadeRecipe
     */
    select?: MadeRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MadeRecipe
     */
    omit?: MadeRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MadeRecipeInclude<ExtArgs> | null
    /**
     * Filter, which MadeRecipe to fetch.
     */
    where?: MadeRecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MadeRecipes to fetch.
     */
    orderBy?: MadeRecipeOrderByWithRelationInput | MadeRecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MadeRecipes.
     */
    cursor?: MadeRecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MadeRecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MadeRecipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MadeRecipes.
     */
    distinct?: MadeRecipeScalarFieldEnum | MadeRecipeScalarFieldEnum[]
  }

  /**
   * MadeRecipe findMany
   */
  export type MadeRecipeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MadeRecipe
     */
    select?: MadeRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MadeRecipe
     */
    omit?: MadeRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MadeRecipeInclude<ExtArgs> | null
    /**
     * Filter, which MadeRecipes to fetch.
     */
    where?: MadeRecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MadeRecipes to fetch.
     */
    orderBy?: MadeRecipeOrderByWithRelationInput | MadeRecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MadeRecipes.
     */
    cursor?: MadeRecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MadeRecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MadeRecipes.
     */
    skip?: number
    distinct?: MadeRecipeScalarFieldEnum | MadeRecipeScalarFieldEnum[]
  }

  /**
   * MadeRecipe create
   */
  export type MadeRecipeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MadeRecipe
     */
    select?: MadeRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MadeRecipe
     */
    omit?: MadeRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MadeRecipeInclude<ExtArgs> | null
    /**
     * The data needed to create a MadeRecipe.
     */
    data: XOR<MadeRecipeCreateInput, MadeRecipeUncheckedCreateInput>
  }

  /**
   * MadeRecipe createMany
   */
  export type MadeRecipeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MadeRecipes.
     */
    data: MadeRecipeCreateManyInput | MadeRecipeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MadeRecipe createManyAndReturn
   */
  export type MadeRecipeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MadeRecipe
     */
    select?: MadeRecipeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MadeRecipe
     */
    omit?: MadeRecipeOmit<ExtArgs> | null
    /**
     * The data used to create many MadeRecipes.
     */
    data: MadeRecipeCreateManyInput | MadeRecipeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MadeRecipeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MadeRecipe update
   */
  export type MadeRecipeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MadeRecipe
     */
    select?: MadeRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MadeRecipe
     */
    omit?: MadeRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MadeRecipeInclude<ExtArgs> | null
    /**
     * The data needed to update a MadeRecipe.
     */
    data: XOR<MadeRecipeUpdateInput, MadeRecipeUncheckedUpdateInput>
    /**
     * Choose, which MadeRecipe to update.
     */
    where: MadeRecipeWhereUniqueInput
  }

  /**
   * MadeRecipe updateMany
   */
  export type MadeRecipeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MadeRecipes.
     */
    data: XOR<MadeRecipeUpdateManyMutationInput, MadeRecipeUncheckedUpdateManyInput>
    /**
     * Filter which MadeRecipes to update
     */
    where?: MadeRecipeWhereInput
    /**
     * Limit how many MadeRecipes to update.
     */
    limit?: number
  }

  /**
   * MadeRecipe updateManyAndReturn
   */
  export type MadeRecipeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MadeRecipe
     */
    select?: MadeRecipeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MadeRecipe
     */
    omit?: MadeRecipeOmit<ExtArgs> | null
    /**
     * The data used to update MadeRecipes.
     */
    data: XOR<MadeRecipeUpdateManyMutationInput, MadeRecipeUncheckedUpdateManyInput>
    /**
     * Filter which MadeRecipes to update
     */
    where?: MadeRecipeWhereInput
    /**
     * Limit how many MadeRecipes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MadeRecipeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MadeRecipe upsert
   */
  export type MadeRecipeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MadeRecipe
     */
    select?: MadeRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MadeRecipe
     */
    omit?: MadeRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MadeRecipeInclude<ExtArgs> | null
    /**
     * The filter to search for the MadeRecipe to update in case it exists.
     */
    where: MadeRecipeWhereUniqueInput
    /**
     * In case the MadeRecipe found by the `where` argument doesn't exist, create a new MadeRecipe with this data.
     */
    create: XOR<MadeRecipeCreateInput, MadeRecipeUncheckedCreateInput>
    /**
     * In case the MadeRecipe was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MadeRecipeUpdateInput, MadeRecipeUncheckedUpdateInput>
  }

  /**
   * MadeRecipe delete
   */
  export type MadeRecipeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MadeRecipe
     */
    select?: MadeRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MadeRecipe
     */
    omit?: MadeRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MadeRecipeInclude<ExtArgs> | null
    /**
     * Filter which MadeRecipe to delete.
     */
    where: MadeRecipeWhereUniqueInput
  }

  /**
   * MadeRecipe deleteMany
   */
  export type MadeRecipeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MadeRecipes to delete
     */
    where?: MadeRecipeWhereInput
    /**
     * Limit how many MadeRecipes to delete.
     */
    limit?: number
  }

  /**
   * MadeRecipe without action
   */
  export type MadeRecipeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MadeRecipe
     */
    select?: MadeRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MadeRecipe
     */
    omit?: MadeRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MadeRecipeInclude<ExtArgs> | null
  }


  /**
   * Model Follow
   */

  export type AggregateFollow = {
    _count: FollowCountAggregateOutputType | null
    _min: FollowMinAggregateOutputType | null
    _max: FollowMaxAggregateOutputType | null
  }

  export type FollowMinAggregateOutputType = {
    id: string | null
    followerId: string | null
    followingId: string | null
    createdAt: Date | null
  }

  export type FollowMaxAggregateOutputType = {
    id: string | null
    followerId: string | null
    followingId: string | null
    createdAt: Date | null
  }

  export type FollowCountAggregateOutputType = {
    id: number
    followerId: number
    followingId: number
    createdAt: number
    _all: number
  }


  export type FollowMinAggregateInputType = {
    id?: true
    followerId?: true
    followingId?: true
    createdAt?: true
  }

  export type FollowMaxAggregateInputType = {
    id?: true
    followerId?: true
    followingId?: true
    createdAt?: true
  }

  export type FollowCountAggregateInputType = {
    id?: true
    followerId?: true
    followingId?: true
    createdAt?: true
    _all?: true
  }

  export type FollowAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Follow to aggregate.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Follows
    **/
    _count?: true | FollowCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FollowMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FollowMaxAggregateInputType
  }

  export type GetFollowAggregateType<T extends FollowAggregateArgs> = {
        [P in keyof T & keyof AggregateFollow]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFollow[P]>
      : GetScalarType<T[P], AggregateFollow[P]>
  }




  export type FollowGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FollowWhereInput
    orderBy?: FollowOrderByWithAggregationInput | FollowOrderByWithAggregationInput[]
    by: FollowScalarFieldEnum[] | FollowScalarFieldEnum
    having?: FollowScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FollowCountAggregateInputType | true
    _min?: FollowMinAggregateInputType
    _max?: FollowMaxAggregateInputType
  }

  export type FollowGroupByOutputType = {
    id: string
    followerId: string
    followingId: string
    createdAt: Date
    _count: FollowCountAggregateOutputType | null
    _min: FollowMinAggregateOutputType | null
    _max: FollowMaxAggregateOutputType | null
  }

  type GetFollowGroupByPayload<T extends FollowGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FollowGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FollowGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FollowGroupByOutputType[P]>
            : GetScalarType<T[P], FollowGroupByOutputType[P]>
        }
      >
    >


  export type FollowSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    followerId?: boolean
    followingId?: boolean
    createdAt?: boolean
    follower?: boolean | UserDefaultArgs<ExtArgs>
    following?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["follow"]>

  export type FollowSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    followerId?: boolean
    followingId?: boolean
    createdAt?: boolean
    follower?: boolean | UserDefaultArgs<ExtArgs>
    following?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["follow"]>

  export type FollowSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    followerId?: boolean
    followingId?: boolean
    createdAt?: boolean
    follower?: boolean | UserDefaultArgs<ExtArgs>
    following?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["follow"]>

  export type FollowSelectScalar = {
    id?: boolean
    followerId?: boolean
    followingId?: boolean
    createdAt?: boolean
  }

  export type FollowOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "followerId" | "followingId" | "createdAt", ExtArgs["result"]["follow"]>
  export type FollowInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    follower?: boolean | UserDefaultArgs<ExtArgs>
    following?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FollowIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    follower?: boolean | UserDefaultArgs<ExtArgs>
    following?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FollowIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    follower?: boolean | UserDefaultArgs<ExtArgs>
    following?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FollowPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Follow"
    objects: {
      follower: Prisma.$UserPayload<ExtArgs>
      following: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      followerId: string
      followingId: string
      createdAt: Date
    }, ExtArgs["result"]["follow"]>
    composites: {}
  }

  type FollowGetPayload<S extends boolean | null | undefined | FollowDefaultArgs> = $Result.GetResult<Prisma.$FollowPayload, S>

  type FollowCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FollowFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FollowCountAggregateInputType | true
    }

  export interface FollowDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Follow'], meta: { name: 'Follow' } }
    /**
     * Find zero or one Follow that matches the filter.
     * @param {FollowFindUniqueArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FollowFindUniqueArgs>(args: SelectSubset<T, FollowFindUniqueArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Follow that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FollowFindUniqueOrThrowArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FollowFindUniqueOrThrowArgs>(args: SelectSubset<T, FollowFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Follow that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowFindFirstArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FollowFindFirstArgs>(args?: SelectSubset<T, FollowFindFirstArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Follow that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowFindFirstOrThrowArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FollowFindFirstOrThrowArgs>(args?: SelectSubset<T, FollowFindFirstOrThrowArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Follows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Follows
     * const follows = await prisma.follow.findMany()
     * 
     * // Get first 10 Follows
     * const follows = await prisma.follow.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const followWithIdOnly = await prisma.follow.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FollowFindManyArgs>(args?: SelectSubset<T, FollowFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Follow.
     * @param {FollowCreateArgs} args - Arguments to create a Follow.
     * @example
     * // Create one Follow
     * const Follow = await prisma.follow.create({
     *   data: {
     *     // ... data to create a Follow
     *   }
     * })
     * 
     */
    create<T extends FollowCreateArgs>(args: SelectSubset<T, FollowCreateArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Follows.
     * @param {FollowCreateManyArgs} args - Arguments to create many Follows.
     * @example
     * // Create many Follows
     * const follow = await prisma.follow.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FollowCreateManyArgs>(args?: SelectSubset<T, FollowCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Follows and returns the data saved in the database.
     * @param {FollowCreateManyAndReturnArgs} args - Arguments to create many Follows.
     * @example
     * // Create many Follows
     * const follow = await prisma.follow.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Follows and only return the `id`
     * const followWithIdOnly = await prisma.follow.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FollowCreateManyAndReturnArgs>(args?: SelectSubset<T, FollowCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Follow.
     * @param {FollowDeleteArgs} args - Arguments to delete one Follow.
     * @example
     * // Delete one Follow
     * const Follow = await prisma.follow.delete({
     *   where: {
     *     // ... filter to delete one Follow
     *   }
     * })
     * 
     */
    delete<T extends FollowDeleteArgs>(args: SelectSubset<T, FollowDeleteArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Follow.
     * @param {FollowUpdateArgs} args - Arguments to update one Follow.
     * @example
     * // Update one Follow
     * const follow = await prisma.follow.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FollowUpdateArgs>(args: SelectSubset<T, FollowUpdateArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Follows.
     * @param {FollowDeleteManyArgs} args - Arguments to filter Follows to delete.
     * @example
     * // Delete a few Follows
     * const { count } = await prisma.follow.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FollowDeleteManyArgs>(args?: SelectSubset<T, FollowDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Follows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Follows
     * const follow = await prisma.follow.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FollowUpdateManyArgs>(args: SelectSubset<T, FollowUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Follows and returns the data updated in the database.
     * @param {FollowUpdateManyAndReturnArgs} args - Arguments to update many Follows.
     * @example
     * // Update many Follows
     * const follow = await prisma.follow.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Follows and only return the `id`
     * const followWithIdOnly = await prisma.follow.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FollowUpdateManyAndReturnArgs>(args: SelectSubset<T, FollowUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Follow.
     * @param {FollowUpsertArgs} args - Arguments to update or create a Follow.
     * @example
     * // Update or create a Follow
     * const follow = await prisma.follow.upsert({
     *   create: {
     *     // ... data to create a Follow
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Follow we want to update
     *   }
     * })
     */
    upsert<T extends FollowUpsertArgs>(args: SelectSubset<T, FollowUpsertArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Follows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowCountArgs} args - Arguments to filter Follows to count.
     * @example
     * // Count the number of Follows
     * const count = await prisma.follow.count({
     *   where: {
     *     // ... the filter for the Follows we want to count
     *   }
     * })
    **/
    count<T extends FollowCountArgs>(
      args?: Subset<T, FollowCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FollowCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Follow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FollowAggregateArgs>(args: Subset<T, FollowAggregateArgs>): Prisma.PrismaPromise<GetFollowAggregateType<T>>

    /**
     * Group by Follow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FollowGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FollowGroupByArgs['orderBy'] }
        : { orderBy?: FollowGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FollowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFollowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Follow model
   */
  readonly fields: FollowFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Follow.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FollowClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    follower<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    following<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Follow model
   */
  interface FollowFieldRefs {
    readonly id: FieldRef<"Follow", 'String'>
    readonly followerId: FieldRef<"Follow", 'String'>
    readonly followingId: FieldRef<"Follow", 'String'>
    readonly createdAt: FieldRef<"Follow", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Follow findUnique
   */
  export type FollowFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter, which Follow to fetch.
     */
    where: FollowWhereUniqueInput
  }

  /**
   * Follow findUniqueOrThrow
   */
  export type FollowFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter, which Follow to fetch.
     */
    where: FollowWhereUniqueInput
  }

  /**
   * Follow findFirst
   */
  export type FollowFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter, which Follow to fetch.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Follows.
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Follows.
     */
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }

  /**
   * Follow findFirstOrThrow
   */
  export type FollowFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter, which Follow to fetch.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Follows.
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Follows.
     */
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }

  /**
   * Follow findMany
   */
  export type FollowFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter, which Follows to fetch.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Follows.
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }

  /**
   * Follow create
   */
  export type FollowCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * The data needed to create a Follow.
     */
    data: XOR<FollowCreateInput, FollowUncheckedCreateInput>
  }

  /**
   * Follow createMany
   */
  export type FollowCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Follows.
     */
    data: FollowCreateManyInput | FollowCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Follow createManyAndReturn
   */
  export type FollowCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * The data used to create many Follows.
     */
    data: FollowCreateManyInput | FollowCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Follow update
   */
  export type FollowUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * The data needed to update a Follow.
     */
    data: XOR<FollowUpdateInput, FollowUncheckedUpdateInput>
    /**
     * Choose, which Follow to update.
     */
    where: FollowWhereUniqueInput
  }

  /**
   * Follow updateMany
   */
  export type FollowUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Follows.
     */
    data: XOR<FollowUpdateManyMutationInput, FollowUncheckedUpdateManyInput>
    /**
     * Filter which Follows to update
     */
    where?: FollowWhereInput
    /**
     * Limit how many Follows to update.
     */
    limit?: number
  }

  /**
   * Follow updateManyAndReturn
   */
  export type FollowUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * The data used to update Follows.
     */
    data: XOR<FollowUpdateManyMutationInput, FollowUncheckedUpdateManyInput>
    /**
     * Filter which Follows to update
     */
    where?: FollowWhereInput
    /**
     * Limit how many Follows to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Follow upsert
   */
  export type FollowUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * The filter to search for the Follow to update in case it exists.
     */
    where: FollowWhereUniqueInput
    /**
     * In case the Follow found by the `where` argument doesn't exist, create a new Follow with this data.
     */
    create: XOR<FollowCreateInput, FollowUncheckedCreateInput>
    /**
     * In case the Follow was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FollowUpdateInput, FollowUncheckedUpdateInput>
  }

  /**
   * Follow delete
   */
  export type FollowDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter which Follow to delete.
     */
    where: FollowWhereUniqueInput
  }

  /**
   * Follow deleteMany
   */
  export type FollowDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Follows to delete
     */
    where?: FollowWhereInput
    /**
     * Limit how many Follows to delete.
     */
    limit?: number
  }

  /**
   * Follow without action
   */
  export type FollowDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
  }


  /**
   * Model MealPlan
   */

  export type AggregateMealPlan = {
    _count: MealPlanCountAggregateOutputType | null
    _min: MealPlanMinAggregateOutputType | null
    _max: MealPlanMaxAggregateOutputType | null
  }

  export type MealPlanMinAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MealPlanMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MealPlanCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    description: number
    startDate: number
    endDate: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MealPlanMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    description?: true
    startDate?: true
    endDate?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MealPlanMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    description?: true
    startDate?: true
    endDate?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MealPlanCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    description?: true
    startDate?: true
    endDate?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MealPlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MealPlan to aggregate.
     */
    where?: MealPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealPlans to fetch.
     */
    orderBy?: MealPlanOrderByWithRelationInput | MealPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MealPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MealPlans
    **/
    _count?: true | MealPlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MealPlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MealPlanMaxAggregateInputType
  }

  export type GetMealPlanAggregateType<T extends MealPlanAggregateArgs> = {
        [P in keyof T & keyof AggregateMealPlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMealPlan[P]>
      : GetScalarType<T[P], AggregateMealPlan[P]>
  }




  export type MealPlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealPlanWhereInput
    orderBy?: MealPlanOrderByWithAggregationInput | MealPlanOrderByWithAggregationInput[]
    by: MealPlanScalarFieldEnum[] | MealPlanScalarFieldEnum
    having?: MealPlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MealPlanCountAggregateInputType | true
    _min?: MealPlanMinAggregateInputType
    _max?: MealPlanMaxAggregateInputType
  }

  export type MealPlanGroupByOutputType = {
    id: string
    userId: string
    name: string
    description: string | null
    startDate: Date
    endDate: Date
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: MealPlanCountAggregateOutputType | null
    _min: MealPlanMinAggregateOutputType | null
    _max: MealPlanMaxAggregateOutputType | null
  }

  type GetMealPlanGroupByPayload<T extends MealPlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MealPlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MealPlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MealPlanGroupByOutputType[P]>
            : GetScalarType<T[P], MealPlanGroupByOutputType[P]>
        }
      >
    >


  export type MealPlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    items?: boolean | MealPlan$itemsArgs<ExtArgs>
    _count?: boolean | MealPlanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mealPlan"]>

  export type MealPlanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mealPlan"]>

  export type MealPlanSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mealPlan"]>

  export type MealPlanSelectScalar = {
    id?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MealPlanOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "name" | "description" | "startDate" | "endDate" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["mealPlan"]>
  export type MealPlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    items?: boolean | MealPlan$itemsArgs<ExtArgs>
    _count?: boolean | MealPlanCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MealPlanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MealPlanIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MealPlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MealPlan"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      items: Prisma.$MealPlanItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      name: string
      description: string | null
      startDate: Date
      endDate: Date
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["mealPlan"]>
    composites: {}
  }

  type MealPlanGetPayload<S extends boolean | null | undefined | MealPlanDefaultArgs> = $Result.GetResult<Prisma.$MealPlanPayload, S>

  type MealPlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MealPlanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MealPlanCountAggregateInputType | true
    }

  export interface MealPlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MealPlan'], meta: { name: 'MealPlan' } }
    /**
     * Find zero or one MealPlan that matches the filter.
     * @param {MealPlanFindUniqueArgs} args - Arguments to find a MealPlan
     * @example
     * // Get one MealPlan
     * const mealPlan = await prisma.mealPlan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MealPlanFindUniqueArgs>(args: SelectSubset<T, MealPlanFindUniqueArgs<ExtArgs>>): Prisma__MealPlanClient<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MealPlan that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MealPlanFindUniqueOrThrowArgs} args - Arguments to find a MealPlan
     * @example
     * // Get one MealPlan
     * const mealPlan = await prisma.mealPlan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MealPlanFindUniqueOrThrowArgs>(args: SelectSubset<T, MealPlanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MealPlanClient<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MealPlan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealPlanFindFirstArgs} args - Arguments to find a MealPlan
     * @example
     * // Get one MealPlan
     * const mealPlan = await prisma.mealPlan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MealPlanFindFirstArgs>(args?: SelectSubset<T, MealPlanFindFirstArgs<ExtArgs>>): Prisma__MealPlanClient<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MealPlan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealPlanFindFirstOrThrowArgs} args - Arguments to find a MealPlan
     * @example
     * // Get one MealPlan
     * const mealPlan = await prisma.mealPlan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MealPlanFindFirstOrThrowArgs>(args?: SelectSubset<T, MealPlanFindFirstOrThrowArgs<ExtArgs>>): Prisma__MealPlanClient<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MealPlans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealPlanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MealPlans
     * const mealPlans = await prisma.mealPlan.findMany()
     * 
     * // Get first 10 MealPlans
     * const mealPlans = await prisma.mealPlan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mealPlanWithIdOnly = await prisma.mealPlan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MealPlanFindManyArgs>(args?: SelectSubset<T, MealPlanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MealPlan.
     * @param {MealPlanCreateArgs} args - Arguments to create a MealPlan.
     * @example
     * // Create one MealPlan
     * const MealPlan = await prisma.mealPlan.create({
     *   data: {
     *     // ... data to create a MealPlan
     *   }
     * })
     * 
     */
    create<T extends MealPlanCreateArgs>(args: SelectSubset<T, MealPlanCreateArgs<ExtArgs>>): Prisma__MealPlanClient<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MealPlans.
     * @param {MealPlanCreateManyArgs} args - Arguments to create many MealPlans.
     * @example
     * // Create many MealPlans
     * const mealPlan = await prisma.mealPlan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MealPlanCreateManyArgs>(args?: SelectSubset<T, MealPlanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MealPlans and returns the data saved in the database.
     * @param {MealPlanCreateManyAndReturnArgs} args - Arguments to create many MealPlans.
     * @example
     * // Create many MealPlans
     * const mealPlan = await prisma.mealPlan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MealPlans and only return the `id`
     * const mealPlanWithIdOnly = await prisma.mealPlan.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MealPlanCreateManyAndReturnArgs>(args?: SelectSubset<T, MealPlanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MealPlan.
     * @param {MealPlanDeleteArgs} args - Arguments to delete one MealPlan.
     * @example
     * // Delete one MealPlan
     * const MealPlan = await prisma.mealPlan.delete({
     *   where: {
     *     // ... filter to delete one MealPlan
     *   }
     * })
     * 
     */
    delete<T extends MealPlanDeleteArgs>(args: SelectSubset<T, MealPlanDeleteArgs<ExtArgs>>): Prisma__MealPlanClient<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MealPlan.
     * @param {MealPlanUpdateArgs} args - Arguments to update one MealPlan.
     * @example
     * // Update one MealPlan
     * const mealPlan = await prisma.mealPlan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MealPlanUpdateArgs>(args: SelectSubset<T, MealPlanUpdateArgs<ExtArgs>>): Prisma__MealPlanClient<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MealPlans.
     * @param {MealPlanDeleteManyArgs} args - Arguments to filter MealPlans to delete.
     * @example
     * // Delete a few MealPlans
     * const { count } = await prisma.mealPlan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MealPlanDeleteManyArgs>(args?: SelectSubset<T, MealPlanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MealPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealPlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MealPlans
     * const mealPlan = await prisma.mealPlan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MealPlanUpdateManyArgs>(args: SelectSubset<T, MealPlanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MealPlans and returns the data updated in the database.
     * @param {MealPlanUpdateManyAndReturnArgs} args - Arguments to update many MealPlans.
     * @example
     * // Update many MealPlans
     * const mealPlan = await prisma.mealPlan.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MealPlans and only return the `id`
     * const mealPlanWithIdOnly = await prisma.mealPlan.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MealPlanUpdateManyAndReturnArgs>(args: SelectSubset<T, MealPlanUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MealPlan.
     * @param {MealPlanUpsertArgs} args - Arguments to update or create a MealPlan.
     * @example
     * // Update or create a MealPlan
     * const mealPlan = await prisma.mealPlan.upsert({
     *   create: {
     *     // ... data to create a MealPlan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MealPlan we want to update
     *   }
     * })
     */
    upsert<T extends MealPlanUpsertArgs>(args: SelectSubset<T, MealPlanUpsertArgs<ExtArgs>>): Prisma__MealPlanClient<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MealPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealPlanCountArgs} args - Arguments to filter MealPlans to count.
     * @example
     * // Count the number of MealPlans
     * const count = await prisma.mealPlan.count({
     *   where: {
     *     // ... the filter for the MealPlans we want to count
     *   }
     * })
    **/
    count<T extends MealPlanCountArgs>(
      args?: Subset<T, MealPlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MealPlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MealPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MealPlanAggregateArgs>(args: Subset<T, MealPlanAggregateArgs>): Prisma.PrismaPromise<GetMealPlanAggregateType<T>>

    /**
     * Group by MealPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealPlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MealPlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MealPlanGroupByArgs['orderBy'] }
        : { orderBy?: MealPlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MealPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMealPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MealPlan model
   */
  readonly fields: MealPlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MealPlan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MealPlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    items<T extends MealPlan$itemsArgs<ExtArgs> = {}>(args?: Subset<T, MealPlan$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealPlanItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MealPlan model
   */
  interface MealPlanFieldRefs {
    readonly id: FieldRef<"MealPlan", 'String'>
    readonly userId: FieldRef<"MealPlan", 'String'>
    readonly name: FieldRef<"MealPlan", 'String'>
    readonly description: FieldRef<"MealPlan", 'String'>
    readonly startDate: FieldRef<"MealPlan", 'DateTime'>
    readonly endDate: FieldRef<"MealPlan", 'DateTime'>
    readonly isActive: FieldRef<"MealPlan", 'Boolean'>
    readonly createdAt: FieldRef<"MealPlan", 'DateTime'>
    readonly updatedAt: FieldRef<"MealPlan", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MealPlan findUnique
   */
  export type MealPlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealPlan
     */
    omit?: MealPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    /**
     * Filter, which MealPlan to fetch.
     */
    where: MealPlanWhereUniqueInput
  }

  /**
   * MealPlan findUniqueOrThrow
   */
  export type MealPlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealPlan
     */
    omit?: MealPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    /**
     * Filter, which MealPlan to fetch.
     */
    where: MealPlanWhereUniqueInput
  }

  /**
   * MealPlan findFirst
   */
  export type MealPlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealPlan
     */
    omit?: MealPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    /**
     * Filter, which MealPlan to fetch.
     */
    where?: MealPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealPlans to fetch.
     */
    orderBy?: MealPlanOrderByWithRelationInput | MealPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MealPlans.
     */
    cursor?: MealPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MealPlans.
     */
    distinct?: MealPlanScalarFieldEnum | MealPlanScalarFieldEnum[]
  }

  /**
   * MealPlan findFirstOrThrow
   */
  export type MealPlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealPlan
     */
    omit?: MealPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    /**
     * Filter, which MealPlan to fetch.
     */
    where?: MealPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealPlans to fetch.
     */
    orderBy?: MealPlanOrderByWithRelationInput | MealPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MealPlans.
     */
    cursor?: MealPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MealPlans.
     */
    distinct?: MealPlanScalarFieldEnum | MealPlanScalarFieldEnum[]
  }

  /**
   * MealPlan findMany
   */
  export type MealPlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealPlan
     */
    omit?: MealPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    /**
     * Filter, which MealPlans to fetch.
     */
    where?: MealPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealPlans to fetch.
     */
    orderBy?: MealPlanOrderByWithRelationInput | MealPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MealPlans.
     */
    cursor?: MealPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealPlans.
     */
    skip?: number
    distinct?: MealPlanScalarFieldEnum | MealPlanScalarFieldEnum[]
  }

  /**
   * MealPlan create
   */
  export type MealPlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealPlan
     */
    omit?: MealPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    /**
     * The data needed to create a MealPlan.
     */
    data: XOR<MealPlanCreateInput, MealPlanUncheckedCreateInput>
  }

  /**
   * MealPlan createMany
   */
  export type MealPlanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MealPlans.
     */
    data: MealPlanCreateManyInput | MealPlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MealPlan createManyAndReturn
   */
  export type MealPlanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MealPlan
     */
    omit?: MealPlanOmit<ExtArgs> | null
    /**
     * The data used to create many MealPlans.
     */
    data: MealPlanCreateManyInput | MealPlanCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MealPlan update
   */
  export type MealPlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealPlan
     */
    omit?: MealPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    /**
     * The data needed to update a MealPlan.
     */
    data: XOR<MealPlanUpdateInput, MealPlanUncheckedUpdateInput>
    /**
     * Choose, which MealPlan to update.
     */
    where: MealPlanWhereUniqueInput
  }

  /**
   * MealPlan updateMany
   */
  export type MealPlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MealPlans.
     */
    data: XOR<MealPlanUpdateManyMutationInput, MealPlanUncheckedUpdateManyInput>
    /**
     * Filter which MealPlans to update
     */
    where?: MealPlanWhereInput
    /**
     * Limit how many MealPlans to update.
     */
    limit?: number
  }

  /**
   * MealPlan updateManyAndReturn
   */
  export type MealPlanUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MealPlan
     */
    omit?: MealPlanOmit<ExtArgs> | null
    /**
     * The data used to update MealPlans.
     */
    data: XOR<MealPlanUpdateManyMutationInput, MealPlanUncheckedUpdateManyInput>
    /**
     * Filter which MealPlans to update
     */
    where?: MealPlanWhereInput
    /**
     * Limit how many MealPlans to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MealPlan upsert
   */
  export type MealPlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealPlan
     */
    omit?: MealPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    /**
     * The filter to search for the MealPlan to update in case it exists.
     */
    where: MealPlanWhereUniqueInput
    /**
     * In case the MealPlan found by the `where` argument doesn't exist, create a new MealPlan with this data.
     */
    create: XOR<MealPlanCreateInput, MealPlanUncheckedCreateInput>
    /**
     * In case the MealPlan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MealPlanUpdateInput, MealPlanUncheckedUpdateInput>
  }

  /**
   * MealPlan delete
   */
  export type MealPlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealPlan
     */
    omit?: MealPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
    /**
     * Filter which MealPlan to delete.
     */
    where: MealPlanWhereUniqueInput
  }

  /**
   * MealPlan deleteMany
   */
  export type MealPlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MealPlans to delete
     */
    where?: MealPlanWhereInput
    /**
     * Limit how many MealPlans to delete.
     */
    limit?: number
  }

  /**
   * MealPlan.items
   */
  export type MealPlan$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlanItem
     */
    select?: MealPlanItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealPlanItem
     */
    omit?: MealPlanItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanItemInclude<ExtArgs> | null
    where?: MealPlanItemWhereInput
    orderBy?: MealPlanItemOrderByWithRelationInput | MealPlanItemOrderByWithRelationInput[]
    cursor?: MealPlanItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MealPlanItemScalarFieldEnum | MealPlanItemScalarFieldEnum[]
  }

  /**
   * MealPlan without action
   */
  export type MealPlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlan
     */
    select?: MealPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealPlan
     */
    omit?: MealPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanInclude<ExtArgs> | null
  }


  /**
   * Model MealPlanItem
   */

  export type AggregateMealPlanItem = {
    _count: MealPlanItemCountAggregateOutputType | null
    _avg: MealPlanItemAvgAggregateOutputType | null
    _sum: MealPlanItemSumAggregateOutputType | null
    _min: MealPlanItemMinAggregateOutputType | null
    _max: MealPlanItemMaxAggregateOutputType | null
  }

  export type MealPlanItemAvgAggregateOutputType = {
    servings: number | null
  }

  export type MealPlanItemSumAggregateOutputType = {
    servings: number | null
  }

  export type MealPlanItemMinAggregateOutputType = {
    id: string | null
    mealPlanId: string | null
    recipeId: string | null
    date: Date | null
    mealType: string | null
    servings: number | null
  }

  export type MealPlanItemMaxAggregateOutputType = {
    id: string | null
    mealPlanId: string | null
    recipeId: string | null
    date: Date | null
    mealType: string | null
    servings: number | null
  }

  export type MealPlanItemCountAggregateOutputType = {
    id: number
    mealPlanId: number
    recipeId: number
    date: number
    mealType: number
    servings: number
    _all: number
  }


  export type MealPlanItemAvgAggregateInputType = {
    servings?: true
  }

  export type MealPlanItemSumAggregateInputType = {
    servings?: true
  }

  export type MealPlanItemMinAggregateInputType = {
    id?: true
    mealPlanId?: true
    recipeId?: true
    date?: true
    mealType?: true
    servings?: true
  }

  export type MealPlanItemMaxAggregateInputType = {
    id?: true
    mealPlanId?: true
    recipeId?: true
    date?: true
    mealType?: true
    servings?: true
  }

  export type MealPlanItemCountAggregateInputType = {
    id?: true
    mealPlanId?: true
    recipeId?: true
    date?: true
    mealType?: true
    servings?: true
    _all?: true
  }

  export type MealPlanItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MealPlanItem to aggregate.
     */
    where?: MealPlanItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealPlanItems to fetch.
     */
    orderBy?: MealPlanItemOrderByWithRelationInput | MealPlanItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MealPlanItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealPlanItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealPlanItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MealPlanItems
    **/
    _count?: true | MealPlanItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MealPlanItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MealPlanItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MealPlanItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MealPlanItemMaxAggregateInputType
  }

  export type GetMealPlanItemAggregateType<T extends MealPlanItemAggregateArgs> = {
        [P in keyof T & keyof AggregateMealPlanItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMealPlanItem[P]>
      : GetScalarType<T[P], AggregateMealPlanItem[P]>
  }




  export type MealPlanItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealPlanItemWhereInput
    orderBy?: MealPlanItemOrderByWithAggregationInput | MealPlanItemOrderByWithAggregationInput[]
    by: MealPlanItemScalarFieldEnum[] | MealPlanItemScalarFieldEnum
    having?: MealPlanItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MealPlanItemCountAggregateInputType | true
    _avg?: MealPlanItemAvgAggregateInputType
    _sum?: MealPlanItemSumAggregateInputType
    _min?: MealPlanItemMinAggregateInputType
    _max?: MealPlanItemMaxAggregateInputType
  }

  export type MealPlanItemGroupByOutputType = {
    id: string
    mealPlanId: string
    recipeId: string
    date: Date
    mealType: string
    servings: number
    _count: MealPlanItemCountAggregateOutputType | null
    _avg: MealPlanItemAvgAggregateOutputType | null
    _sum: MealPlanItemSumAggregateOutputType | null
    _min: MealPlanItemMinAggregateOutputType | null
    _max: MealPlanItemMaxAggregateOutputType | null
  }

  type GetMealPlanItemGroupByPayload<T extends MealPlanItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MealPlanItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MealPlanItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MealPlanItemGroupByOutputType[P]>
            : GetScalarType<T[P], MealPlanItemGroupByOutputType[P]>
        }
      >
    >


  export type MealPlanItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mealPlanId?: boolean
    recipeId?: boolean
    date?: boolean
    mealType?: boolean
    servings?: boolean
    mealPlan?: boolean | MealPlanDefaultArgs<ExtArgs>
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mealPlanItem"]>

  export type MealPlanItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mealPlanId?: boolean
    recipeId?: boolean
    date?: boolean
    mealType?: boolean
    servings?: boolean
    mealPlan?: boolean | MealPlanDefaultArgs<ExtArgs>
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mealPlanItem"]>

  export type MealPlanItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mealPlanId?: boolean
    recipeId?: boolean
    date?: boolean
    mealType?: boolean
    servings?: boolean
    mealPlan?: boolean | MealPlanDefaultArgs<ExtArgs>
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mealPlanItem"]>

  export type MealPlanItemSelectScalar = {
    id?: boolean
    mealPlanId?: boolean
    recipeId?: boolean
    date?: boolean
    mealType?: boolean
    servings?: boolean
  }

  export type MealPlanItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "mealPlanId" | "recipeId" | "date" | "mealType" | "servings", ExtArgs["result"]["mealPlanItem"]>
  export type MealPlanItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mealPlan?: boolean | MealPlanDefaultArgs<ExtArgs>
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }
  export type MealPlanItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mealPlan?: boolean | MealPlanDefaultArgs<ExtArgs>
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }
  export type MealPlanItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mealPlan?: boolean | MealPlanDefaultArgs<ExtArgs>
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }

  export type $MealPlanItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MealPlanItem"
    objects: {
      mealPlan: Prisma.$MealPlanPayload<ExtArgs>
      recipe: Prisma.$RecipePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      mealPlanId: string
      recipeId: string
      date: Date
      mealType: string
      servings: number
    }, ExtArgs["result"]["mealPlanItem"]>
    composites: {}
  }

  type MealPlanItemGetPayload<S extends boolean | null | undefined | MealPlanItemDefaultArgs> = $Result.GetResult<Prisma.$MealPlanItemPayload, S>

  type MealPlanItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MealPlanItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MealPlanItemCountAggregateInputType | true
    }

  export interface MealPlanItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MealPlanItem'], meta: { name: 'MealPlanItem' } }
    /**
     * Find zero or one MealPlanItem that matches the filter.
     * @param {MealPlanItemFindUniqueArgs} args - Arguments to find a MealPlanItem
     * @example
     * // Get one MealPlanItem
     * const mealPlanItem = await prisma.mealPlanItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MealPlanItemFindUniqueArgs>(args: SelectSubset<T, MealPlanItemFindUniqueArgs<ExtArgs>>): Prisma__MealPlanItemClient<$Result.GetResult<Prisma.$MealPlanItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MealPlanItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MealPlanItemFindUniqueOrThrowArgs} args - Arguments to find a MealPlanItem
     * @example
     * // Get one MealPlanItem
     * const mealPlanItem = await prisma.mealPlanItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MealPlanItemFindUniqueOrThrowArgs>(args: SelectSubset<T, MealPlanItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MealPlanItemClient<$Result.GetResult<Prisma.$MealPlanItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MealPlanItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealPlanItemFindFirstArgs} args - Arguments to find a MealPlanItem
     * @example
     * // Get one MealPlanItem
     * const mealPlanItem = await prisma.mealPlanItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MealPlanItemFindFirstArgs>(args?: SelectSubset<T, MealPlanItemFindFirstArgs<ExtArgs>>): Prisma__MealPlanItemClient<$Result.GetResult<Prisma.$MealPlanItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MealPlanItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealPlanItemFindFirstOrThrowArgs} args - Arguments to find a MealPlanItem
     * @example
     * // Get one MealPlanItem
     * const mealPlanItem = await prisma.mealPlanItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MealPlanItemFindFirstOrThrowArgs>(args?: SelectSubset<T, MealPlanItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__MealPlanItemClient<$Result.GetResult<Prisma.$MealPlanItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MealPlanItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealPlanItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MealPlanItems
     * const mealPlanItems = await prisma.mealPlanItem.findMany()
     * 
     * // Get first 10 MealPlanItems
     * const mealPlanItems = await prisma.mealPlanItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mealPlanItemWithIdOnly = await prisma.mealPlanItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MealPlanItemFindManyArgs>(args?: SelectSubset<T, MealPlanItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealPlanItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MealPlanItem.
     * @param {MealPlanItemCreateArgs} args - Arguments to create a MealPlanItem.
     * @example
     * // Create one MealPlanItem
     * const MealPlanItem = await prisma.mealPlanItem.create({
     *   data: {
     *     // ... data to create a MealPlanItem
     *   }
     * })
     * 
     */
    create<T extends MealPlanItemCreateArgs>(args: SelectSubset<T, MealPlanItemCreateArgs<ExtArgs>>): Prisma__MealPlanItemClient<$Result.GetResult<Prisma.$MealPlanItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MealPlanItems.
     * @param {MealPlanItemCreateManyArgs} args - Arguments to create many MealPlanItems.
     * @example
     * // Create many MealPlanItems
     * const mealPlanItem = await prisma.mealPlanItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MealPlanItemCreateManyArgs>(args?: SelectSubset<T, MealPlanItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MealPlanItems and returns the data saved in the database.
     * @param {MealPlanItemCreateManyAndReturnArgs} args - Arguments to create many MealPlanItems.
     * @example
     * // Create many MealPlanItems
     * const mealPlanItem = await prisma.mealPlanItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MealPlanItems and only return the `id`
     * const mealPlanItemWithIdOnly = await prisma.mealPlanItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MealPlanItemCreateManyAndReturnArgs>(args?: SelectSubset<T, MealPlanItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealPlanItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MealPlanItem.
     * @param {MealPlanItemDeleteArgs} args - Arguments to delete one MealPlanItem.
     * @example
     * // Delete one MealPlanItem
     * const MealPlanItem = await prisma.mealPlanItem.delete({
     *   where: {
     *     // ... filter to delete one MealPlanItem
     *   }
     * })
     * 
     */
    delete<T extends MealPlanItemDeleteArgs>(args: SelectSubset<T, MealPlanItemDeleteArgs<ExtArgs>>): Prisma__MealPlanItemClient<$Result.GetResult<Prisma.$MealPlanItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MealPlanItem.
     * @param {MealPlanItemUpdateArgs} args - Arguments to update one MealPlanItem.
     * @example
     * // Update one MealPlanItem
     * const mealPlanItem = await prisma.mealPlanItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MealPlanItemUpdateArgs>(args: SelectSubset<T, MealPlanItemUpdateArgs<ExtArgs>>): Prisma__MealPlanItemClient<$Result.GetResult<Prisma.$MealPlanItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MealPlanItems.
     * @param {MealPlanItemDeleteManyArgs} args - Arguments to filter MealPlanItems to delete.
     * @example
     * // Delete a few MealPlanItems
     * const { count } = await prisma.mealPlanItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MealPlanItemDeleteManyArgs>(args?: SelectSubset<T, MealPlanItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MealPlanItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealPlanItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MealPlanItems
     * const mealPlanItem = await prisma.mealPlanItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MealPlanItemUpdateManyArgs>(args: SelectSubset<T, MealPlanItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MealPlanItems and returns the data updated in the database.
     * @param {MealPlanItemUpdateManyAndReturnArgs} args - Arguments to update many MealPlanItems.
     * @example
     * // Update many MealPlanItems
     * const mealPlanItem = await prisma.mealPlanItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MealPlanItems and only return the `id`
     * const mealPlanItemWithIdOnly = await prisma.mealPlanItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MealPlanItemUpdateManyAndReturnArgs>(args: SelectSubset<T, MealPlanItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealPlanItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MealPlanItem.
     * @param {MealPlanItemUpsertArgs} args - Arguments to update or create a MealPlanItem.
     * @example
     * // Update or create a MealPlanItem
     * const mealPlanItem = await prisma.mealPlanItem.upsert({
     *   create: {
     *     // ... data to create a MealPlanItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MealPlanItem we want to update
     *   }
     * })
     */
    upsert<T extends MealPlanItemUpsertArgs>(args: SelectSubset<T, MealPlanItemUpsertArgs<ExtArgs>>): Prisma__MealPlanItemClient<$Result.GetResult<Prisma.$MealPlanItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MealPlanItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealPlanItemCountArgs} args - Arguments to filter MealPlanItems to count.
     * @example
     * // Count the number of MealPlanItems
     * const count = await prisma.mealPlanItem.count({
     *   where: {
     *     // ... the filter for the MealPlanItems we want to count
     *   }
     * })
    **/
    count<T extends MealPlanItemCountArgs>(
      args?: Subset<T, MealPlanItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MealPlanItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MealPlanItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealPlanItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MealPlanItemAggregateArgs>(args: Subset<T, MealPlanItemAggregateArgs>): Prisma.PrismaPromise<GetMealPlanItemAggregateType<T>>

    /**
     * Group by MealPlanItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealPlanItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MealPlanItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MealPlanItemGroupByArgs['orderBy'] }
        : { orderBy?: MealPlanItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MealPlanItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMealPlanItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MealPlanItem model
   */
  readonly fields: MealPlanItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MealPlanItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MealPlanItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    mealPlan<T extends MealPlanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MealPlanDefaultArgs<ExtArgs>>): Prisma__MealPlanClient<$Result.GetResult<Prisma.$MealPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    recipe<T extends RecipeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RecipeDefaultArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MealPlanItem model
   */
  interface MealPlanItemFieldRefs {
    readonly id: FieldRef<"MealPlanItem", 'String'>
    readonly mealPlanId: FieldRef<"MealPlanItem", 'String'>
    readonly recipeId: FieldRef<"MealPlanItem", 'String'>
    readonly date: FieldRef<"MealPlanItem", 'DateTime'>
    readonly mealType: FieldRef<"MealPlanItem", 'String'>
    readonly servings: FieldRef<"MealPlanItem", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * MealPlanItem findUnique
   */
  export type MealPlanItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlanItem
     */
    select?: MealPlanItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealPlanItem
     */
    omit?: MealPlanItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanItemInclude<ExtArgs> | null
    /**
     * Filter, which MealPlanItem to fetch.
     */
    where: MealPlanItemWhereUniqueInput
  }

  /**
   * MealPlanItem findUniqueOrThrow
   */
  export type MealPlanItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlanItem
     */
    select?: MealPlanItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealPlanItem
     */
    omit?: MealPlanItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanItemInclude<ExtArgs> | null
    /**
     * Filter, which MealPlanItem to fetch.
     */
    where: MealPlanItemWhereUniqueInput
  }

  /**
   * MealPlanItem findFirst
   */
  export type MealPlanItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlanItem
     */
    select?: MealPlanItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealPlanItem
     */
    omit?: MealPlanItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanItemInclude<ExtArgs> | null
    /**
     * Filter, which MealPlanItem to fetch.
     */
    where?: MealPlanItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealPlanItems to fetch.
     */
    orderBy?: MealPlanItemOrderByWithRelationInput | MealPlanItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MealPlanItems.
     */
    cursor?: MealPlanItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealPlanItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealPlanItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MealPlanItems.
     */
    distinct?: MealPlanItemScalarFieldEnum | MealPlanItemScalarFieldEnum[]
  }

  /**
   * MealPlanItem findFirstOrThrow
   */
  export type MealPlanItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlanItem
     */
    select?: MealPlanItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealPlanItem
     */
    omit?: MealPlanItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanItemInclude<ExtArgs> | null
    /**
     * Filter, which MealPlanItem to fetch.
     */
    where?: MealPlanItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealPlanItems to fetch.
     */
    orderBy?: MealPlanItemOrderByWithRelationInput | MealPlanItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MealPlanItems.
     */
    cursor?: MealPlanItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealPlanItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealPlanItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MealPlanItems.
     */
    distinct?: MealPlanItemScalarFieldEnum | MealPlanItemScalarFieldEnum[]
  }

  /**
   * MealPlanItem findMany
   */
  export type MealPlanItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlanItem
     */
    select?: MealPlanItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealPlanItem
     */
    omit?: MealPlanItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanItemInclude<ExtArgs> | null
    /**
     * Filter, which MealPlanItems to fetch.
     */
    where?: MealPlanItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealPlanItems to fetch.
     */
    orderBy?: MealPlanItemOrderByWithRelationInput | MealPlanItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MealPlanItems.
     */
    cursor?: MealPlanItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealPlanItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealPlanItems.
     */
    skip?: number
    distinct?: MealPlanItemScalarFieldEnum | MealPlanItemScalarFieldEnum[]
  }

  /**
   * MealPlanItem create
   */
  export type MealPlanItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlanItem
     */
    select?: MealPlanItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealPlanItem
     */
    omit?: MealPlanItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanItemInclude<ExtArgs> | null
    /**
     * The data needed to create a MealPlanItem.
     */
    data: XOR<MealPlanItemCreateInput, MealPlanItemUncheckedCreateInput>
  }

  /**
   * MealPlanItem createMany
   */
  export type MealPlanItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MealPlanItems.
     */
    data: MealPlanItemCreateManyInput | MealPlanItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MealPlanItem createManyAndReturn
   */
  export type MealPlanItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlanItem
     */
    select?: MealPlanItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MealPlanItem
     */
    omit?: MealPlanItemOmit<ExtArgs> | null
    /**
     * The data used to create many MealPlanItems.
     */
    data: MealPlanItemCreateManyInput | MealPlanItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MealPlanItem update
   */
  export type MealPlanItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlanItem
     */
    select?: MealPlanItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealPlanItem
     */
    omit?: MealPlanItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanItemInclude<ExtArgs> | null
    /**
     * The data needed to update a MealPlanItem.
     */
    data: XOR<MealPlanItemUpdateInput, MealPlanItemUncheckedUpdateInput>
    /**
     * Choose, which MealPlanItem to update.
     */
    where: MealPlanItemWhereUniqueInput
  }

  /**
   * MealPlanItem updateMany
   */
  export type MealPlanItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MealPlanItems.
     */
    data: XOR<MealPlanItemUpdateManyMutationInput, MealPlanItemUncheckedUpdateManyInput>
    /**
     * Filter which MealPlanItems to update
     */
    where?: MealPlanItemWhereInput
    /**
     * Limit how many MealPlanItems to update.
     */
    limit?: number
  }

  /**
   * MealPlanItem updateManyAndReturn
   */
  export type MealPlanItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlanItem
     */
    select?: MealPlanItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MealPlanItem
     */
    omit?: MealPlanItemOmit<ExtArgs> | null
    /**
     * The data used to update MealPlanItems.
     */
    data: XOR<MealPlanItemUpdateManyMutationInput, MealPlanItemUncheckedUpdateManyInput>
    /**
     * Filter which MealPlanItems to update
     */
    where?: MealPlanItemWhereInput
    /**
     * Limit how many MealPlanItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MealPlanItem upsert
   */
  export type MealPlanItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlanItem
     */
    select?: MealPlanItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealPlanItem
     */
    omit?: MealPlanItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanItemInclude<ExtArgs> | null
    /**
     * The filter to search for the MealPlanItem to update in case it exists.
     */
    where: MealPlanItemWhereUniqueInput
    /**
     * In case the MealPlanItem found by the `where` argument doesn't exist, create a new MealPlanItem with this data.
     */
    create: XOR<MealPlanItemCreateInput, MealPlanItemUncheckedCreateInput>
    /**
     * In case the MealPlanItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MealPlanItemUpdateInput, MealPlanItemUncheckedUpdateInput>
  }

  /**
   * MealPlanItem delete
   */
  export type MealPlanItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlanItem
     */
    select?: MealPlanItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealPlanItem
     */
    omit?: MealPlanItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanItemInclude<ExtArgs> | null
    /**
     * Filter which MealPlanItem to delete.
     */
    where: MealPlanItemWhereUniqueInput
  }

  /**
   * MealPlanItem deleteMany
   */
  export type MealPlanItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MealPlanItems to delete
     */
    where?: MealPlanItemWhereInput
    /**
     * Limit how many MealPlanItems to delete.
     */
    limit?: number
  }

  /**
   * MealPlanItem without action
   */
  export type MealPlanItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealPlanItem
     */
    select?: MealPlanItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MealPlanItem
     */
    omit?: MealPlanItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealPlanItemInclude<ExtArgs> | null
  }


  /**
   * Model ShoppingList
   */

  export type AggregateShoppingList = {
    _count: ShoppingListCountAggregateOutputType | null
    _min: ShoppingListMinAggregateOutputType | null
    _max: ShoppingListMaxAggregateOutputType | null
  }

  export type ShoppingListMinAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShoppingListMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShoppingListCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    items: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ShoppingListMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShoppingListMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShoppingListCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    items?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ShoppingListAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShoppingList to aggregate.
     */
    where?: ShoppingListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingLists to fetch.
     */
    orderBy?: ShoppingListOrderByWithRelationInput | ShoppingListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShoppingListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShoppingLists
    **/
    _count?: true | ShoppingListCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShoppingListMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShoppingListMaxAggregateInputType
  }

  export type GetShoppingListAggregateType<T extends ShoppingListAggregateArgs> = {
        [P in keyof T & keyof AggregateShoppingList]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShoppingList[P]>
      : GetScalarType<T[P], AggregateShoppingList[P]>
  }




  export type ShoppingListGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShoppingListWhereInput
    orderBy?: ShoppingListOrderByWithAggregationInput | ShoppingListOrderByWithAggregationInput[]
    by: ShoppingListScalarFieldEnum[] | ShoppingListScalarFieldEnum
    having?: ShoppingListScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShoppingListCountAggregateInputType | true
    _min?: ShoppingListMinAggregateInputType
    _max?: ShoppingListMaxAggregateInputType
  }

  export type ShoppingListGroupByOutputType = {
    id: string
    userId: string
    name: string
    items: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: ShoppingListCountAggregateOutputType | null
    _min: ShoppingListMinAggregateOutputType | null
    _max: ShoppingListMaxAggregateOutputType | null
  }

  type GetShoppingListGroupByPayload<T extends ShoppingListGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShoppingListGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShoppingListGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShoppingListGroupByOutputType[P]>
            : GetScalarType<T[P], ShoppingListGroupByOutputType[P]>
        }
      >
    >


  export type ShoppingListSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    items?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shoppingList"]>

  export type ShoppingListSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    items?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shoppingList"]>

  export type ShoppingListSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    items?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shoppingList"]>

  export type ShoppingListSelectScalar = {
    id?: boolean
    userId?: boolean
    name?: boolean
    items?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ShoppingListOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "name" | "items" | "createdAt" | "updatedAt", ExtArgs["result"]["shoppingList"]>
  export type ShoppingListInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ShoppingListIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ShoppingListIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ShoppingListPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShoppingList"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      name: string
      items: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["shoppingList"]>
    composites: {}
  }

  type ShoppingListGetPayload<S extends boolean | null | undefined | ShoppingListDefaultArgs> = $Result.GetResult<Prisma.$ShoppingListPayload, S>

  type ShoppingListCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ShoppingListFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ShoppingListCountAggregateInputType | true
    }

  export interface ShoppingListDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShoppingList'], meta: { name: 'ShoppingList' } }
    /**
     * Find zero or one ShoppingList that matches the filter.
     * @param {ShoppingListFindUniqueArgs} args - Arguments to find a ShoppingList
     * @example
     * // Get one ShoppingList
     * const shoppingList = await prisma.shoppingList.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShoppingListFindUniqueArgs>(args: SelectSubset<T, ShoppingListFindUniqueArgs<ExtArgs>>): Prisma__ShoppingListClient<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ShoppingList that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ShoppingListFindUniqueOrThrowArgs} args - Arguments to find a ShoppingList
     * @example
     * // Get one ShoppingList
     * const shoppingList = await prisma.shoppingList.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShoppingListFindUniqueOrThrowArgs>(args: SelectSubset<T, ShoppingListFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShoppingListClient<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShoppingList that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingListFindFirstArgs} args - Arguments to find a ShoppingList
     * @example
     * // Get one ShoppingList
     * const shoppingList = await prisma.shoppingList.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShoppingListFindFirstArgs>(args?: SelectSubset<T, ShoppingListFindFirstArgs<ExtArgs>>): Prisma__ShoppingListClient<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShoppingList that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingListFindFirstOrThrowArgs} args - Arguments to find a ShoppingList
     * @example
     * // Get one ShoppingList
     * const shoppingList = await prisma.shoppingList.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShoppingListFindFirstOrThrowArgs>(args?: SelectSubset<T, ShoppingListFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShoppingListClient<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ShoppingLists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingListFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShoppingLists
     * const shoppingLists = await prisma.shoppingList.findMany()
     * 
     * // Get first 10 ShoppingLists
     * const shoppingLists = await prisma.shoppingList.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shoppingListWithIdOnly = await prisma.shoppingList.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShoppingListFindManyArgs>(args?: SelectSubset<T, ShoppingListFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ShoppingList.
     * @param {ShoppingListCreateArgs} args - Arguments to create a ShoppingList.
     * @example
     * // Create one ShoppingList
     * const ShoppingList = await prisma.shoppingList.create({
     *   data: {
     *     // ... data to create a ShoppingList
     *   }
     * })
     * 
     */
    create<T extends ShoppingListCreateArgs>(args: SelectSubset<T, ShoppingListCreateArgs<ExtArgs>>): Prisma__ShoppingListClient<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ShoppingLists.
     * @param {ShoppingListCreateManyArgs} args - Arguments to create many ShoppingLists.
     * @example
     * // Create many ShoppingLists
     * const shoppingList = await prisma.shoppingList.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShoppingListCreateManyArgs>(args?: SelectSubset<T, ShoppingListCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ShoppingLists and returns the data saved in the database.
     * @param {ShoppingListCreateManyAndReturnArgs} args - Arguments to create many ShoppingLists.
     * @example
     * // Create many ShoppingLists
     * const shoppingList = await prisma.shoppingList.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ShoppingLists and only return the `id`
     * const shoppingListWithIdOnly = await prisma.shoppingList.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShoppingListCreateManyAndReturnArgs>(args?: SelectSubset<T, ShoppingListCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ShoppingList.
     * @param {ShoppingListDeleteArgs} args - Arguments to delete one ShoppingList.
     * @example
     * // Delete one ShoppingList
     * const ShoppingList = await prisma.shoppingList.delete({
     *   where: {
     *     // ... filter to delete one ShoppingList
     *   }
     * })
     * 
     */
    delete<T extends ShoppingListDeleteArgs>(args: SelectSubset<T, ShoppingListDeleteArgs<ExtArgs>>): Prisma__ShoppingListClient<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ShoppingList.
     * @param {ShoppingListUpdateArgs} args - Arguments to update one ShoppingList.
     * @example
     * // Update one ShoppingList
     * const shoppingList = await prisma.shoppingList.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShoppingListUpdateArgs>(args: SelectSubset<T, ShoppingListUpdateArgs<ExtArgs>>): Prisma__ShoppingListClient<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ShoppingLists.
     * @param {ShoppingListDeleteManyArgs} args - Arguments to filter ShoppingLists to delete.
     * @example
     * // Delete a few ShoppingLists
     * const { count } = await prisma.shoppingList.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShoppingListDeleteManyArgs>(args?: SelectSubset<T, ShoppingListDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShoppingLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingListUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShoppingLists
     * const shoppingList = await prisma.shoppingList.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShoppingListUpdateManyArgs>(args: SelectSubset<T, ShoppingListUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShoppingLists and returns the data updated in the database.
     * @param {ShoppingListUpdateManyAndReturnArgs} args - Arguments to update many ShoppingLists.
     * @example
     * // Update many ShoppingLists
     * const shoppingList = await prisma.shoppingList.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ShoppingLists and only return the `id`
     * const shoppingListWithIdOnly = await prisma.shoppingList.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ShoppingListUpdateManyAndReturnArgs>(args: SelectSubset<T, ShoppingListUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ShoppingList.
     * @param {ShoppingListUpsertArgs} args - Arguments to update or create a ShoppingList.
     * @example
     * // Update or create a ShoppingList
     * const shoppingList = await prisma.shoppingList.upsert({
     *   create: {
     *     // ... data to create a ShoppingList
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShoppingList we want to update
     *   }
     * })
     */
    upsert<T extends ShoppingListUpsertArgs>(args: SelectSubset<T, ShoppingListUpsertArgs<ExtArgs>>): Prisma__ShoppingListClient<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ShoppingLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingListCountArgs} args - Arguments to filter ShoppingLists to count.
     * @example
     * // Count the number of ShoppingLists
     * const count = await prisma.shoppingList.count({
     *   where: {
     *     // ... the filter for the ShoppingLists we want to count
     *   }
     * })
    **/
    count<T extends ShoppingListCountArgs>(
      args?: Subset<T, ShoppingListCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShoppingListCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShoppingList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingListAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShoppingListAggregateArgs>(args: Subset<T, ShoppingListAggregateArgs>): Prisma.PrismaPromise<GetShoppingListAggregateType<T>>

    /**
     * Group by ShoppingList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingListGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShoppingListGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShoppingListGroupByArgs['orderBy'] }
        : { orderBy?: ShoppingListGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShoppingListGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShoppingListGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShoppingList model
   */
  readonly fields: ShoppingListFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShoppingList.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShoppingListClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShoppingList model
   */
  interface ShoppingListFieldRefs {
    readonly id: FieldRef<"ShoppingList", 'String'>
    readonly userId: FieldRef<"ShoppingList", 'String'>
    readonly name: FieldRef<"ShoppingList", 'String'>
    readonly items: FieldRef<"ShoppingList", 'Json'>
    readonly createdAt: FieldRef<"ShoppingList", 'DateTime'>
    readonly updatedAt: FieldRef<"ShoppingList", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ShoppingList findUnique
   */
  export type ShoppingListFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingList
     */
    omit?: ShoppingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingList to fetch.
     */
    where: ShoppingListWhereUniqueInput
  }

  /**
   * ShoppingList findUniqueOrThrow
   */
  export type ShoppingListFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingList
     */
    omit?: ShoppingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingList to fetch.
     */
    where: ShoppingListWhereUniqueInput
  }

  /**
   * ShoppingList findFirst
   */
  export type ShoppingListFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingList
     */
    omit?: ShoppingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingList to fetch.
     */
    where?: ShoppingListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingLists to fetch.
     */
    orderBy?: ShoppingListOrderByWithRelationInput | ShoppingListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShoppingLists.
     */
    cursor?: ShoppingListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShoppingLists.
     */
    distinct?: ShoppingListScalarFieldEnum | ShoppingListScalarFieldEnum[]
  }

  /**
   * ShoppingList findFirstOrThrow
   */
  export type ShoppingListFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingList
     */
    omit?: ShoppingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingList to fetch.
     */
    where?: ShoppingListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingLists to fetch.
     */
    orderBy?: ShoppingListOrderByWithRelationInput | ShoppingListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShoppingLists.
     */
    cursor?: ShoppingListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShoppingLists.
     */
    distinct?: ShoppingListScalarFieldEnum | ShoppingListScalarFieldEnum[]
  }

  /**
   * ShoppingList findMany
   */
  export type ShoppingListFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingList
     */
    omit?: ShoppingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingLists to fetch.
     */
    where?: ShoppingListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingLists to fetch.
     */
    orderBy?: ShoppingListOrderByWithRelationInput | ShoppingListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShoppingLists.
     */
    cursor?: ShoppingListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingLists.
     */
    skip?: number
    distinct?: ShoppingListScalarFieldEnum | ShoppingListScalarFieldEnum[]
  }

  /**
   * ShoppingList create
   */
  export type ShoppingListCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingList
     */
    omit?: ShoppingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    /**
     * The data needed to create a ShoppingList.
     */
    data: XOR<ShoppingListCreateInput, ShoppingListUncheckedCreateInput>
  }

  /**
   * ShoppingList createMany
   */
  export type ShoppingListCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShoppingLists.
     */
    data: ShoppingListCreateManyInput | ShoppingListCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShoppingList createManyAndReturn
   */
  export type ShoppingListCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingList
     */
    omit?: ShoppingListOmit<ExtArgs> | null
    /**
     * The data used to create many ShoppingLists.
     */
    data: ShoppingListCreateManyInput | ShoppingListCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShoppingList update
   */
  export type ShoppingListUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingList
     */
    omit?: ShoppingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    /**
     * The data needed to update a ShoppingList.
     */
    data: XOR<ShoppingListUpdateInput, ShoppingListUncheckedUpdateInput>
    /**
     * Choose, which ShoppingList to update.
     */
    where: ShoppingListWhereUniqueInput
  }

  /**
   * ShoppingList updateMany
   */
  export type ShoppingListUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShoppingLists.
     */
    data: XOR<ShoppingListUpdateManyMutationInput, ShoppingListUncheckedUpdateManyInput>
    /**
     * Filter which ShoppingLists to update
     */
    where?: ShoppingListWhereInput
    /**
     * Limit how many ShoppingLists to update.
     */
    limit?: number
  }

  /**
   * ShoppingList updateManyAndReturn
   */
  export type ShoppingListUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingList
     */
    omit?: ShoppingListOmit<ExtArgs> | null
    /**
     * The data used to update ShoppingLists.
     */
    data: XOR<ShoppingListUpdateManyMutationInput, ShoppingListUncheckedUpdateManyInput>
    /**
     * Filter which ShoppingLists to update
     */
    where?: ShoppingListWhereInput
    /**
     * Limit how many ShoppingLists to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShoppingList upsert
   */
  export type ShoppingListUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingList
     */
    omit?: ShoppingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    /**
     * The filter to search for the ShoppingList to update in case it exists.
     */
    where: ShoppingListWhereUniqueInput
    /**
     * In case the ShoppingList found by the `where` argument doesn't exist, create a new ShoppingList with this data.
     */
    create: XOR<ShoppingListCreateInput, ShoppingListUncheckedCreateInput>
    /**
     * In case the ShoppingList was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShoppingListUpdateInput, ShoppingListUncheckedUpdateInput>
  }

  /**
   * ShoppingList delete
   */
  export type ShoppingListDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingList
     */
    omit?: ShoppingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    /**
     * Filter which ShoppingList to delete.
     */
    where: ShoppingListWhereUniqueInput
  }

  /**
   * ShoppingList deleteMany
   */
  export type ShoppingListDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShoppingLists to delete
     */
    where?: ShoppingListWhereInput
    /**
     * Limit how many ShoppingLists to delete.
     */
    limit?: number
  }

  /**
   * ShoppingList without action
   */
  export type ShoppingListDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingList
     */
    omit?: ShoppingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
  }


  /**
   * Model TrendingRecipe
   */

  export type AggregateTrendingRecipe = {
    _count: TrendingRecipeCountAggregateOutputType | null
    _avg: TrendingRecipeAvgAggregateOutputType | null
    _sum: TrendingRecipeSumAggregateOutputType | null
    _min: TrendingRecipeMinAggregateOutputType | null
    _max: TrendingRecipeMaxAggregateOutputType | null
  }

  export type TrendingRecipeAvgAggregateOutputType = {
    score: number | null
  }

  export type TrendingRecipeSumAggregateOutputType = {
    score: number | null
  }

  export type TrendingRecipeMinAggregateOutputType = {
    id: string | null
    recipeId: string | null
    score: number | null
    trendingAt: Date | null
  }

  export type TrendingRecipeMaxAggregateOutputType = {
    id: string | null
    recipeId: string | null
    score: number | null
    trendingAt: Date | null
  }

  export type TrendingRecipeCountAggregateOutputType = {
    id: number
    recipeId: number
    score: number
    trendingAt: number
    _all: number
  }


  export type TrendingRecipeAvgAggregateInputType = {
    score?: true
  }

  export type TrendingRecipeSumAggregateInputType = {
    score?: true
  }

  export type TrendingRecipeMinAggregateInputType = {
    id?: true
    recipeId?: true
    score?: true
    trendingAt?: true
  }

  export type TrendingRecipeMaxAggregateInputType = {
    id?: true
    recipeId?: true
    score?: true
    trendingAt?: true
  }

  export type TrendingRecipeCountAggregateInputType = {
    id?: true
    recipeId?: true
    score?: true
    trendingAt?: true
    _all?: true
  }

  export type TrendingRecipeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TrendingRecipe to aggregate.
     */
    where?: TrendingRecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrendingRecipes to fetch.
     */
    orderBy?: TrendingRecipeOrderByWithRelationInput | TrendingRecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TrendingRecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrendingRecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrendingRecipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TrendingRecipes
    **/
    _count?: true | TrendingRecipeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrendingRecipeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrendingRecipeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrendingRecipeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrendingRecipeMaxAggregateInputType
  }

  export type GetTrendingRecipeAggregateType<T extends TrendingRecipeAggregateArgs> = {
        [P in keyof T & keyof AggregateTrendingRecipe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrendingRecipe[P]>
      : GetScalarType<T[P], AggregateTrendingRecipe[P]>
  }




  export type TrendingRecipeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrendingRecipeWhereInput
    orderBy?: TrendingRecipeOrderByWithAggregationInput | TrendingRecipeOrderByWithAggregationInput[]
    by: TrendingRecipeScalarFieldEnum[] | TrendingRecipeScalarFieldEnum
    having?: TrendingRecipeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrendingRecipeCountAggregateInputType | true
    _avg?: TrendingRecipeAvgAggregateInputType
    _sum?: TrendingRecipeSumAggregateInputType
    _min?: TrendingRecipeMinAggregateInputType
    _max?: TrendingRecipeMaxAggregateInputType
  }

  export type TrendingRecipeGroupByOutputType = {
    id: string
    recipeId: string
    score: number
    trendingAt: Date
    _count: TrendingRecipeCountAggregateOutputType | null
    _avg: TrendingRecipeAvgAggregateOutputType | null
    _sum: TrendingRecipeSumAggregateOutputType | null
    _min: TrendingRecipeMinAggregateOutputType | null
    _max: TrendingRecipeMaxAggregateOutputType | null
  }

  type GetTrendingRecipeGroupByPayload<T extends TrendingRecipeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrendingRecipeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrendingRecipeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrendingRecipeGroupByOutputType[P]>
            : GetScalarType<T[P], TrendingRecipeGroupByOutputType[P]>
        }
      >
    >


  export type TrendingRecipeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipeId?: boolean
    score?: boolean
    trendingAt?: boolean
  }, ExtArgs["result"]["trendingRecipe"]>

  export type TrendingRecipeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipeId?: boolean
    score?: boolean
    trendingAt?: boolean
  }, ExtArgs["result"]["trendingRecipe"]>

  export type TrendingRecipeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipeId?: boolean
    score?: boolean
    trendingAt?: boolean
  }, ExtArgs["result"]["trendingRecipe"]>

  export type TrendingRecipeSelectScalar = {
    id?: boolean
    recipeId?: boolean
    score?: boolean
    trendingAt?: boolean
  }

  export type TrendingRecipeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "recipeId" | "score" | "trendingAt", ExtArgs["result"]["trendingRecipe"]>

  export type $TrendingRecipePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TrendingRecipe"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      recipeId: string
      score: number
      trendingAt: Date
    }, ExtArgs["result"]["trendingRecipe"]>
    composites: {}
  }

  type TrendingRecipeGetPayload<S extends boolean | null | undefined | TrendingRecipeDefaultArgs> = $Result.GetResult<Prisma.$TrendingRecipePayload, S>

  type TrendingRecipeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TrendingRecipeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TrendingRecipeCountAggregateInputType | true
    }

  export interface TrendingRecipeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TrendingRecipe'], meta: { name: 'TrendingRecipe' } }
    /**
     * Find zero or one TrendingRecipe that matches the filter.
     * @param {TrendingRecipeFindUniqueArgs} args - Arguments to find a TrendingRecipe
     * @example
     * // Get one TrendingRecipe
     * const trendingRecipe = await prisma.trendingRecipe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TrendingRecipeFindUniqueArgs>(args: SelectSubset<T, TrendingRecipeFindUniqueArgs<ExtArgs>>): Prisma__TrendingRecipeClient<$Result.GetResult<Prisma.$TrendingRecipePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TrendingRecipe that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TrendingRecipeFindUniqueOrThrowArgs} args - Arguments to find a TrendingRecipe
     * @example
     * // Get one TrendingRecipe
     * const trendingRecipe = await prisma.trendingRecipe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TrendingRecipeFindUniqueOrThrowArgs>(args: SelectSubset<T, TrendingRecipeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TrendingRecipeClient<$Result.GetResult<Prisma.$TrendingRecipePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TrendingRecipe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendingRecipeFindFirstArgs} args - Arguments to find a TrendingRecipe
     * @example
     * // Get one TrendingRecipe
     * const trendingRecipe = await prisma.trendingRecipe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TrendingRecipeFindFirstArgs>(args?: SelectSubset<T, TrendingRecipeFindFirstArgs<ExtArgs>>): Prisma__TrendingRecipeClient<$Result.GetResult<Prisma.$TrendingRecipePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TrendingRecipe that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendingRecipeFindFirstOrThrowArgs} args - Arguments to find a TrendingRecipe
     * @example
     * // Get one TrendingRecipe
     * const trendingRecipe = await prisma.trendingRecipe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TrendingRecipeFindFirstOrThrowArgs>(args?: SelectSubset<T, TrendingRecipeFindFirstOrThrowArgs<ExtArgs>>): Prisma__TrendingRecipeClient<$Result.GetResult<Prisma.$TrendingRecipePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TrendingRecipes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendingRecipeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TrendingRecipes
     * const trendingRecipes = await prisma.trendingRecipe.findMany()
     * 
     * // Get first 10 TrendingRecipes
     * const trendingRecipes = await prisma.trendingRecipe.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trendingRecipeWithIdOnly = await prisma.trendingRecipe.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TrendingRecipeFindManyArgs>(args?: SelectSubset<T, TrendingRecipeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrendingRecipePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TrendingRecipe.
     * @param {TrendingRecipeCreateArgs} args - Arguments to create a TrendingRecipe.
     * @example
     * // Create one TrendingRecipe
     * const TrendingRecipe = await prisma.trendingRecipe.create({
     *   data: {
     *     // ... data to create a TrendingRecipe
     *   }
     * })
     * 
     */
    create<T extends TrendingRecipeCreateArgs>(args: SelectSubset<T, TrendingRecipeCreateArgs<ExtArgs>>): Prisma__TrendingRecipeClient<$Result.GetResult<Prisma.$TrendingRecipePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TrendingRecipes.
     * @param {TrendingRecipeCreateManyArgs} args - Arguments to create many TrendingRecipes.
     * @example
     * // Create many TrendingRecipes
     * const trendingRecipe = await prisma.trendingRecipe.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TrendingRecipeCreateManyArgs>(args?: SelectSubset<T, TrendingRecipeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TrendingRecipes and returns the data saved in the database.
     * @param {TrendingRecipeCreateManyAndReturnArgs} args - Arguments to create many TrendingRecipes.
     * @example
     * // Create many TrendingRecipes
     * const trendingRecipe = await prisma.trendingRecipe.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TrendingRecipes and only return the `id`
     * const trendingRecipeWithIdOnly = await prisma.trendingRecipe.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TrendingRecipeCreateManyAndReturnArgs>(args?: SelectSubset<T, TrendingRecipeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrendingRecipePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TrendingRecipe.
     * @param {TrendingRecipeDeleteArgs} args - Arguments to delete one TrendingRecipe.
     * @example
     * // Delete one TrendingRecipe
     * const TrendingRecipe = await prisma.trendingRecipe.delete({
     *   where: {
     *     // ... filter to delete one TrendingRecipe
     *   }
     * })
     * 
     */
    delete<T extends TrendingRecipeDeleteArgs>(args: SelectSubset<T, TrendingRecipeDeleteArgs<ExtArgs>>): Prisma__TrendingRecipeClient<$Result.GetResult<Prisma.$TrendingRecipePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TrendingRecipe.
     * @param {TrendingRecipeUpdateArgs} args - Arguments to update one TrendingRecipe.
     * @example
     * // Update one TrendingRecipe
     * const trendingRecipe = await prisma.trendingRecipe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TrendingRecipeUpdateArgs>(args: SelectSubset<T, TrendingRecipeUpdateArgs<ExtArgs>>): Prisma__TrendingRecipeClient<$Result.GetResult<Prisma.$TrendingRecipePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TrendingRecipes.
     * @param {TrendingRecipeDeleteManyArgs} args - Arguments to filter TrendingRecipes to delete.
     * @example
     * // Delete a few TrendingRecipes
     * const { count } = await prisma.trendingRecipe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TrendingRecipeDeleteManyArgs>(args?: SelectSubset<T, TrendingRecipeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TrendingRecipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendingRecipeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TrendingRecipes
     * const trendingRecipe = await prisma.trendingRecipe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TrendingRecipeUpdateManyArgs>(args: SelectSubset<T, TrendingRecipeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TrendingRecipes and returns the data updated in the database.
     * @param {TrendingRecipeUpdateManyAndReturnArgs} args - Arguments to update many TrendingRecipes.
     * @example
     * // Update many TrendingRecipes
     * const trendingRecipe = await prisma.trendingRecipe.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TrendingRecipes and only return the `id`
     * const trendingRecipeWithIdOnly = await prisma.trendingRecipe.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TrendingRecipeUpdateManyAndReturnArgs>(args: SelectSubset<T, TrendingRecipeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrendingRecipePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TrendingRecipe.
     * @param {TrendingRecipeUpsertArgs} args - Arguments to update or create a TrendingRecipe.
     * @example
     * // Update or create a TrendingRecipe
     * const trendingRecipe = await prisma.trendingRecipe.upsert({
     *   create: {
     *     // ... data to create a TrendingRecipe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TrendingRecipe we want to update
     *   }
     * })
     */
    upsert<T extends TrendingRecipeUpsertArgs>(args: SelectSubset<T, TrendingRecipeUpsertArgs<ExtArgs>>): Prisma__TrendingRecipeClient<$Result.GetResult<Prisma.$TrendingRecipePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TrendingRecipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendingRecipeCountArgs} args - Arguments to filter TrendingRecipes to count.
     * @example
     * // Count the number of TrendingRecipes
     * const count = await prisma.trendingRecipe.count({
     *   where: {
     *     // ... the filter for the TrendingRecipes we want to count
     *   }
     * })
    **/
    count<T extends TrendingRecipeCountArgs>(
      args?: Subset<T, TrendingRecipeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrendingRecipeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TrendingRecipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendingRecipeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrendingRecipeAggregateArgs>(args: Subset<T, TrendingRecipeAggregateArgs>): Prisma.PrismaPromise<GetTrendingRecipeAggregateType<T>>

    /**
     * Group by TrendingRecipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendingRecipeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrendingRecipeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrendingRecipeGroupByArgs['orderBy'] }
        : { orderBy?: TrendingRecipeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrendingRecipeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrendingRecipeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TrendingRecipe model
   */
  readonly fields: TrendingRecipeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TrendingRecipe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TrendingRecipeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TrendingRecipe model
   */
  interface TrendingRecipeFieldRefs {
    readonly id: FieldRef<"TrendingRecipe", 'String'>
    readonly recipeId: FieldRef<"TrendingRecipe", 'String'>
    readonly score: FieldRef<"TrendingRecipe", 'Float'>
    readonly trendingAt: FieldRef<"TrendingRecipe", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TrendingRecipe findUnique
   */
  export type TrendingRecipeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingRecipe
     */
    select?: TrendingRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingRecipe
     */
    omit?: TrendingRecipeOmit<ExtArgs> | null
    /**
     * Filter, which TrendingRecipe to fetch.
     */
    where: TrendingRecipeWhereUniqueInput
  }

  /**
   * TrendingRecipe findUniqueOrThrow
   */
  export type TrendingRecipeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingRecipe
     */
    select?: TrendingRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingRecipe
     */
    omit?: TrendingRecipeOmit<ExtArgs> | null
    /**
     * Filter, which TrendingRecipe to fetch.
     */
    where: TrendingRecipeWhereUniqueInput
  }

  /**
   * TrendingRecipe findFirst
   */
  export type TrendingRecipeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingRecipe
     */
    select?: TrendingRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingRecipe
     */
    omit?: TrendingRecipeOmit<ExtArgs> | null
    /**
     * Filter, which TrendingRecipe to fetch.
     */
    where?: TrendingRecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrendingRecipes to fetch.
     */
    orderBy?: TrendingRecipeOrderByWithRelationInput | TrendingRecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrendingRecipes.
     */
    cursor?: TrendingRecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrendingRecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrendingRecipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrendingRecipes.
     */
    distinct?: TrendingRecipeScalarFieldEnum | TrendingRecipeScalarFieldEnum[]
  }

  /**
   * TrendingRecipe findFirstOrThrow
   */
  export type TrendingRecipeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingRecipe
     */
    select?: TrendingRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingRecipe
     */
    omit?: TrendingRecipeOmit<ExtArgs> | null
    /**
     * Filter, which TrendingRecipe to fetch.
     */
    where?: TrendingRecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrendingRecipes to fetch.
     */
    orderBy?: TrendingRecipeOrderByWithRelationInput | TrendingRecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrendingRecipes.
     */
    cursor?: TrendingRecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrendingRecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrendingRecipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrendingRecipes.
     */
    distinct?: TrendingRecipeScalarFieldEnum | TrendingRecipeScalarFieldEnum[]
  }

  /**
   * TrendingRecipe findMany
   */
  export type TrendingRecipeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingRecipe
     */
    select?: TrendingRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingRecipe
     */
    omit?: TrendingRecipeOmit<ExtArgs> | null
    /**
     * Filter, which TrendingRecipes to fetch.
     */
    where?: TrendingRecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrendingRecipes to fetch.
     */
    orderBy?: TrendingRecipeOrderByWithRelationInput | TrendingRecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TrendingRecipes.
     */
    cursor?: TrendingRecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrendingRecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrendingRecipes.
     */
    skip?: number
    distinct?: TrendingRecipeScalarFieldEnum | TrendingRecipeScalarFieldEnum[]
  }

  /**
   * TrendingRecipe create
   */
  export type TrendingRecipeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingRecipe
     */
    select?: TrendingRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingRecipe
     */
    omit?: TrendingRecipeOmit<ExtArgs> | null
    /**
     * The data needed to create a TrendingRecipe.
     */
    data: XOR<TrendingRecipeCreateInput, TrendingRecipeUncheckedCreateInput>
  }

  /**
   * TrendingRecipe createMany
   */
  export type TrendingRecipeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TrendingRecipes.
     */
    data: TrendingRecipeCreateManyInput | TrendingRecipeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TrendingRecipe createManyAndReturn
   */
  export type TrendingRecipeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingRecipe
     */
    select?: TrendingRecipeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingRecipe
     */
    omit?: TrendingRecipeOmit<ExtArgs> | null
    /**
     * The data used to create many TrendingRecipes.
     */
    data: TrendingRecipeCreateManyInput | TrendingRecipeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TrendingRecipe update
   */
  export type TrendingRecipeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingRecipe
     */
    select?: TrendingRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingRecipe
     */
    omit?: TrendingRecipeOmit<ExtArgs> | null
    /**
     * The data needed to update a TrendingRecipe.
     */
    data: XOR<TrendingRecipeUpdateInput, TrendingRecipeUncheckedUpdateInput>
    /**
     * Choose, which TrendingRecipe to update.
     */
    where: TrendingRecipeWhereUniqueInput
  }

  /**
   * TrendingRecipe updateMany
   */
  export type TrendingRecipeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TrendingRecipes.
     */
    data: XOR<TrendingRecipeUpdateManyMutationInput, TrendingRecipeUncheckedUpdateManyInput>
    /**
     * Filter which TrendingRecipes to update
     */
    where?: TrendingRecipeWhereInput
    /**
     * Limit how many TrendingRecipes to update.
     */
    limit?: number
  }

  /**
   * TrendingRecipe updateManyAndReturn
   */
  export type TrendingRecipeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingRecipe
     */
    select?: TrendingRecipeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingRecipe
     */
    omit?: TrendingRecipeOmit<ExtArgs> | null
    /**
     * The data used to update TrendingRecipes.
     */
    data: XOR<TrendingRecipeUpdateManyMutationInput, TrendingRecipeUncheckedUpdateManyInput>
    /**
     * Filter which TrendingRecipes to update
     */
    where?: TrendingRecipeWhereInput
    /**
     * Limit how many TrendingRecipes to update.
     */
    limit?: number
  }

  /**
   * TrendingRecipe upsert
   */
  export type TrendingRecipeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingRecipe
     */
    select?: TrendingRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingRecipe
     */
    omit?: TrendingRecipeOmit<ExtArgs> | null
    /**
     * The filter to search for the TrendingRecipe to update in case it exists.
     */
    where: TrendingRecipeWhereUniqueInput
    /**
     * In case the TrendingRecipe found by the `where` argument doesn't exist, create a new TrendingRecipe with this data.
     */
    create: XOR<TrendingRecipeCreateInput, TrendingRecipeUncheckedCreateInput>
    /**
     * In case the TrendingRecipe was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TrendingRecipeUpdateInput, TrendingRecipeUncheckedUpdateInput>
  }

  /**
   * TrendingRecipe delete
   */
  export type TrendingRecipeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingRecipe
     */
    select?: TrendingRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingRecipe
     */
    omit?: TrendingRecipeOmit<ExtArgs> | null
    /**
     * Filter which TrendingRecipe to delete.
     */
    where: TrendingRecipeWhereUniqueInput
  }

  /**
   * TrendingRecipe deleteMany
   */
  export type TrendingRecipeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TrendingRecipes to delete
     */
    where?: TrendingRecipeWhereInput
    /**
     * Limit how many TrendingRecipes to delete.
     */
    limit?: number
  }

  /**
   * TrendingRecipe without action
   */
  export type TrendingRecipeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrendingRecipe
     */
    select?: TrendingRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrendingRecipe
     */
    omit?: TrendingRecipeOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    name: 'name',
    bio: 'bio',
    avatar: 'avatar',
    verified: 'verified',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const FoodImageScalarFieldEnum: {
    id: 'id',
    filename: 'filename',
    base64: 'base64',
    uploadedAt: 'uploadedAt',
    analysis: 'analysis',
    userId: 'userId',
    recipeId: 'recipeId'
  };

  export type FoodImageScalarFieldEnum = (typeof FoodImageScalarFieldEnum)[keyof typeof FoodImageScalarFieldEnum]


  export const RecipeScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    instructions: 'instructions',
    prepTime: 'prepTime',
    cookTime: 'cookTime',
    servings: 'servings',
    difficulty: 'difficulty',
    cuisine: 'cuisine',
    category: 'category',
    images: 'images',
    mainImage: 'mainImage',
    aiTags: 'aiTags',
    userTags: 'userTags',
    allTags: 'allTags',
    pairings: 'pairings',
    nutrition: 'nutrition',
    likesCount: 'likesCount',
    savesCount: 'savesCount',
    madeCount: 'madeCount',
    viewsCount: 'viewsCount',
    avgRating: 'avgRating',
    reviewsCount: 'reviewsCount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    publishedAt: 'publishedAt',
    isPublished: 'isPublished',
    authorId: 'authorId'
  };

  export type RecipeScalarFieldEnum = (typeof RecipeScalarFieldEnum)[keyof typeof RecipeScalarFieldEnum]


  export const IngredientScalarFieldEnum: {
    id: 'id',
    name: 'name',
    category: 'category',
    commonUnit: 'commonUnit',
    nutritionPer100g: 'nutritionPer100g',
    aliases: 'aliases',
    createdAt: 'createdAt'
  };

  export type IngredientScalarFieldEnum = (typeof IngredientScalarFieldEnum)[keyof typeof IngredientScalarFieldEnum]


  export const RecipeIngredientScalarFieldEnum: {
    id: 'id',
    recipeId: 'recipeId',
    ingredientId: 'ingredientId',
    amount: 'amount',
    unit: 'unit',
    preparation: 'preparation',
    optional: 'optional'
  };

  export type RecipeIngredientScalarFieldEnum = (typeof RecipeIngredientScalarFieldEnum)[keyof typeof RecipeIngredientScalarFieldEnum]


  export const RecipeLikeScalarFieldEnum: {
    id: 'id',
    recipeId: 'recipeId',
    userId: 'userId',
    likedAt: 'likedAt'
  };

  export type RecipeLikeScalarFieldEnum = (typeof RecipeLikeScalarFieldEnum)[keyof typeof RecipeLikeScalarFieldEnum]


  export const SavedRecipeScalarFieldEnum: {
    id: 'id',
    recipeId: 'recipeId',
    userId: 'userId',
    savedAt: 'savedAt',
    notes: 'notes'
  };

  export type SavedRecipeScalarFieldEnum = (typeof SavedRecipeScalarFieldEnum)[keyof typeof SavedRecipeScalarFieldEnum]


  export const RecipeReviewScalarFieldEnum: {
    id: 'id',
    recipeId: 'recipeId',
    userId: 'userId',
    rating: 'rating',
    comment: 'comment',
    images: 'images',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RecipeReviewScalarFieldEnum = (typeof RecipeReviewScalarFieldEnum)[keyof typeof RecipeReviewScalarFieldEnum]


  export const MadeRecipeScalarFieldEnum: {
    id: 'id',
    recipeId: 'recipeId',
    userId: 'userId',
    madeAt: 'madeAt',
    rating: 'rating',
    notes: 'notes',
    images: 'images'
  };

  export type MadeRecipeScalarFieldEnum = (typeof MadeRecipeScalarFieldEnum)[keyof typeof MadeRecipeScalarFieldEnum]


  export const FollowScalarFieldEnum: {
    id: 'id',
    followerId: 'followerId',
    followingId: 'followingId',
    createdAt: 'createdAt'
  };

  export type FollowScalarFieldEnum = (typeof FollowScalarFieldEnum)[keyof typeof FollowScalarFieldEnum]


  export const MealPlanScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    description: 'description',
    startDate: 'startDate',
    endDate: 'endDate',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MealPlanScalarFieldEnum = (typeof MealPlanScalarFieldEnum)[keyof typeof MealPlanScalarFieldEnum]


  export const MealPlanItemScalarFieldEnum: {
    id: 'id',
    mealPlanId: 'mealPlanId',
    recipeId: 'recipeId',
    date: 'date',
    mealType: 'mealType',
    servings: 'servings'
  };

  export type MealPlanItemScalarFieldEnum = (typeof MealPlanItemScalarFieldEnum)[keyof typeof MealPlanItemScalarFieldEnum]


  export const ShoppingListScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    items: 'items',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ShoppingListScalarFieldEnum = (typeof ShoppingListScalarFieldEnum)[keyof typeof ShoppingListScalarFieldEnum]


  export const TrendingRecipeScalarFieldEnum: {
    id: 'id',
    recipeId: 'recipeId',
    score: 'score',
    trendingAt: 'trendingAt'
  };

  export type TrendingRecipeScalarFieldEnum = (typeof TrendingRecipeScalarFieldEnum)[keyof typeof TrendingRecipeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    verified?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    password?: StringNullableFilter<"User"> | string | null
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    recipes?: RecipeListRelationFilter
    savedRecipes?: SavedRecipeListRelationFilter
    recipeLikes?: RecipeLikeListRelationFilter
    recipeReviews?: RecipeReviewListRelationFilter
    madeRecipes?: MadeRecipeListRelationFilter
    mealPlans?: MealPlanListRelationFilter
    foodImages?: FoodImageListRelationFilter
    following?: FollowListRelationFilter
    followers?: FollowListRelationFilter
    shoppingLists?: ShoppingListListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    name?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    verified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    password?: SortOrderInput | SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    recipes?: RecipeOrderByRelationAggregateInput
    savedRecipes?: SavedRecipeOrderByRelationAggregateInput
    recipeLikes?: RecipeLikeOrderByRelationAggregateInput
    recipeReviews?: RecipeReviewOrderByRelationAggregateInput
    madeRecipes?: MadeRecipeOrderByRelationAggregateInput
    mealPlans?: MealPlanOrderByRelationAggregateInput
    foodImages?: FoodImageOrderByRelationAggregateInput
    following?: FollowOrderByRelationAggregateInput
    followers?: FollowOrderByRelationAggregateInput
    shoppingLists?: ShoppingListOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    verified?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    password?: StringNullableFilter<"User"> | string | null
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    recipes?: RecipeListRelationFilter
    savedRecipes?: SavedRecipeListRelationFilter
    recipeLikes?: RecipeLikeListRelationFilter
    recipeReviews?: RecipeReviewListRelationFilter
    madeRecipes?: MadeRecipeListRelationFilter
    mealPlans?: MealPlanListRelationFilter
    foodImages?: FoodImageListRelationFilter
    following?: FollowListRelationFilter
    followers?: FollowListRelationFilter
    shoppingLists?: ShoppingListListRelationFilter
  }, "id" | "email" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    name?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    verified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    password?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    bio?: StringNullableWithAggregatesFilter<"User"> | string | null
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    verified?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionToken?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "sessionToken">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    sessionToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    expires?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type FoodImageWhereInput = {
    AND?: FoodImageWhereInput | FoodImageWhereInput[]
    OR?: FoodImageWhereInput[]
    NOT?: FoodImageWhereInput | FoodImageWhereInput[]
    id?: StringFilter<"FoodImage"> | string
    filename?: StringFilter<"FoodImage"> | string
    base64?: StringFilter<"FoodImage"> | string
    uploadedAt?: DateTimeFilter<"FoodImage"> | Date | string
    analysis?: JsonNullableFilter<"FoodImage">
    userId?: StringNullableFilter<"FoodImage"> | string | null
    recipeId?: StringNullableFilter<"FoodImage"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    recipe?: XOR<RecipeNullableScalarRelationFilter, RecipeWhereInput> | null
  }

  export type FoodImageOrderByWithRelationInput = {
    id?: SortOrder
    filename?: SortOrder
    base64?: SortOrder
    uploadedAt?: SortOrder
    analysis?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    recipeId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    recipe?: RecipeOrderByWithRelationInput
  }

  export type FoodImageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FoodImageWhereInput | FoodImageWhereInput[]
    OR?: FoodImageWhereInput[]
    NOT?: FoodImageWhereInput | FoodImageWhereInput[]
    filename?: StringFilter<"FoodImage"> | string
    base64?: StringFilter<"FoodImage"> | string
    uploadedAt?: DateTimeFilter<"FoodImage"> | Date | string
    analysis?: JsonNullableFilter<"FoodImage">
    userId?: StringNullableFilter<"FoodImage"> | string | null
    recipeId?: StringNullableFilter<"FoodImage"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    recipe?: XOR<RecipeNullableScalarRelationFilter, RecipeWhereInput> | null
  }, "id">

  export type FoodImageOrderByWithAggregationInput = {
    id?: SortOrder
    filename?: SortOrder
    base64?: SortOrder
    uploadedAt?: SortOrder
    analysis?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    recipeId?: SortOrderInput | SortOrder
    _count?: FoodImageCountOrderByAggregateInput
    _max?: FoodImageMaxOrderByAggregateInput
    _min?: FoodImageMinOrderByAggregateInput
  }

  export type FoodImageScalarWhereWithAggregatesInput = {
    AND?: FoodImageScalarWhereWithAggregatesInput | FoodImageScalarWhereWithAggregatesInput[]
    OR?: FoodImageScalarWhereWithAggregatesInput[]
    NOT?: FoodImageScalarWhereWithAggregatesInput | FoodImageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FoodImage"> | string
    filename?: StringWithAggregatesFilter<"FoodImage"> | string
    base64?: StringWithAggregatesFilter<"FoodImage"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"FoodImage"> | Date | string
    analysis?: JsonNullableWithAggregatesFilter<"FoodImage">
    userId?: StringNullableWithAggregatesFilter<"FoodImage"> | string | null
    recipeId?: StringNullableWithAggregatesFilter<"FoodImage"> | string | null
  }

  export type RecipeWhereInput = {
    AND?: RecipeWhereInput | RecipeWhereInput[]
    OR?: RecipeWhereInput[]
    NOT?: RecipeWhereInput | RecipeWhereInput[]
    id?: StringFilter<"Recipe"> | string
    title?: StringFilter<"Recipe"> | string
    description?: StringNullableFilter<"Recipe"> | string | null
    instructions?: JsonFilter<"Recipe">
    prepTime?: IntNullableFilter<"Recipe"> | number | null
    cookTime?: IntNullableFilter<"Recipe"> | number | null
    servings?: IntNullableFilter<"Recipe"> | number | null
    difficulty?: StringNullableFilter<"Recipe"> | string | null
    cuisine?: StringNullableFilter<"Recipe"> | string | null
    category?: StringNullableFilter<"Recipe"> | string | null
    images?: StringNullableListFilter<"Recipe">
    mainImage?: StringNullableFilter<"Recipe"> | string | null
    aiTags?: StringNullableListFilter<"Recipe">
    userTags?: StringNullableListFilter<"Recipe">
    allTags?: StringNullableListFilter<"Recipe">
    pairings?: JsonNullableFilter<"Recipe">
    nutrition?: JsonNullableFilter<"Recipe">
    likesCount?: IntFilter<"Recipe"> | number
    savesCount?: IntFilter<"Recipe"> | number
    madeCount?: IntFilter<"Recipe"> | number
    viewsCount?: IntFilter<"Recipe"> | number
    avgRating?: FloatFilter<"Recipe"> | number
    reviewsCount?: IntFilter<"Recipe"> | number
    createdAt?: DateTimeFilter<"Recipe"> | Date | string
    updatedAt?: DateTimeFilter<"Recipe"> | Date | string
    publishedAt?: DateTimeNullableFilter<"Recipe"> | Date | string | null
    isPublished?: BoolFilter<"Recipe"> | boolean
    authorId?: StringFilter<"Recipe"> | string
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    ingredients?: RecipeIngredientListRelationFilter
    likes?: RecipeLikeListRelationFilter
    saves?: SavedRecipeListRelationFilter
    reviews?: RecipeReviewListRelationFilter
    madeRecipes?: MadeRecipeListRelationFilter
    mealPlanItems?: MealPlanItemListRelationFilter
    foodImages?: FoodImageListRelationFilter
  }

  export type RecipeOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    instructions?: SortOrder
    prepTime?: SortOrderInput | SortOrder
    cookTime?: SortOrderInput | SortOrder
    servings?: SortOrderInput | SortOrder
    difficulty?: SortOrderInput | SortOrder
    cuisine?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    images?: SortOrder
    mainImage?: SortOrderInput | SortOrder
    aiTags?: SortOrder
    userTags?: SortOrder
    allTags?: SortOrder
    pairings?: SortOrderInput | SortOrder
    nutrition?: SortOrderInput | SortOrder
    likesCount?: SortOrder
    savesCount?: SortOrder
    madeCount?: SortOrder
    viewsCount?: SortOrder
    avgRating?: SortOrder
    reviewsCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    publishedAt?: SortOrderInput | SortOrder
    isPublished?: SortOrder
    authorId?: SortOrder
    author?: UserOrderByWithRelationInput
    ingredients?: RecipeIngredientOrderByRelationAggregateInput
    likes?: RecipeLikeOrderByRelationAggregateInput
    saves?: SavedRecipeOrderByRelationAggregateInput
    reviews?: RecipeReviewOrderByRelationAggregateInput
    madeRecipes?: MadeRecipeOrderByRelationAggregateInput
    mealPlanItems?: MealPlanItemOrderByRelationAggregateInput
    foodImages?: FoodImageOrderByRelationAggregateInput
  }

  export type RecipeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RecipeWhereInput | RecipeWhereInput[]
    OR?: RecipeWhereInput[]
    NOT?: RecipeWhereInput | RecipeWhereInput[]
    title?: StringFilter<"Recipe"> | string
    description?: StringNullableFilter<"Recipe"> | string | null
    instructions?: JsonFilter<"Recipe">
    prepTime?: IntNullableFilter<"Recipe"> | number | null
    cookTime?: IntNullableFilter<"Recipe"> | number | null
    servings?: IntNullableFilter<"Recipe"> | number | null
    difficulty?: StringNullableFilter<"Recipe"> | string | null
    cuisine?: StringNullableFilter<"Recipe"> | string | null
    category?: StringNullableFilter<"Recipe"> | string | null
    images?: StringNullableListFilter<"Recipe">
    mainImage?: StringNullableFilter<"Recipe"> | string | null
    aiTags?: StringNullableListFilter<"Recipe">
    userTags?: StringNullableListFilter<"Recipe">
    allTags?: StringNullableListFilter<"Recipe">
    pairings?: JsonNullableFilter<"Recipe">
    nutrition?: JsonNullableFilter<"Recipe">
    likesCount?: IntFilter<"Recipe"> | number
    savesCount?: IntFilter<"Recipe"> | number
    madeCount?: IntFilter<"Recipe"> | number
    viewsCount?: IntFilter<"Recipe"> | number
    avgRating?: FloatFilter<"Recipe"> | number
    reviewsCount?: IntFilter<"Recipe"> | number
    createdAt?: DateTimeFilter<"Recipe"> | Date | string
    updatedAt?: DateTimeFilter<"Recipe"> | Date | string
    publishedAt?: DateTimeNullableFilter<"Recipe"> | Date | string | null
    isPublished?: BoolFilter<"Recipe"> | boolean
    authorId?: StringFilter<"Recipe"> | string
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    ingredients?: RecipeIngredientListRelationFilter
    likes?: RecipeLikeListRelationFilter
    saves?: SavedRecipeListRelationFilter
    reviews?: RecipeReviewListRelationFilter
    madeRecipes?: MadeRecipeListRelationFilter
    mealPlanItems?: MealPlanItemListRelationFilter
    foodImages?: FoodImageListRelationFilter
  }, "id">

  export type RecipeOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    instructions?: SortOrder
    prepTime?: SortOrderInput | SortOrder
    cookTime?: SortOrderInput | SortOrder
    servings?: SortOrderInput | SortOrder
    difficulty?: SortOrderInput | SortOrder
    cuisine?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    images?: SortOrder
    mainImage?: SortOrderInput | SortOrder
    aiTags?: SortOrder
    userTags?: SortOrder
    allTags?: SortOrder
    pairings?: SortOrderInput | SortOrder
    nutrition?: SortOrderInput | SortOrder
    likesCount?: SortOrder
    savesCount?: SortOrder
    madeCount?: SortOrder
    viewsCount?: SortOrder
    avgRating?: SortOrder
    reviewsCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    publishedAt?: SortOrderInput | SortOrder
    isPublished?: SortOrder
    authorId?: SortOrder
    _count?: RecipeCountOrderByAggregateInput
    _avg?: RecipeAvgOrderByAggregateInput
    _max?: RecipeMaxOrderByAggregateInput
    _min?: RecipeMinOrderByAggregateInput
    _sum?: RecipeSumOrderByAggregateInput
  }

  export type RecipeScalarWhereWithAggregatesInput = {
    AND?: RecipeScalarWhereWithAggregatesInput | RecipeScalarWhereWithAggregatesInput[]
    OR?: RecipeScalarWhereWithAggregatesInput[]
    NOT?: RecipeScalarWhereWithAggregatesInput | RecipeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Recipe"> | string
    title?: StringWithAggregatesFilter<"Recipe"> | string
    description?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
    instructions?: JsonWithAggregatesFilter<"Recipe">
    prepTime?: IntNullableWithAggregatesFilter<"Recipe"> | number | null
    cookTime?: IntNullableWithAggregatesFilter<"Recipe"> | number | null
    servings?: IntNullableWithAggregatesFilter<"Recipe"> | number | null
    difficulty?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
    cuisine?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
    category?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
    images?: StringNullableListFilter<"Recipe">
    mainImage?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
    aiTags?: StringNullableListFilter<"Recipe">
    userTags?: StringNullableListFilter<"Recipe">
    allTags?: StringNullableListFilter<"Recipe">
    pairings?: JsonNullableWithAggregatesFilter<"Recipe">
    nutrition?: JsonNullableWithAggregatesFilter<"Recipe">
    likesCount?: IntWithAggregatesFilter<"Recipe"> | number
    savesCount?: IntWithAggregatesFilter<"Recipe"> | number
    madeCount?: IntWithAggregatesFilter<"Recipe"> | number
    viewsCount?: IntWithAggregatesFilter<"Recipe"> | number
    avgRating?: FloatWithAggregatesFilter<"Recipe"> | number
    reviewsCount?: IntWithAggregatesFilter<"Recipe"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Recipe"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Recipe"> | Date | string
    publishedAt?: DateTimeNullableWithAggregatesFilter<"Recipe"> | Date | string | null
    isPublished?: BoolWithAggregatesFilter<"Recipe"> | boolean
    authorId?: StringWithAggregatesFilter<"Recipe"> | string
  }

  export type IngredientWhereInput = {
    AND?: IngredientWhereInput | IngredientWhereInput[]
    OR?: IngredientWhereInput[]
    NOT?: IngredientWhereInput | IngredientWhereInput[]
    id?: StringFilter<"Ingredient"> | string
    name?: StringFilter<"Ingredient"> | string
    category?: StringNullableFilter<"Ingredient"> | string | null
    commonUnit?: StringNullableFilter<"Ingredient"> | string | null
    nutritionPer100g?: JsonNullableFilter<"Ingredient">
    aliases?: StringNullableListFilter<"Ingredient">
    createdAt?: DateTimeFilter<"Ingredient"> | Date | string
    recipeIngredients?: RecipeIngredientListRelationFilter
  }

  export type IngredientOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrderInput | SortOrder
    commonUnit?: SortOrderInput | SortOrder
    nutritionPer100g?: SortOrderInput | SortOrder
    aliases?: SortOrder
    createdAt?: SortOrder
    recipeIngredients?: RecipeIngredientOrderByRelationAggregateInput
  }

  export type IngredientWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: IngredientWhereInput | IngredientWhereInput[]
    OR?: IngredientWhereInput[]
    NOT?: IngredientWhereInput | IngredientWhereInput[]
    category?: StringNullableFilter<"Ingredient"> | string | null
    commonUnit?: StringNullableFilter<"Ingredient"> | string | null
    nutritionPer100g?: JsonNullableFilter<"Ingredient">
    aliases?: StringNullableListFilter<"Ingredient">
    createdAt?: DateTimeFilter<"Ingredient"> | Date | string
    recipeIngredients?: RecipeIngredientListRelationFilter
  }, "id" | "name">

  export type IngredientOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrderInput | SortOrder
    commonUnit?: SortOrderInput | SortOrder
    nutritionPer100g?: SortOrderInput | SortOrder
    aliases?: SortOrder
    createdAt?: SortOrder
    _count?: IngredientCountOrderByAggregateInput
    _max?: IngredientMaxOrderByAggregateInput
    _min?: IngredientMinOrderByAggregateInput
  }

  export type IngredientScalarWhereWithAggregatesInput = {
    AND?: IngredientScalarWhereWithAggregatesInput | IngredientScalarWhereWithAggregatesInput[]
    OR?: IngredientScalarWhereWithAggregatesInput[]
    NOT?: IngredientScalarWhereWithAggregatesInput | IngredientScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Ingredient"> | string
    name?: StringWithAggregatesFilter<"Ingredient"> | string
    category?: StringNullableWithAggregatesFilter<"Ingredient"> | string | null
    commonUnit?: StringNullableWithAggregatesFilter<"Ingredient"> | string | null
    nutritionPer100g?: JsonNullableWithAggregatesFilter<"Ingredient">
    aliases?: StringNullableListFilter<"Ingredient">
    createdAt?: DateTimeWithAggregatesFilter<"Ingredient"> | Date | string
  }

  export type RecipeIngredientWhereInput = {
    AND?: RecipeIngredientWhereInput | RecipeIngredientWhereInput[]
    OR?: RecipeIngredientWhereInput[]
    NOT?: RecipeIngredientWhereInput | RecipeIngredientWhereInput[]
    id?: StringFilter<"RecipeIngredient"> | string
    recipeId?: StringFilter<"RecipeIngredient"> | string
    ingredientId?: StringFilter<"RecipeIngredient"> | string
    amount?: FloatNullableFilter<"RecipeIngredient"> | number | null
    unit?: StringNullableFilter<"RecipeIngredient"> | string | null
    preparation?: StringNullableFilter<"RecipeIngredient"> | string | null
    optional?: BoolFilter<"RecipeIngredient"> | boolean
    recipe?: XOR<RecipeScalarRelationFilter, RecipeWhereInput>
    ingredient?: XOR<IngredientScalarRelationFilter, IngredientWhereInput>
  }

  export type RecipeIngredientOrderByWithRelationInput = {
    id?: SortOrder
    recipeId?: SortOrder
    ingredientId?: SortOrder
    amount?: SortOrderInput | SortOrder
    unit?: SortOrderInput | SortOrder
    preparation?: SortOrderInput | SortOrder
    optional?: SortOrder
    recipe?: RecipeOrderByWithRelationInput
    ingredient?: IngredientOrderByWithRelationInput
  }

  export type RecipeIngredientWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    recipeId_ingredientId?: RecipeIngredientRecipeIdIngredientIdCompoundUniqueInput
    AND?: RecipeIngredientWhereInput | RecipeIngredientWhereInput[]
    OR?: RecipeIngredientWhereInput[]
    NOT?: RecipeIngredientWhereInput | RecipeIngredientWhereInput[]
    recipeId?: StringFilter<"RecipeIngredient"> | string
    ingredientId?: StringFilter<"RecipeIngredient"> | string
    amount?: FloatNullableFilter<"RecipeIngredient"> | number | null
    unit?: StringNullableFilter<"RecipeIngredient"> | string | null
    preparation?: StringNullableFilter<"RecipeIngredient"> | string | null
    optional?: BoolFilter<"RecipeIngredient"> | boolean
    recipe?: XOR<RecipeScalarRelationFilter, RecipeWhereInput>
    ingredient?: XOR<IngredientScalarRelationFilter, IngredientWhereInput>
  }, "id" | "recipeId_ingredientId">

  export type RecipeIngredientOrderByWithAggregationInput = {
    id?: SortOrder
    recipeId?: SortOrder
    ingredientId?: SortOrder
    amount?: SortOrderInput | SortOrder
    unit?: SortOrderInput | SortOrder
    preparation?: SortOrderInput | SortOrder
    optional?: SortOrder
    _count?: RecipeIngredientCountOrderByAggregateInput
    _avg?: RecipeIngredientAvgOrderByAggregateInput
    _max?: RecipeIngredientMaxOrderByAggregateInput
    _min?: RecipeIngredientMinOrderByAggregateInput
    _sum?: RecipeIngredientSumOrderByAggregateInput
  }

  export type RecipeIngredientScalarWhereWithAggregatesInput = {
    AND?: RecipeIngredientScalarWhereWithAggregatesInput | RecipeIngredientScalarWhereWithAggregatesInput[]
    OR?: RecipeIngredientScalarWhereWithAggregatesInput[]
    NOT?: RecipeIngredientScalarWhereWithAggregatesInput | RecipeIngredientScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RecipeIngredient"> | string
    recipeId?: StringWithAggregatesFilter<"RecipeIngredient"> | string
    ingredientId?: StringWithAggregatesFilter<"RecipeIngredient"> | string
    amount?: FloatNullableWithAggregatesFilter<"RecipeIngredient"> | number | null
    unit?: StringNullableWithAggregatesFilter<"RecipeIngredient"> | string | null
    preparation?: StringNullableWithAggregatesFilter<"RecipeIngredient"> | string | null
    optional?: BoolWithAggregatesFilter<"RecipeIngredient"> | boolean
  }

  export type RecipeLikeWhereInput = {
    AND?: RecipeLikeWhereInput | RecipeLikeWhereInput[]
    OR?: RecipeLikeWhereInput[]
    NOT?: RecipeLikeWhereInput | RecipeLikeWhereInput[]
    id?: StringFilter<"RecipeLike"> | string
    recipeId?: StringFilter<"RecipeLike"> | string
    userId?: StringFilter<"RecipeLike"> | string
    likedAt?: DateTimeFilter<"RecipeLike"> | Date | string
    recipe?: XOR<RecipeScalarRelationFilter, RecipeWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type RecipeLikeOrderByWithRelationInput = {
    id?: SortOrder
    recipeId?: SortOrder
    userId?: SortOrder
    likedAt?: SortOrder
    recipe?: RecipeOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type RecipeLikeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    recipeId_userId?: RecipeLikeRecipeIdUserIdCompoundUniqueInput
    AND?: RecipeLikeWhereInput | RecipeLikeWhereInput[]
    OR?: RecipeLikeWhereInput[]
    NOT?: RecipeLikeWhereInput | RecipeLikeWhereInput[]
    recipeId?: StringFilter<"RecipeLike"> | string
    userId?: StringFilter<"RecipeLike"> | string
    likedAt?: DateTimeFilter<"RecipeLike"> | Date | string
    recipe?: XOR<RecipeScalarRelationFilter, RecipeWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "recipeId_userId">

  export type RecipeLikeOrderByWithAggregationInput = {
    id?: SortOrder
    recipeId?: SortOrder
    userId?: SortOrder
    likedAt?: SortOrder
    _count?: RecipeLikeCountOrderByAggregateInput
    _max?: RecipeLikeMaxOrderByAggregateInput
    _min?: RecipeLikeMinOrderByAggregateInput
  }

  export type RecipeLikeScalarWhereWithAggregatesInput = {
    AND?: RecipeLikeScalarWhereWithAggregatesInput | RecipeLikeScalarWhereWithAggregatesInput[]
    OR?: RecipeLikeScalarWhereWithAggregatesInput[]
    NOT?: RecipeLikeScalarWhereWithAggregatesInput | RecipeLikeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RecipeLike"> | string
    recipeId?: StringWithAggregatesFilter<"RecipeLike"> | string
    userId?: StringWithAggregatesFilter<"RecipeLike"> | string
    likedAt?: DateTimeWithAggregatesFilter<"RecipeLike"> | Date | string
  }

  export type SavedRecipeWhereInput = {
    AND?: SavedRecipeWhereInput | SavedRecipeWhereInput[]
    OR?: SavedRecipeWhereInput[]
    NOT?: SavedRecipeWhereInput | SavedRecipeWhereInput[]
    id?: StringFilter<"SavedRecipe"> | string
    recipeId?: StringFilter<"SavedRecipe"> | string
    userId?: StringFilter<"SavedRecipe"> | string
    savedAt?: DateTimeFilter<"SavedRecipe"> | Date | string
    notes?: StringNullableFilter<"SavedRecipe"> | string | null
    recipe?: XOR<RecipeScalarRelationFilter, RecipeWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SavedRecipeOrderByWithRelationInput = {
    id?: SortOrder
    recipeId?: SortOrder
    userId?: SortOrder
    savedAt?: SortOrder
    notes?: SortOrderInput | SortOrder
    recipe?: RecipeOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type SavedRecipeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    recipeId_userId?: SavedRecipeRecipeIdUserIdCompoundUniqueInput
    AND?: SavedRecipeWhereInput | SavedRecipeWhereInput[]
    OR?: SavedRecipeWhereInput[]
    NOT?: SavedRecipeWhereInput | SavedRecipeWhereInput[]
    recipeId?: StringFilter<"SavedRecipe"> | string
    userId?: StringFilter<"SavedRecipe"> | string
    savedAt?: DateTimeFilter<"SavedRecipe"> | Date | string
    notes?: StringNullableFilter<"SavedRecipe"> | string | null
    recipe?: XOR<RecipeScalarRelationFilter, RecipeWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "recipeId_userId">

  export type SavedRecipeOrderByWithAggregationInput = {
    id?: SortOrder
    recipeId?: SortOrder
    userId?: SortOrder
    savedAt?: SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: SavedRecipeCountOrderByAggregateInput
    _max?: SavedRecipeMaxOrderByAggregateInput
    _min?: SavedRecipeMinOrderByAggregateInput
  }

  export type SavedRecipeScalarWhereWithAggregatesInput = {
    AND?: SavedRecipeScalarWhereWithAggregatesInput | SavedRecipeScalarWhereWithAggregatesInput[]
    OR?: SavedRecipeScalarWhereWithAggregatesInput[]
    NOT?: SavedRecipeScalarWhereWithAggregatesInput | SavedRecipeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SavedRecipe"> | string
    recipeId?: StringWithAggregatesFilter<"SavedRecipe"> | string
    userId?: StringWithAggregatesFilter<"SavedRecipe"> | string
    savedAt?: DateTimeWithAggregatesFilter<"SavedRecipe"> | Date | string
    notes?: StringNullableWithAggregatesFilter<"SavedRecipe"> | string | null
  }

  export type RecipeReviewWhereInput = {
    AND?: RecipeReviewWhereInput | RecipeReviewWhereInput[]
    OR?: RecipeReviewWhereInput[]
    NOT?: RecipeReviewWhereInput | RecipeReviewWhereInput[]
    id?: StringFilter<"RecipeReview"> | string
    recipeId?: StringFilter<"RecipeReview"> | string
    userId?: StringFilter<"RecipeReview"> | string
    rating?: IntFilter<"RecipeReview"> | number
    comment?: StringNullableFilter<"RecipeReview"> | string | null
    images?: StringNullableListFilter<"RecipeReview">
    createdAt?: DateTimeFilter<"RecipeReview"> | Date | string
    updatedAt?: DateTimeFilter<"RecipeReview"> | Date | string
    recipe?: XOR<RecipeScalarRelationFilter, RecipeWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type RecipeReviewOrderByWithRelationInput = {
    id?: SortOrder
    recipeId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    images?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    recipe?: RecipeOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type RecipeReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    recipeId_userId?: RecipeReviewRecipeIdUserIdCompoundUniqueInput
    AND?: RecipeReviewWhereInput | RecipeReviewWhereInput[]
    OR?: RecipeReviewWhereInput[]
    NOT?: RecipeReviewWhereInput | RecipeReviewWhereInput[]
    recipeId?: StringFilter<"RecipeReview"> | string
    userId?: StringFilter<"RecipeReview"> | string
    rating?: IntFilter<"RecipeReview"> | number
    comment?: StringNullableFilter<"RecipeReview"> | string | null
    images?: StringNullableListFilter<"RecipeReview">
    createdAt?: DateTimeFilter<"RecipeReview"> | Date | string
    updatedAt?: DateTimeFilter<"RecipeReview"> | Date | string
    recipe?: XOR<RecipeScalarRelationFilter, RecipeWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "recipeId_userId">

  export type RecipeReviewOrderByWithAggregationInput = {
    id?: SortOrder
    recipeId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    images?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RecipeReviewCountOrderByAggregateInput
    _avg?: RecipeReviewAvgOrderByAggregateInput
    _max?: RecipeReviewMaxOrderByAggregateInput
    _min?: RecipeReviewMinOrderByAggregateInput
    _sum?: RecipeReviewSumOrderByAggregateInput
  }

  export type RecipeReviewScalarWhereWithAggregatesInput = {
    AND?: RecipeReviewScalarWhereWithAggregatesInput | RecipeReviewScalarWhereWithAggregatesInput[]
    OR?: RecipeReviewScalarWhereWithAggregatesInput[]
    NOT?: RecipeReviewScalarWhereWithAggregatesInput | RecipeReviewScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RecipeReview"> | string
    recipeId?: StringWithAggregatesFilter<"RecipeReview"> | string
    userId?: StringWithAggregatesFilter<"RecipeReview"> | string
    rating?: IntWithAggregatesFilter<"RecipeReview"> | number
    comment?: StringNullableWithAggregatesFilter<"RecipeReview"> | string | null
    images?: StringNullableListFilter<"RecipeReview">
    createdAt?: DateTimeWithAggregatesFilter<"RecipeReview"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RecipeReview"> | Date | string
  }

  export type MadeRecipeWhereInput = {
    AND?: MadeRecipeWhereInput | MadeRecipeWhereInput[]
    OR?: MadeRecipeWhereInput[]
    NOT?: MadeRecipeWhereInput | MadeRecipeWhereInput[]
    id?: StringFilter<"MadeRecipe"> | string
    recipeId?: StringFilter<"MadeRecipe"> | string
    userId?: StringFilter<"MadeRecipe"> | string
    madeAt?: DateTimeFilter<"MadeRecipe"> | Date | string
    rating?: IntNullableFilter<"MadeRecipe"> | number | null
    notes?: StringNullableFilter<"MadeRecipe"> | string | null
    images?: StringNullableListFilter<"MadeRecipe">
    recipe?: XOR<RecipeScalarRelationFilter, RecipeWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type MadeRecipeOrderByWithRelationInput = {
    id?: SortOrder
    recipeId?: SortOrder
    userId?: SortOrder
    madeAt?: SortOrder
    rating?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    images?: SortOrder
    recipe?: RecipeOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type MadeRecipeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MadeRecipeWhereInput | MadeRecipeWhereInput[]
    OR?: MadeRecipeWhereInput[]
    NOT?: MadeRecipeWhereInput | MadeRecipeWhereInput[]
    recipeId?: StringFilter<"MadeRecipe"> | string
    userId?: StringFilter<"MadeRecipe"> | string
    madeAt?: DateTimeFilter<"MadeRecipe"> | Date | string
    rating?: IntNullableFilter<"MadeRecipe"> | number | null
    notes?: StringNullableFilter<"MadeRecipe"> | string | null
    images?: StringNullableListFilter<"MadeRecipe">
    recipe?: XOR<RecipeScalarRelationFilter, RecipeWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type MadeRecipeOrderByWithAggregationInput = {
    id?: SortOrder
    recipeId?: SortOrder
    userId?: SortOrder
    madeAt?: SortOrder
    rating?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    images?: SortOrder
    _count?: MadeRecipeCountOrderByAggregateInput
    _avg?: MadeRecipeAvgOrderByAggregateInput
    _max?: MadeRecipeMaxOrderByAggregateInput
    _min?: MadeRecipeMinOrderByAggregateInput
    _sum?: MadeRecipeSumOrderByAggregateInput
  }

  export type MadeRecipeScalarWhereWithAggregatesInput = {
    AND?: MadeRecipeScalarWhereWithAggregatesInput | MadeRecipeScalarWhereWithAggregatesInput[]
    OR?: MadeRecipeScalarWhereWithAggregatesInput[]
    NOT?: MadeRecipeScalarWhereWithAggregatesInput | MadeRecipeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MadeRecipe"> | string
    recipeId?: StringWithAggregatesFilter<"MadeRecipe"> | string
    userId?: StringWithAggregatesFilter<"MadeRecipe"> | string
    madeAt?: DateTimeWithAggregatesFilter<"MadeRecipe"> | Date | string
    rating?: IntNullableWithAggregatesFilter<"MadeRecipe"> | number | null
    notes?: StringNullableWithAggregatesFilter<"MadeRecipe"> | string | null
    images?: StringNullableListFilter<"MadeRecipe">
  }

  export type FollowWhereInput = {
    AND?: FollowWhereInput | FollowWhereInput[]
    OR?: FollowWhereInput[]
    NOT?: FollowWhereInput | FollowWhereInput[]
    id?: StringFilter<"Follow"> | string
    followerId?: StringFilter<"Follow"> | string
    followingId?: StringFilter<"Follow"> | string
    createdAt?: DateTimeFilter<"Follow"> | Date | string
    follower?: XOR<UserScalarRelationFilter, UserWhereInput>
    following?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type FollowOrderByWithRelationInput = {
    id?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
    createdAt?: SortOrder
    follower?: UserOrderByWithRelationInput
    following?: UserOrderByWithRelationInput
  }

  export type FollowWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    followerId_followingId?: FollowFollowerIdFollowingIdCompoundUniqueInput
    AND?: FollowWhereInput | FollowWhereInput[]
    OR?: FollowWhereInput[]
    NOT?: FollowWhereInput | FollowWhereInput[]
    followerId?: StringFilter<"Follow"> | string
    followingId?: StringFilter<"Follow"> | string
    createdAt?: DateTimeFilter<"Follow"> | Date | string
    follower?: XOR<UserScalarRelationFilter, UserWhereInput>
    following?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "followerId_followingId">

  export type FollowOrderByWithAggregationInput = {
    id?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
    createdAt?: SortOrder
    _count?: FollowCountOrderByAggregateInput
    _max?: FollowMaxOrderByAggregateInput
    _min?: FollowMinOrderByAggregateInput
  }

  export type FollowScalarWhereWithAggregatesInput = {
    AND?: FollowScalarWhereWithAggregatesInput | FollowScalarWhereWithAggregatesInput[]
    OR?: FollowScalarWhereWithAggregatesInput[]
    NOT?: FollowScalarWhereWithAggregatesInput | FollowScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Follow"> | string
    followerId?: StringWithAggregatesFilter<"Follow"> | string
    followingId?: StringWithAggregatesFilter<"Follow"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Follow"> | Date | string
  }

  export type MealPlanWhereInput = {
    AND?: MealPlanWhereInput | MealPlanWhereInput[]
    OR?: MealPlanWhereInput[]
    NOT?: MealPlanWhereInput | MealPlanWhereInput[]
    id?: StringFilter<"MealPlan"> | string
    userId?: StringFilter<"MealPlan"> | string
    name?: StringFilter<"MealPlan"> | string
    description?: StringNullableFilter<"MealPlan"> | string | null
    startDate?: DateTimeFilter<"MealPlan"> | Date | string
    endDate?: DateTimeFilter<"MealPlan"> | Date | string
    isActive?: BoolFilter<"MealPlan"> | boolean
    createdAt?: DateTimeFilter<"MealPlan"> | Date | string
    updatedAt?: DateTimeFilter<"MealPlan"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    items?: MealPlanItemListRelationFilter
  }

  export type MealPlanOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    items?: MealPlanItemOrderByRelationAggregateInput
  }

  export type MealPlanWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MealPlanWhereInput | MealPlanWhereInput[]
    OR?: MealPlanWhereInput[]
    NOT?: MealPlanWhereInput | MealPlanWhereInput[]
    userId?: StringFilter<"MealPlan"> | string
    name?: StringFilter<"MealPlan"> | string
    description?: StringNullableFilter<"MealPlan"> | string | null
    startDate?: DateTimeFilter<"MealPlan"> | Date | string
    endDate?: DateTimeFilter<"MealPlan"> | Date | string
    isActive?: BoolFilter<"MealPlan"> | boolean
    createdAt?: DateTimeFilter<"MealPlan"> | Date | string
    updatedAt?: DateTimeFilter<"MealPlan"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    items?: MealPlanItemListRelationFilter
  }, "id">

  export type MealPlanOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MealPlanCountOrderByAggregateInput
    _max?: MealPlanMaxOrderByAggregateInput
    _min?: MealPlanMinOrderByAggregateInput
  }

  export type MealPlanScalarWhereWithAggregatesInput = {
    AND?: MealPlanScalarWhereWithAggregatesInput | MealPlanScalarWhereWithAggregatesInput[]
    OR?: MealPlanScalarWhereWithAggregatesInput[]
    NOT?: MealPlanScalarWhereWithAggregatesInput | MealPlanScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MealPlan"> | string
    userId?: StringWithAggregatesFilter<"MealPlan"> | string
    name?: StringWithAggregatesFilter<"MealPlan"> | string
    description?: StringNullableWithAggregatesFilter<"MealPlan"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"MealPlan"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"MealPlan"> | Date | string
    isActive?: BoolWithAggregatesFilter<"MealPlan"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"MealPlan"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MealPlan"> | Date | string
  }

  export type MealPlanItemWhereInput = {
    AND?: MealPlanItemWhereInput | MealPlanItemWhereInput[]
    OR?: MealPlanItemWhereInput[]
    NOT?: MealPlanItemWhereInput | MealPlanItemWhereInput[]
    id?: StringFilter<"MealPlanItem"> | string
    mealPlanId?: StringFilter<"MealPlanItem"> | string
    recipeId?: StringFilter<"MealPlanItem"> | string
    date?: DateTimeFilter<"MealPlanItem"> | Date | string
    mealType?: StringFilter<"MealPlanItem"> | string
    servings?: IntFilter<"MealPlanItem"> | number
    mealPlan?: XOR<MealPlanScalarRelationFilter, MealPlanWhereInput>
    recipe?: XOR<RecipeScalarRelationFilter, RecipeWhereInput>
  }

  export type MealPlanItemOrderByWithRelationInput = {
    id?: SortOrder
    mealPlanId?: SortOrder
    recipeId?: SortOrder
    date?: SortOrder
    mealType?: SortOrder
    servings?: SortOrder
    mealPlan?: MealPlanOrderByWithRelationInput
    recipe?: RecipeOrderByWithRelationInput
  }

  export type MealPlanItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MealPlanItemWhereInput | MealPlanItemWhereInput[]
    OR?: MealPlanItemWhereInput[]
    NOT?: MealPlanItemWhereInput | MealPlanItemWhereInput[]
    mealPlanId?: StringFilter<"MealPlanItem"> | string
    recipeId?: StringFilter<"MealPlanItem"> | string
    date?: DateTimeFilter<"MealPlanItem"> | Date | string
    mealType?: StringFilter<"MealPlanItem"> | string
    servings?: IntFilter<"MealPlanItem"> | number
    mealPlan?: XOR<MealPlanScalarRelationFilter, MealPlanWhereInput>
    recipe?: XOR<RecipeScalarRelationFilter, RecipeWhereInput>
  }, "id">

  export type MealPlanItemOrderByWithAggregationInput = {
    id?: SortOrder
    mealPlanId?: SortOrder
    recipeId?: SortOrder
    date?: SortOrder
    mealType?: SortOrder
    servings?: SortOrder
    _count?: MealPlanItemCountOrderByAggregateInput
    _avg?: MealPlanItemAvgOrderByAggregateInput
    _max?: MealPlanItemMaxOrderByAggregateInput
    _min?: MealPlanItemMinOrderByAggregateInput
    _sum?: MealPlanItemSumOrderByAggregateInput
  }

  export type MealPlanItemScalarWhereWithAggregatesInput = {
    AND?: MealPlanItemScalarWhereWithAggregatesInput | MealPlanItemScalarWhereWithAggregatesInput[]
    OR?: MealPlanItemScalarWhereWithAggregatesInput[]
    NOT?: MealPlanItemScalarWhereWithAggregatesInput | MealPlanItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MealPlanItem"> | string
    mealPlanId?: StringWithAggregatesFilter<"MealPlanItem"> | string
    recipeId?: StringWithAggregatesFilter<"MealPlanItem"> | string
    date?: DateTimeWithAggregatesFilter<"MealPlanItem"> | Date | string
    mealType?: StringWithAggregatesFilter<"MealPlanItem"> | string
    servings?: IntWithAggregatesFilter<"MealPlanItem"> | number
  }

  export type ShoppingListWhereInput = {
    AND?: ShoppingListWhereInput | ShoppingListWhereInput[]
    OR?: ShoppingListWhereInput[]
    NOT?: ShoppingListWhereInput | ShoppingListWhereInput[]
    id?: StringFilter<"ShoppingList"> | string
    userId?: StringFilter<"ShoppingList"> | string
    name?: StringFilter<"ShoppingList"> | string
    items?: JsonFilter<"ShoppingList">
    createdAt?: DateTimeFilter<"ShoppingList"> | Date | string
    updatedAt?: DateTimeFilter<"ShoppingList"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ShoppingListOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    items?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ShoppingListWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ShoppingListWhereInput | ShoppingListWhereInput[]
    OR?: ShoppingListWhereInput[]
    NOT?: ShoppingListWhereInput | ShoppingListWhereInput[]
    userId?: StringFilter<"ShoppingList"> | string
    name?: StringFilter<"ShoppingList"> | string
    items?: JsonFilter<"ShoppingList">
    createdAt?: DateTimeFilter<"ShoppingList"> | Date | string
    updatedAt?: DateTimeFilter<"ShoppingList"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ShoppingListOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    items?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ShoppingListCountOrderByAggregateInput
    _max?: ShoppingListMaxOrderByAggregateInput
    _min?: ShoppingListMinOrderByAggregateInput
  }

  export type ShoppingListScalarWhereWithAggregatesInput = {
    AND?: ShoppingListScalarWhereWithAggregatesInput | ShoppingListScalarWhereWithAggregatesInput[]
    OR?: ShoppingListScalarWhereWithAggregatesInput[]
    NOT?: ShoppingListScalarWhereWithAggregatesInput | ShoppingListScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ShoppingList"> | string
    userId?: StringWithAggregatesFilter<"ShoppingList"> | string
    name?: StringWithAggregatesFilter<"ShoppingList"> | string
    items?: JsonWithAggregatesFilter<"ShoppingList">
    createdAt?: DateTimeWithAggregatesFilter<"ShoppingList"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ShoppingList"> | Date | string
  }

  export type TrendingRecipeWhereInput = {
    AND?: TrendingRecipeWhereInput | TrendingRecipeWhereInput[]
    OR?: TrendingRecipeWhereInput[]
    NOT?: TrendingRecipeWhereInput | TrendingRecipeWhereInput[]
    id?: StringFilter<"TrendingRecipe"> | string
    recipeId?: StringFilter<"TrendingRecipe"> | string
    score?: FloatFilter<"TrendingRecipe"> | number
    trendingAt?: DateTimeFilter<"TrendingRecipe"> | Date | string
  }

  export type TrendingRecipeOrderByWithRelationInput = {
    id?: SortOrder
    recipeId?: SortOrder
    score?: SortOrder
    trendingAt?: SortOrder
  }

  export type TrendingRecipeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    recipeId?: string
    AND?: TrendingRecipeWhereInput | TrendingRecipeWhereInput[]
    OR?: TrendingRecipeWhereInput[]
    NOT?: TrendingRecipeWhereInput | TrendingRecipeWhereInput[]
    score?: FloatFilter<"TrendingRecipe"> | number
    trendingAt?: DateTimeFilter<"TrendingRecipe"> | Date | string
  }, "id" | "recipeId">

  export type TrendingRecipeOrderByWithAggregationInput = {
    id?: SortOrder
    recipeId?: SortOrder
    score?: SortOrder
    trendingAt?: SortOrder
    _count?: TrendingRecipeCountOrderByAggregateInput
    _avg?: TrendingRecipeAvgOrderByAggregateInput
    _max?: TrendingRecipeMaxOrderByAggregateInput
    _min?: TrendingRecipeMinOrderByAggregateInput
    _sum?: TrendingRecipeSumOrderByAggregateInput
  }

  export type TrendingRecipeScalarWhereWithAggregatesInput = {
    AND?: TrendingRecipeScalarWhereWithAggregatesInput | TrendingRecipeScalarWhereWithAggregatesInput[]
    OR?: TrendingRecipeScalarWhereWithAggregatesInput[]
    NOT?: TrendingRecipeScalarWhereWithAggregatesInput | TrendingRecipeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TrendingRecipe"> | string
    recipeId?: StringWithAggregatesFilter<"TrendingRecipe"> | string
    score?: FloatWithAggregatesFilter<"TrendingRecipe"> | number
    trendingAt?: DateTimeWithAggregatesFilter<"TrendingRecipe"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    bio?: string | null
    avatar?: string | null
    verified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    password?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    recipes?: RecipeCreateNestedManyWithoutAuthorInput
    savedRecipes?: SavedRecipeCreateNestedManyWithoutUserInput
    recipeLikes?: RecipeLikeCreateNestedManyWithoutUserInput
    recipeReviews?: RecipeReviewCreateNestedManyWithoutUserInput
    madeRecipes?: MadeRecipeCreateNestedManyWithoutUserInput
    mealPlans?: MealPlanCreateNestedManyWithoutUserInput
    foodImages?: FoodImageCreateNestedManyWithoutUserInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    bio?: string | null
    avatar?: string | null
    verified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    password?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutAuthorInput
    savedRecipes?: SavedRecipeUncheckedCreateNestedManyWithoutUserInput
    recipeLikes?: RecipeLikeUncheckedCreateNestedManyWithoutUserInput
    recipeReviews?: RecipeReviewUncheckedCreateNestedManyWithoutUserInput
    madeRecipes?: MadeRecipeUncheckedCreateNestedManyWithoutUserInput
    mealPlans?: MealPlanUncheckedCreateNestedManyWithoutUserInput
    foodImages?: FoodImageUncheckedCreateNestedManyWithoutUserInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    recipes?: RecipeUpdateManyWithoutAuthorNestedInput
    savedRecipes?: SavedRecipeUpdateManyWithoutUserNestedInput
    recipeLikes?: RecipeLikeUpdateManyWithoutUserNestedInput
    recipeReviews?: RecipeReviewUpdateManyWithoutUserNestedInput
    madeRecipes?: MadeRecipeUpdateManyWithoutUserNestedInput
    mealPlans?: MealPlanUpdateManyWithoutUserNestedInput
    foodImages?: FoodImageUpdateManyWithoutUserNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutAuthorNestedInput
    savedRecipes?: SavedRecipeUncheckedUpdateManyWithoutUserNestedInput
    recipeLikes?: RecipeLikeUncheckedUpdateManyWithoutUserNestedInput
    recipeReviews?: RecipeReviewUncheckedUpdateManyWithoutUserNestedInput
    madeRecipes?: MadeRecipeUncheckedUpdateManyWithoutUserNestedInput
    mealPlans?: MealPlanUncheckedUpdateManyWithoutUserNestedInput
    foodImages?: FoodImageUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    bio?: string | null
    avatar?: string | null
    verified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    password?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodImageCreateInput = {
    id?: string
    filename: string
    base64: string
    uploadedAt?: Date | string
    analysis?: NullableJsonNullValueInput | InputJsonValue
    user?: UserCreateNestedOneWithoutFoodImagesInput
    recipe?: RecipeCreateNestedOneWithoutFoodImagesInput
  }

  export type FoodImageUncheckedCreateInput = {
    id?: string
    filename: string
    base64: string
    uploadedAt?: Date | string
    analysis?: NullableJsonNullValueInput | InputJsonValue
    userId?: string | null
    recipeId?: string | null
  }

  export type FoodImageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    base64?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    analysis?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneWithoutFoodImagesNestedInput
    recipe?: RecipeUpdateOneWithoutFoodImagesNestedInput
  }

  export type FoodImageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    base64?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    analysis?: NullableJsonNullValueInput | InputJsonValue
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    recipeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FoodImageCreateManyInput = {
    id?: string
    filename: string
    base64: string
    uploadedAt?: Date | string
    analysis?: NullableJsonNullValueInput | InputJsonValue
    userId?: string | null
    recipeId?: string | null
  }

  export type FoodImageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    base64?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    analysis?: NullableJsonNullValueInput | InputJsonValue
  }

  export type FoodImageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    base64?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    analysis?: NullableJsonNullValueInput | InputJsonValue
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    recipeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecipeCreateInput = {
    id?: string
    title: string
    description?: string | null
    instructions: JsonNullValueInput | InputJsonValue
    prepTime?: number | null
    cookTime?: number | null
    servings?: number | null
    difficulty?: string | null
    cuisine?: string | null
    category?: string | null
    images?: RecipeCreateimagesInput | string[]
    mainImage?: string | null
    aiTags?: RecipeCreateaiTagsInput | string[]
    userTags?: RecipeCreateuserTagsInput | string[]
    allTags?: RecipeCreateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: number
    savesCount?: number
    madeCount?: number
    viewsCount?: number
    avgRating?: number
    reviewsCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    publishedAt?: Date | string | null
    isPublished?: boolean
    author: UserCreateNestedOneWithoutRecipesInput
    ingredients?: RecipeIngredientCreateNestedManyWithoutRecipeInput
    likes?: RecipeLikeCreateNestedManyWithoutRecipeInput
    saves?: SavedRecipeCreateNestedManyWithoutRecipeInput
    reviews?: RecipeReviewCreateNestedManyWithoutRecipeInput
    madeRecipes?: MadeRecipeCreateNestedManyWithoutRecipeInput
    mealPlanItems?: MealPlanItemCreateNestedManyWithoutRecipeInput
    foodImages?: FoodImageCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    instructions: JsonNullValueInput | InputJsonValue
    prepTime?: number | null
    cookTime?: number | null
    servings?: number | null
    difficulty?: string | null
    cuisine?: string | null
    category?: string | null
    images?: RecipeCreateimagesInput | string[]
    mainImage?: string | null
    aiTags?: RecipeCreateaiTagsInput | string[]
    userTags?: RecipeCreateuserTagsInput | string[]
    allTags?: RecipeCreateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: number
    savesCount?: number
    madeCount?: number
    viewsCount?: number
    avgRating?: number
    reviewsCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    publishedAt?: Date | string | null
    isPublished?: boolean
    authorId: string
    ingredients?: RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInput
    likes?: RecipeLikeUncheckedCreateNestedManyWithoutRecipeInput
    saves?: SavedRecipeUncheckedCreateNestedManyWithoutRecipeInput
    reviews?: RecipeReviewUncheckedCreateNestedManyWithoutRecipeInput
    madeRecipes?: MadeRecipeUncheckedCreateNestedManyWithoutRecipeInput
    mealPlanItems?: MealPlanItemUncheckedCreateNestedManyWithoutRecipeInput
    foodImages?: FoodImageUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: JsonNullValueInput | InputJsonValue
    prepTime?: NullableIntFieldUpdateOperationsInput | number | null
    cookTime?: NullableIntFieldUpdateOperationsInput | number | null
    servings?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    cuisine?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeUpdateimagesInput | string[]
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    aiTags?: RecipeUpdateaiTagsInput | string[]
    userTags?: RecipeUpdateuserTagsInput | string[]
    allTags?: RecipeUpdateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: IntFieldUpdateOperationsInput | number
    savesCount?: IntFieldUpdateOperationsInput | number
    madeCount?: IntFieldUpdateOperationsInput | number
    viewsCount?: IntFieldUpdateOperationsInput | number
    avgRating?: FloatFieldUpdateOperationsInput | number
    reviewsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    author?: UserUpdateOneRequiredWithoutRecipesNestedInput
    ingredients?: RecipeIngredientUpdateManyWithoutRecipeNestedInput
    likes?: RecipeLikeUpdateManyWithoutRecipeNestedInput
    saves?: SavedRecipeUpdateManyWithoutRecipeNestedInput
    reviews?: RecipeReviewUpdateManyWithoutRecipeNestedInput
    madeRecipes?: MadeRecipeUpdateManyWithoutRecipeNestedInput
    mealPlanItems?: MealPlanItemUpdateManyWithoutRecipeNestedInput
    foodImages?: FoodImageUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: JsonNullValueInput | InputJsonValue
    prepTime?: NullableIntFieldUpdateOperationsInput | number | null
    cookTime?: NullableIntFieldUpdateOperationsInput | number | null
    servings?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    cuisine?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeUpdateimagesInput | string[]
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    aiTags?: RecipeUpdateaiTagsInput | string[]
    userTags?: RecipeUpdateuserTagsInput | string[]
    allTags?: RecipeUpdateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: IntFieldUpdateOperationsInput | number
    savesCount?: IntFieldUpdateOperationsInput | number
    madeCount?: IntFieldUpdateOperationsInput | number
    viewsCount?: IntFieldUpdateOperationsInput | number
    avgRating?: FloatFieldUpdateOperationsInput | number
    reviewsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    authorId?: StringFieldUpdateOperationsInput | string
    ingredients?: RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInput
    likes?: RecipeLikeUncheckedUpdateManyWithoutRecipeNestedInput
    saves?: SavedRecipeUncheckedUpdateManyWithoutRecipeNestedInput
    reviews?: RecipeReviewUncheckedUpdateManyWithoutRecipeNestedInput
    madeRecipes?: MadeRecipeUncheckedUpdateManyWithoutRecipeNestedInput
    mealPlanItems?: MealPlanItemUncheckedUpdateManyWithoutRecipeNestedInput
    foodImages?: FoodImageUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    instructions: JsonNullValueInput | InputJsonValue
    prepTime?: number | null
    cookTime?: number | null
    servings?: number | null
    difficulty?: string | null
    cuisine?: string | null
    category?: string | null
    images?: RecipeCreateimagesInput | string[]
    mainImage?: string | null
    aiTags?: RecipeCreateaiTagsInput | string[]
    userTags?: RecipeCreateuserTagsInput | string[]
    allTags?: RecipeCreateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: number
    savesCount?: number
    madeCount?: number
    viewsCount?: number
    avgRating?: number
    reviewsCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    publishedAt?: Date | string | null
    isPublished?: boolean
    authorId: string
  }

  export type RecipeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: JsonNullValueInput | InputJsonValue
    prepTime?: NullableIntFieldUpdateOperationsInput | number | null
    cookTime?: NullableIntFieldUpdateOperationsInput | number | null
    servings?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    cuisine?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeUpdateimagesInput | string[]
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    aiTags?: RecipeUpdateaiTagsInput | string[]
    userTags?: RecipeUpdateuserTagsInput | string[]
    allTags?: RecipeUpdateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: IntFieldUpdateOperationsInput | number
    savesCount?: IntFieldUpdateOperationsInput | number
    madeCount?: IntFieldUpdateOperationsInput | number
    viewsCount?: IntFieldUpdateOperationsInput | number
    avgRating?: FloatFieldUpdateOperationsInput | number
    reviewsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RecipeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: JsonNullValueInput | InputJsonValue
    prepTime?: NullableIntFieldUpdateOperationsInput | number | null
    cookTime?: NullableIntFieldUpdateOperationsInput | number | null
    servings?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    cuisine?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeUpdateimagesInput | string[]
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    aiTags?: RecipeUpdateaiTagsInput | string[]
    userTags?: RecipeUpdateuserTagsInput | string[]
    allTags?: RecipeUpdateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: IntFieldUpdateOperationsInput | number
    savesCount?: IntFieldUpdateOperationsInput | number
    madeCount?: IntFieldUpdateOperationsInput | number
    viewsCount?: IntFieldUpdateOperationsInput | number
    avgRating?: FloatFieldUpdateOperationsInput | number
    reviewsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type IngredientCreateInput = {
    id?: string
    name: string
    category?: string | null
    commonUnit?: string | null
    nutritionPer100g?: NullableJsonNullValueInput | InputJsonValue
    aliases?: IngredientCreatealiasesInput | string[]
    createdAt?: Date | string
    recipeIngredients?: RecipeIngredientCreateNestedManyWithoutIngredientInput
  }

  export type IngredientUncheckedCreateInput = {
    id?: string
    name: string
    category?: string | null
    commonUnit?: string | null
    nutritionPer100g?: NullableJsonNullValueInput | InputJsonValue
    aliases?: IngredientCreatealiasesInput | string[]
    createdAt?: Date | string
    recipeIngredients?: RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInput
  }

  export type IngredientUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    commonUnit?: NullableStringFieldUpdateOperationsInput | string | null
    nutritionPer100g?: NullableJsonNullValueInput | InputJsonValue
    aliases?: IngredientUpdatealiasesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recipeIngredients?: RecipeIngredientUpdateManyWithoutIngredientNestedInput
  }

  export type IngredientUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    commonUnit?: NullableStringFieldUpdateOperationsInput | string | null
    nutritionPer100g?: NullableJsonNullValueInput | InputJsonValue
    aliases?: IngredientUpdatealiasesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recipeIngredients?: RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInput
  }

  export type IngredientCreateManyInput = {
    id?: string
    name: string
    category?: string | null
    commonUnit?: string | null
    nutritionPer100g?: NullableJsonNullValueInput | InputJsonValue
    aliases?: IngredientCreatealiasesInput | string[]
    createdAt?: Date | string
  }

  export type IngredientUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    commonUnit?: NullableStringFieldUpdateOperationsInput | string | null
    nutritionPer100g?: NullableJsonNullValueInput | InputJsonValue
    aliases?: IngredientUpdatealiasesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IngredientUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    commonUnit?: NullableStringFieldUpdateOperationsInput | string | null
    nutritionPer100g?: NullableJsonNullValueInput | InputJsonValue
    aliases?: IngredientUpdatealiasesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipeIngredientCreateInput = {
    id?: string
    amount?: number | null
    unit?: string | null
    preparation?: string | null
    optional?: boolean
    recipe: RecipeCreateNestedOneWithoutIngredientsInput
    ingredient: IngredientCreateNestedOneWithoutRecipeIngredientsInput
  }

  export type RecipeIngredientUncheckedCreateInput = {
    id?: string
    recipeId: string
    ingredientId: string
    amount?: number | null
    unit?: string | null
    preparation?: string | null
    optional?: boolean
  }

  export type RecipeIngredientUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    preparation?: NullableStringFieldUpdateOperationsInput | string | null
    optional?: BoolFieldUpdateOperationsInput | boolean
    recipe?: RecipeUpdateOneRequiredWithoutIngredientsNestedInput
    ingredient?: IngredientUpdateOneRequiredWithoutRecipeIngredientsNestedInput
  }

  export type RecipeIngredientUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    ingredientId?: StringFieldUpdateOperationsInput | string
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    preparation?: NullableStringFieldUpdateOperationsInput | string | null
    optional?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RecipeIngredientCreateManyInput = {
    id?: string
    recipeId: string
    ingredientId: string
    amount?: number | null
    unit?: string | null
    preparation?: string | null
    optional?: boolean
  }

  export type RecipeIngredientUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    preparation?: NullableStringFieldUpdateOperationsInput | string | null
    optional?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RecipeIngredientUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    ingredientId?: StringFieldUpdateOperationsInput | string
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    preparation?: NullableStringFieldUpdateOperationsInput | string | null
    optional?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RecipeLikeCreateInput = {
    id?: string
    likedAt?: Date | string
    recipe: RecipeCreateNestedOneWithoutLikesInput
    user: UserCreateNestedOneWithoutRecipeLikesInput
  }

  export type RecipeLikeUncheckedCreateInput = {
    id?: string
    recipeId: string
    userId: string
    likedAt?: Date | string
  }

  export type RecipeLikeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recipe?: RecipeUpdateOneRequiredWithoutLikesNestedInput
    user?: UserUpdateOneRequiredWithoutRecipeLikesNestedInput
  }

  export type RecipeLikeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipeLikeCreateManyInput = {
    id?: string
    recipeId: string
    userId: string
    likedAt?: Date | string
  }

  export type RecipeLikeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipeLikeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedRecipeCreateInput = {
    id?: string
    savedAt?: Date | string
    notes?: string | null
    recipe: RecipeCreateNestedOneWithoutSavesInput
    user: UserCreateNestedOneWithoutSavedRecipesInput
  }

  export type SavedRecipeUncheckedCreateInput = {
    id?: string
    recipeId: string
    userId: string
    savedAt?: Date | string
    notes?: string | null
  }

  export type SavedRecipeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    recipe?: RecipeUpdateOneRequiredWithoutSavesNestedInput
    user?: UserUpdateOneRequiredWithoutSavedRecipesNestedInput
  }

  export type SavedRecipeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SavedRecipeCreateManyInput = {
    id?: string
    recipeId: string
    userId: string
    savedAt?: Date | string
    notes?: string | null
  }

  export type SavedRecipeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SavedRecipeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecipeReviewCreateInput = {
    id?: string
    rating: number
    comment?: string | null
    images?: RecipeReviewCreateimagesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    recipe: RecipeCreateNestedOneWithoutReviewsInput
    user: UserCreateNestedOneWithoutRecipeReviewsInput
  }

  export type RecipeReviewUncheckedCreateInput = {
    id?: string
    recipeId: string
    userId: string
    rating: number
    comment?: string | null
    images?: RecipeReviewCreateimagesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecipeReviewUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeReviewUpdateimagesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recipe?: RecipeUpdateOneRequiredWithoutReviewsNestedInput
    user?: UserUpdateOneRequiredWithoutRecipeReviewsNestedInput
  }

  export type RecipeReviewUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeReviewUpdateimagesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipeReviewCreateManyInput = {
    id?: string
    recipeId: string
    userId: string
    rating: number
    comment?: string | null
    images?: RecipeReviewCreateimagesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecipeReviewUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeReviewUpdateimagesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipeReviewUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeReviewUpdateimagesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MadeRecipeCreateInput = {
    id?: string
    madeAt?: Date | string
    rating?: number | null
    notes?: string | null
    images?: MadeRecipeCreateimagesInput | string[]
    recipe: RecipeCreateNestedOneWithoutMadeRecipesInput
    user: UserCreateNestedOneWithoutMadeRecipesInput
  }

  export type MadeRecipeUncheckedCreateInput = {
    id?: string
    recipeId: string
    userId: string
    madeAt?: Date | string
    rating?: number | null
    notes?: string | null
    images?: MadeRecipeCreateimagesInput | string[]
  }

  export type MadeRecipeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    madeAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    images?: MadeRecipeUpdateimagesInput | string[]
    recipe?: RecipeUpdateOneRequiredWithoutMadeRecipesNestedInput
    user?: UserUpdateOneRequiredWithoutMadeRecipesNestedInput
  }

  export type MadeRecipeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    madeAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    images?: MadeRecipeUpdateimagesInput | string[]
  }

  export type MadeRecipeCreateManyInput = {
    id?: string
    recipeId: string
    userId: string
    madeAt?: Date | string
    rating?: number | null
    notes?: string | null
    images?: MadeRecipeCreateimagesInput | string[]
  }

  export type MadeRecipeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    madeAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    images?: MadeRecipeUpdateimagesInput | string[]
  }

  export type MadeRecipeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    madeAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    images?: MadeRecipeUpdateimagesInput | string[]
  }

  export type FollowCreateInput = {
    id?: string
    createdAt?: Date | string
    follower: UserCreateNestedOneWithoutFollowingInput
    following: UserCreateNestedOneWithoutFollowersInput
  }

  export type FollowUncheckedCreateInput = {
    id?: string
    followerId: string
    followingId: string
    createdAt?: Date | string
  }

  export type FollowUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    follower?: UserUpdateOneRequiredWithoutFollowingNestedInput
    following?: UserUpdateOneRequiredWithoutFollowersNestedInput
  }

  export type FollowUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    followerId?: StringFieldUpdateOperationsInput | string
    followingId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowCreateManyInput = {
    id?: string
    followerId: string
    followingId: string
    createdAt?: Date | string
  }

  export type FollowUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    followerId?: StringFieldUpdateOperationsInput | string
    followingId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealPlanCreateInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMealPlansInput
    items?: MealPlanItemCreateNestedManyWithoutMealPlanInput
  }

  export type MealPlanUncheckedCreateInput = {
    id?: string
    userId: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: MealPlanItemUncheckedCreateNestedManyWithoutMealPlanInput
  }

  export type MealPlanUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMealPlansNestedInput
    items?: MealPlanItemUpdateManyWithoutMealPlanNestedInput
  }

  export type MealPlanUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: MealPlanItemUncheckedUpdateManyWithoutMealPlanNestedInput
  }

  export type MealPlanCreateManyInput = {
    id?: string
    userId: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MealPlanUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealPlanUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealPlanItemCreateInput = {
    id?: string
    date: Date | string
    mealType: string
    servings?: number
    mealPlan: MealPlanCreateNestedOneWithoutItemsInput
    recipe: RecipeCreateNestedOneWithoutMealPlanItemsInput
  }

  export type MealPlanItemUncheckedCreateInput = {
    id?: string
    mealPlanId: string
    recipeId: string
    date: Date | string
    mealType: string
    servings?: number
  }

  export type MealPlanItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mealType?: StringFieldUpdateOperationsInput | string
    servings?: IntFieldUpdateOperationsInput | number
    mealPlan?: MealPlanUpdateOneRequiredWithoutItemsNestedInput
    recipe?: RecipeUpdateOneRequiredWithoutMealPlanItemsNestedInput
  }

  export type MealPlanItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    mealPlanId?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mealType?: StringFieldUpdateOperationsInput | string
    servings?: IntFieldUpdateOperationsInput | number
  }

  export type MealPlanItemCreateManyInput = {
    id?: string
    mealPlanId: string
    recipeId: string
    date: Date | string
    mealType: string
    servings?: number
  }

  export type MealPlanItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mealType?: StringFieldUpdateOperationsInput | string
    servings?: IntFieldUpdateOperationsInput | number
  }

  export type MealPlanItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    mealPlanId?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mealType?: StringFieldUpdateOperationsInput | string
    servings?: IntFieldUpdateOperationsInput | number
  }

  export type ShoppingListCreateInput = {
    id?: string
    name: string
    items: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutShoppingListsInput
  }

  export type ShoppingListUncheckedCreateInput = {
    id?: string
    userId: string
    name: string
    items: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShoppingListUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    items?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutShoppingListsNestedInput
  }

  export type ShoppingListUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    items?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShoppingListCreateManyInput = {
    id?: string
    userId: string
    name: string
    items: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShoppingListUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    items?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShoppingListUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    items?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrendingRecipeCreateInput = {
    id?: string
    recipeId: string
    score: number
    trendingAt?: Date | string
  }

  export type TrendingRecipeUncheckedCreateInput = {
    id?: string
    recipeId: string
    score: number
    trendingAt?: Date | string
  }

  export type TrendingRecipeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    trendingAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrendingRecipeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    trendingAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrendingRecipeCreateManyInput = {
    id?: string
    recipeId: string
    score: number
    trendingAt?: Date | string
  }

  export type TrendingRecipeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    trendingAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrendingRecipeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    trendingAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type RecipeListRelationFilter = {
    every?: RecipeWhereInput
    some?: RecipeWhereInput
    none?: RecipeWhereInput
  }

  export type SavedRecipeListRelationFilter = {
    every?: SavedRecipeWhereInput
    some?: SavedRecipeWhereInput
    none?: SavedRecipeWhereInput
  }

  export type RecipeLikeListRelationFilter = {
    every?: RecipeLikeWhereInput
    some?: RecipeLikeWhereInput
    none?: RecipeLikeWhereInput
  }

  export type RecipeReviewListRelationFilter = {
    every?: RecipeReviewWhereInput
    some?: RecipeReviewWhereInput
    none?: RecipeReviewWhereInput
  }

  export type MadeRecipeListRelationFilter = {
    every?: MadeRecipeWhereInput
    some?: MadeRecipeWhereInput
    none?: MadeRecipeWhereInput
  }

  export type MealPlanListRelationFilter = {
    every?: MealPlanWhereInput
    some?: MealPlanWhereInput
    none?: MealPlanWhereInput
  }

  export type FoodImageListRelationFilter = {
    every?: FoodImageWhereInput
    some?: FoodImageWhereInput
    none?: FoodImageWhereInput
  }

  export type FollowListRelationFilter = {
    every?: FollowWhereInput
    some?: FollowWhereInput
    none?: FollowWhereInput
  }

  export type ShoppingListListRelationFilter = {
    every?: ShoppingListWhereInput
    some?: ShoppingListWhereInput
    none?: ShoppingListWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RecipeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SavedRecipeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RecipeLikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RecipeReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MadeRecipeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MealPlanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FoodImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FollowOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShoppingListOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    name?: SortOrder
    bio?: SortOrder
    avatar?: SortOrder
    verified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    password?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    name?: SortOrder
    bio?: SortOrder
    avatar?: SortOrder
    verified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    name?: SortOrder
    bio?: SortOrder
    avatar?: SortOrder
    verified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    password?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type RecipeNullableScalarRelationFilter = {
    is?: RecipeWhereInput | null
    isNot?: RecipeWhereInput | null
  }

  export type FoodImageCountOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    base64?: SortOrder
    uploadedAt?: SortOrder
    analysis?: SortOrder
    userId?: SortOrder
    recipeId?: SortOrder
  }

  export type FoodImageMaxOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    base64?: SortOrder
    uploadedAt?: SortOrder
    userId?: SortOrder
    recipeId?: SortOrder
  }

  export type FoodImageMinOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    base64?: SortOrder
    uploadedAt?: SortOrder
    userId?: SortOrder
    recipeId?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type RecipeIngredientListRelationFilter = {
    every?: RecipeIngredientWhereInput
    some?: RecipeIngredientWhereInput
    none?: RecipeIngredientWhereInput
  }

  export type MealPlanItemListRelationFilter = {
    every?: MealPlanItemWhereInput
    some?: MealPlanItemWhereInput
    none?: MealPlanItemWhereInput
  }

  export type RecipeIngredientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MealPlanItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RecipeCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    instructions?: SortOrder
    prepTime?: SortOrder
    cookTime?: SortOrder
    servings?: SortOrder
    difficulty?: SortOrder
    cuisine?: SortOrder
    category?: SortOrder
    images?: SortOrder
    mainImage?: SortOrder
    aiTags?: SortOrder
    userTags?: SortOrder
    allTags?: SortOrder
    pairings?: SortOrder
    nutrition?: SortOrder
    likesCount?: SortOrder
    savesCount?: SortOrder
    madeCount?: SortOrder
    viewsCount?: SortOrder
    avgRating?: SortOrder
    reviewsCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    publishedAt?: SortOrder
    isPublished?: SortOrder
    authorId?: SortOrder
  }

  export type RecipeAvgOrderByAggregateInput = {
    prepTime?: SortOrder
    cookTime?: SortOrder
    servings?: SortOrder
    likesCount?: SortOrder
    savesCount?: SortOrder
    madeCount?: SortOrder
    viewsCount?: SortOrder
    avgRating?: SortOrder
    reviewsCount?: SortOrder
  }

  export type RecipeMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    prepTime?: SortOrder
    cookTime?: SortOrder
    servings?: SortOrder
    difficulty?: SortOrder
    cuisine?: SortOrder
    category?: SortOrder
    mainImage?: SortOrder
    likesCount?: SortOrder
    savesCount?: SortOrder
    madeCount?: SortOrder
    viewsCount?: SortOrder
    avgRating?: SortOrder
    reviewsCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    publishedAt?: SortOrder
    isPublished?: SortOrder
    authorId?: SortOrder
  }

  export type RecipeMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    prepTime?: SortOrder
    cookTime?: SortOrder
    servings?: SortOrder
    difficulty?: SortOrder
    cuisine?: SortOrder
    category?: SortOrder
    mainImage?: SortOrder
    likesCount?: SortOrder
    savesCount?: SortOrder
    madeCount?: SortOrder
    viewsCount?: SortOrder
    avgRating?: SortOrder
    reviewsCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    publishedAt?: SortOrder
    isPublished?: SortOrder
    authorId?: SortOrder
  }

  export type RecipeSumOrderByAggregateInput = {
    prepTime?: SortOrder
    cookTime?: SortOrder
    servings?: SortOrder
    likesCount?: SortOrder
    savesCount?: SortOrder
    madeCount?: SortOrder
    viewsCount?: SortOrder
    avgRating?: SortOrder
    reviewsCount?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IngredientCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    commonUnit?: SortOrder
    nutritionPer100g?: SortOrder
    aliases?: SortOrder
    createdAt?: SortOrder
  }

  export type IngredientMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    commonUnit?: SortOrder
    createdAt?: SortOrder
  }

  export type IngredientMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    commonUnit?: SortOrder
    createdAt?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type RecipeScalarRelationFilter = {
    is?: RecipeWhereInput
    isNot?: RecipeWhereInput
  }

  export type IngredientScalarRelationFilter = {
    is?: IngredientWhereInput
    isNot?: IngredientWhereInput
  }

  export type RecipeIngredientRecipeIdIngredientIdCompoundUniqueInput = {
    recipeId: string
    ingredientId: string
  }

  export type RecipeIngredientCountOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    ingredientId?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    preparation?: SortOrder
    optional?: SortOrder
  }

  export type RecipeIngredientAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type RecipeIngredientMaxOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    ingredientId?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    preparation?: SortOrder
    optional?: SortOrder
  }

  export type RecipeIngredientMinOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    ingredientId?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    preparation?: SortOrder
    optional?: SortOrder
  }

  export type RecipeIngredientSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type RecipeLikeRecipeIdUserIdCompoundUniqueInput = {
    recipeId: string
    userId: string
  }

  export type RecipeLikeCountOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    userId?: SortOrder
    likedAt?: SortOrder
  }

  export type RecipeLikeMaxOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    userId?: SortOrder
    likedAt?: SortOrder
  }

  export type RecipeLikeMinOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    userId?: SortOrder
    likedAt?: SortOrder
  }

  export type SavedRecipeRecipeIdUserIdCompoundUniqueInput = {
    recipeId: string
    userId: string
  }

  export type SavedRecipeCountOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    userId?: SortOrder
    savedAt?: SortOrder
    notes?: SortOrder
  }

  export type SavedRecipeMaxOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    userId?: SortOrder
    savedAt?: SortOrder
    notes?: SortOrder
  }

  export type SavedRecipeMinOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    userId?: SortOrder
    savedAt?: SortOrder
    notes?: SortOrder
  }

  export type RecipeReviewRecipeIdUserIdCompoundUniqueInput = {
    recipeId: string
    userId: string
  }

  export type RecipeReviewCountOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    images?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RecipeReviewAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type RecipeReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RecipeReviewMinOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RecipeReviewSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type MadeRecipeCountOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    userId?: SortOrder
    madeAt?: SortOrder
    rating?: SortOrder
    notes?: SortOrder
    images?: SortOrder
  }

  export type MadeRecipeAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type MadeRecipeMaxOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    userId?: SortOrder
    madeAt?: SortOrder
    rating?: SortOrder
    notes?: SortOrder
  }

  export type MadeRecipeMinOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    userId?: SortOrder
    madeAt?: SortOrder
    rating?: SortOrder
    notes?: SortOrder
  }

  export type MadeRecipeSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type FollowFollowerIdFollowingIdCompoundUniqueInput = {
    followerId: string
    followingId: string
  }

  export type FollowCountOrderByAggregateInput = {
    id?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
    createdAt?: SortOrder
  }

  export type FollowMaxOrderByAggregateInput = {
    id?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
    createdAt?: SortOrder
  }

  export type FollowMinOrderByAggregateInput = {
    id?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
    createdAt?: SortOrder
  }

  export type MealPlanCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MealPlanMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MealPlanMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MealPlanScalarRelationFilter = {
    is?: MealPlanWhereInput
    isNot?: MealPlanWhereInput
  }

  export type MealPlanItemCountOrderByAggregateInput = {
    id?: SortOrder
    mealPlanId?: SortOrder
    recipeId?: SortOrder
    date?: SortOrder
    mealType?: SortOrder
    servings?: SortOrder
  }

  export type MealPlanItemAvgOrderByAggregateInput = {
    servings?: SortOrder
  }

  export type MealPlanItemMaxOrderByAggregateInput = {
    id?: SortOrder
    mealPlanId?: SortOrder
    recipeId?: SortOrder
    date?: SortOrder
    mealType?: SortOrder
    servings?: SortOrder
  }

  export type MealPlanItemMinOrderByAggregateInput = {
    id?: SortOrder
    mealPlanId?: SortOrder
    recipeId?: SortOrder
    date?: SortOrder
    mealType?: SortOrder
    servings?: SortOrder
  }

  export type MealPlanItemSumOrderByAggregateInput = {
    servings?: SortOrder
  }

  export type ShoppingListCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    items?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShoppingListMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShoppingListMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrendingRecipeCountOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    score?: SortOrder
    trendingAt?: SortOrder
  }

  export type TrendingRecipeAvgOrderByAggregateInput = {
    score?: SortOrder
  }

  export type TrendingRecipeMaxOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    score?: SortOrder
    trendingAt?: SortOrder
  }

  export type TrendingRecipeMinOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    score?: SortOrder
    trendingAt?: SortOrder
  }

  export type TrendingRecipeSumOrderByAggregateInput = {
    score?: SortOrder
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type RecipeCreateNestedManyWithoutAuthorInput = {
    create?: XOR<RecipeCreateWithoutAuthorInput, RecipeUncheckedCreateWithoutAuthorInput> | RecipeCreateWithoutAuthorInput[] | RecipeUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: RecipeCreateOrConnectWithoutAuthorInput | RecipeCreateOrConnectWithoutAuthorInput[]
    createMany?: RecipeCreateManyAuthorInputEnvelope
    connect?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
  }

  export type SavedRecipeCreateNestedManyWithoutUserInput = {
    create?: XOR<SavedRecipeCreateWithoutUserInput, SavedRecipeUncheckedCreateWithoutUserInput> | SavedRecipeCreateWithoutUserInput[] | SavedRecipeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SavedRecipeCreateOrConnectWithoutUserInput | SavedRecipeCreateOrConnectWithoutUserInput[]
    createMany?: SavedRecipeCreateManyUserInputEnvelope
    connect?: SavedRecipeWhereUniqueInput | SavedRecipeWhereUniqueInput[]
  }

  export type RecipeLikeCreateNestedManyWithoutUserInput = {
    create?: XOR<RecipeLikeCreateWithoutUserInput, RecipeLikeUncheckedCreateWithoutUserInput> | RecipeLikeCreateWithoutUserInput[] | RecipeLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecipeLikeCreateOrConnectWithoutUserInput | RecipeLikeCreateOrConnectWithoutUserInput[]
    createMany?: RecipeLikeCreateManyUserInputEnvelope
    connect?: RecipeLikeWhereUniqueInput | RecipeLikeWhereUniqueInput[]
  }

  export type RecipeReviewCreateNestedManyWithoutUserInput = {
    create?: XOR<RecipeReviewCreateWithoutUserInput, RecipeReviewUncheckedCreateWithoutUserInput> | RecipeReviewCreateWithoutUserInput[] | RecipeReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecipeReviewCreateOrConnectWithoutUserInput | RecipeReviewCreateOrConnectWithoutUserInput[]
    createMany?: RecipeReviewCreateManyUserInputEnvelope
    connect?: RecipeReviewWhereUniqueInput | RecipeReviewWhereUniqueInput[]
  }

  export type MadeRecipeCreateNestedManyWithoutUserInput = {
    create?: XOR<MadeRecipeCreateWithoutUserInput, MadeRecipeUncheckedCreateWithoutUserInput> | MadeRecipeCreateWithoutUserInput[] | MadeRecipeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MadeRecipeCreateOrConnectWithoutUserInput | MadeRecipeCreateOrConnectWithoutUserInput[]
    createMany?: MadeRecipeCreateManyUserInputEnvelope
    connect?: MadeRecipeWhereUniqueInput | MadeRecipeWhereUniqueInput[]
  }

  export type MealPlanCreateNestedManyWithoutUserInput = {
    create?: XOR<MealPlanCreateWithoutUserInput, MealPlanUncheckedCreateWithoutUserInput> | MealPlanCreateWithoutUserInput[] | MealPlanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MealPlanCreateOrConnectWithoutUserInput | MealPlanCreateOrConnectWithoutUserInput[]
    createMany?: MealPlanCreateManyUserInputEnvelope
    connect?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
  }

  export type FoodImageCreateNestedManyWithoutUserInput = {
    create?: XOR<FoodImageCreateWithoutUserInput, FoodImageUncheckedCreateWithoutUserInput> | FoodImageCreateWithoutUserInput[] | FoodImageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FoodImageCreateOrConnectWithoutUserInput | FoodImageCreateOrConnectWithoutUserInput[]
    createMany?: FoodImageCreateManyUserInputEnvelope
    connect?: FoodImageWhereUniqueInput | FoodImageWhereUniqueInput[]
  }

  export type FollowCreateNestedManyWithoutFollowerInput = {
    create?: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput> | FollowCreateWithoutFollowerInput[] | FollowUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowerInput | FollowCreateOrConnectWithoutFollowerInput[]
    createMany?: FollowCreateManyFollowerInputEnvelope
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
  }

  export type FollowCreateNestedManyWithoutFollowingInput = {
    create?: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput> | FollowCreateWithoutFollowingInput[] | FollowUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowingInput | FollowCreateOrConnectWithoutFollowingInput[]
    createMany?: FollowCreateManyFollowingInputEnvelope
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
  }

  export type ShoppingListCreateNestedManyWithoutUserInput = {
    create?: XOR<ShoppingListCreateWithoutUserInput, ShoppingListUncheckedCreateWithoutUserInput> | ShoppingListCreateWithoutUserInput[] | ShoppingListUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShoppingListCreateOrConnectWithoutUserInput | ShoppingListCreateOrConnectWithoutUserInput[]
    createMany?: ShoppingListCreateManyUserInputEnvelope
    connect?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type RecipeUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<RecipeCreateWithoutAuthorInput, RecipeUncheckedCreateWithoutAuthorInput> | RecipeCreateWithoutAuthorInput[] | RecipeUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: RecipeCreateOrConnectWithoutAuthorInput | RecipeCreateOrConnectWithoutAuthorInput[]
    createMany?: RecipeCreateManyAuthorInputEnvelope
    connect?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
  }

  export type SavedRecipeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SavedRecipeCreateWithoutUserInput, SavedRecipeUncheckedCreateWithoutUserInput> | SavedRecipeCreateWithoutUserInput[] | SavedRecipeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SavedRecipeCreateOrConnectWithoutUserInput | SavedRecipeCreateOrConnectWithoutUserInput[]
    createMany?: SavedRecipeCreateManyUserInputEnvelope
    connect?: SavedRecipeWhereUniqueInput | SavedRecipeWhereUniqueInput[]
  }

  export type RecipeLikeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RecipeLikeCreateWithoutUserInput, RecipeLikeUncheckedCreateWithoutUserInput> | RecipeLikeCreateWithoutUserInput[] | RecipeLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecipeLikeCreateOrConnectWithoutUserInput | RecipeLikeCreateOrConnectWithoutUserInput[]
    createMany?: RecipeLikeCreateManyUserInputEnvelope
    connect?: RecipeLikeWhereUniqueInput | RecipeLikeWhereUniqueInput[]
  }

  export type RecipeReviewUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RecipeReviewCreateWithoutUserInput, RecipeReviewUncheckedCreateWithoutUserInput> | RecipeReviewCreateWithoutUserInput[] | RecipeReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecipeReviewCreateOrConnectWithoutUserInput | RecipeReviewCreateOrConnectWithoutUserInput[]
    createMany?: RecipeReviewCreateManyUserInputEnvelope
    connect?: RecipeReviewWhereUniqueInput | RecipeReviewWhereUniqueInput[]
  }

  export type MadeRecipeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MadeRecipeCreateWithoutUserInput, MadeRecipeUncheckedCreateWithoutUserInput> | MadeRecipeCreateWithoutUserInput[] | MadeRecipeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MadeRecipeCreateOrConnectWithoutUserInput | MadeRecipeCreateOrConnectWithoutUserInput[]
    createMany?: MadeRecipeCreateManyUserInputEnvelope
    connect?: MadeRecipeWhereUniqueInput | MadeRecipeWhereUniqueInput[]
  }

  export type MealPlanUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MealPlanCreateWithoutUserInput, MealPlanUncheckedCreateWithoutUserInput> | MealPlanCreateWithoutUserInput[] | MealPlanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MealPlanCreateOrConnectWithoutUserInput | MealPlanCreateOrConnectWithoutUserInput[]
    createMany?: MealPlanCreateManyUserInputEnvelope
    connect?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
  }

  export type FoodImageUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FoodImageCreateWithoutUserInput, FoodImageUncheckedCreateWithoutUserInput> | FoodImageCreateWithoutUserInput[] | FoodImageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FoodImageCreateOrConnectWithoutUserInput | FoodImageCreateOrConnectWithoutUserInput[]
    createMany?: FoodImageCreateManyUserInputEnvelope
    connect?: FoodImageWhereUniqueInput | FoodImageWhereUniqueInput[]
  }

  export type FollowUncheckedCreateNestedManyWithoutFollowerInput = {
    create?: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput> | FollowCreateWithoutFollowerInput[] | FollowUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowerInput | FollowCreateOrConnectWithoutFollowerInput[]
    createMany?: FollowCreateManyFollowerInputEnvelope
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
  }

  export type FollowUncheckedCreateNestedManyWithoutFollowingInput = {
    create?: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput> | FollowCreateWithoutFollowingInput[] | FollowUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowingInput | FollowCreateOrConnectWithoutFollowingInput[]
    createMany?: FollowCreateManyFollowingInputEnvelope
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
  }

  export type ShoppingListUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ShoppingListCreateWithoutUserInput, ShoppingListUncheckedCreateWithoutUserInput> | ShoppingListCreateWithoutUserInput[] | ShoppingListUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShoppingListCreateOrConnectWithoutUserInput | ShoppingListCreateOrConnectWithoutUserInput[]
    createMany?: ShoppingListCreateManyUserInputEnvelope
    connect?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type RecipeUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<RecipeCreateWithoutAuthorInput, RecipeUncheckedCreateWithoutAuthorInput> | RecipeCreateWithoutAuthorInput[] | RecipeUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: RecipeCreateOrConnectWithoutAuthorInput | RecipeCreateOrConnectWithoutAuthorInput[]
    upsert?: RecipeUpsertWithWhereUniqueWithoutAuthorInput | RecipeUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: RecipeCreateManyAuthorInputEnvelope
    set?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    disconnect?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    delete?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    connect?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    update?: RecipeUpdateWithWhereUniqueWithoutAuthorInput | RecipeUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: RecipeUpdateManyWithWhereWithoutAuthorInput | RecipeUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: RecipeScalarWhereInput | RecipeScalarWhereInput[]
  }

  export type SavedRecipeUpdateManyWithoutUserNestedInput = {
    create?: XOR<SavedRecipeCreateWithoutUserInput, SavedRecipeUncheckedCreateWithoutUserInput> | SavedRecipeCreateWithoutUserInput[] | SavedRecipeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SavedRecipeCreateOrConnectWithoutUserInput | SavedRecipeCreateOrConnectWithoutUserInput[]
    upsert?: SavedRecipeUpsertWithWhereUniqueWithoutUserInput | SavedRecipeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SavedRecipeCreateManyUserInputEnvelope
    set?: SavedRecipeWhereUniqueInput | SavedRecipeWhereUniqueInput[]
    disconnect?: SavedRecipeWhereUniqueInput | SavedRecipeWhereUniqueInput[]
    delete?: SavedRecipeWhereUniqueInput | SavedRecipeWhereUniqueInput[]
    connect?: SavedRecipeWhereUniqueInput | SavedRecipeWhereUniqueInput[]
    update?: SavedRecipeUpdateWithWhereUniqueWithoutUserInput | SavedRecipeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SavedRecipeUpdateManyWithWhereWithoutUserInput | SavedRecipeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SavedRecipeScalarWhereInput | SavedRecipeScalarWhereInput[]
  }

  export type RecipeLikeUpdateManyWithoutUserNestedInput = {
    create?: XOR<RecipeLikeCreateWithoutUserInput, RecipeLikeUncheckedCreateWithoutUserInput> | RecipeLikeCreateWithoutUserInput[] | RecipeLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecipeLikeCreateOrConnectWithoutUserInput | RecipeLikeCreateOrConnectWithoutUserInput[]
    upsert?: RecipeLikeUpsertWithWhereUniqueWithoutUserInput | RecipeLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RecipeLikeCreateManyUserInputEnvelope
    set?: RecipeLikeWhereUniqueInput | RecipeLikeWhereUniqueInput[]
    disconnect?: RecipeLikeWhereUniqueInput | RecipeLikeWhereUniqueInput[]
    delete?: RecipeLikeWhereUniqueInput | RecipeLikeWhereUniqueInput[]
    connect?: RecipeLikeWhereUniqueInput | RecipeLikeWhereUniqueInput[]
    update?: RecipeLikeUpdateWithWhereUniqueWithoutUserInput | RecipeLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RecipeLikeUpdateManyWithWhereWithoutUserInput | RecipeLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RecipeLikeScalarWhereInput | RecipeLikeScalarWhereInput[]
  }

  export type RecipeReviewUpdateManyWithoutUserNestedInput = {
    create?: XOR<RecipeReviewCreateWithoutUserInput, RecipeReviewUncheckedCreateWithoutUserInput> | RecipeReviewCreateWithoutUserInput[] | RecipeReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecipeReviewCreateOrConnectWithoutUserInput | RecipeReviewCreateOrConnectWithoutUserInput[]
    upsert?: RecipeReviewUpsertWithWhereUniqueWithoutUserInput | RecipeReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RecipeReviewCreateManyUserInputEnvelope
    set?: RecipeReviewWhereUniqueInput | RecipeReviewWhereUniqueInput[]
    disconnect?: RecipeReviewWhereUniqueInput | RecipeReviewWhereUniqueInput[]
    delete?: RecipeReviewWhereUniqueInput | RecipeReviewWhereUniqueInput[]
    connect?: RecipeReviewWhereUniqueInput | RecipeReviewWhereUniqueInput[]
    update?: RecipeReviewUpdateWithWhereUniqueWithoutUserInput | RecipeReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RecipeReviewUpdateManyWithWhereWithoutUserInput | RecipeReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RecipeReviewScalarWhereInput | RecipeReviewScalarWhereInput[]
  }

  export type MadeRecipeUpdateManyWithoutUserNestedInput = {
    create?: XOR<MadeRecipeCreateWithoutUserInput, MadeRecipeUncheckedCreateWithoutUserInput> | MadeRecipeCreateWithoutUserInput[] | MadeRecipeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MadeRecipeCreateOrConnectWithoutUserInput | MadeRecipeCreateOrConnectWithoutUserInput[]
    upsert?: MadeRecipeUpsertWithWhereUniqueWithoutUserInput | MadeRecipeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MadeRecipeCreateManyUserInputEnvelope
    set?: MadeRecipeWhereUniqueInput | MadeRecipeWhereUniqueInput[]
    disconnect?: MadeRecipeWhereUniqueInput | MadeRecipeWhereUniqueInput[]
    delete?: MadeRecipeWhereUniqueInput | MadeRecipeWhereUniqueInput[]
    connect?: MadeRecipeWhereUniqueInput | MadeRecipeWhereUniqueInput[]
    update?: MadeRecipeUpdateWithWhereUniqueWithoutUserInput | MadeRecipeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MadeRecipeUpdateManyWithWhereWithoutUserInput | MadeRecipeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MadeRecipeScalarWhereInput | MadeRecipeScalarWhereInput[]
  }

  export type MealPlanUpdateManyWithoutUserNestedInput = {
    create?: XOR<MealPlanCreateWithoutUserInput, MealPlanUncheckedCreateWithoutUserInput> | MealPlanCreateWithoutUserInput[] | MealPlanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MealPlanCreateOrConnectWithoutUserInput | MealPlanCreateOrConnectWithoutUserInput[]
    upsert?: MealPlanUpsertWithWhereUniqueWithoutUserInput | MealPlanUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MealPlanCreateManyUserInputEnvelope
    set?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    disconnect?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    delete?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    connect?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    update?: MealPlanUpdateWithWhereUniqueWithoutUserInput | MealPlanUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MealPlanUpdateManyWithWhereWithoutUserInput | MealPlanUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MealPlanScalarWhereInput | MealPlanScalarWhereInput[]
  }

  export type FoodImageUpdateManyWithoutUserNestedInput = {
    create?: XOR<FoodImageCreateWithoutUserInput, FoodImageUncheckedCreateWithoutUserInput> | FoodImageCreateWithoutUserInput[] | FoodImageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FoodImageCreateOrConnectWithoutUserInput | FoodImageCreateOrConnectWithoutUserInput[]
    upsert?: FoodImageUpsertWithWhereUniqueWithoutUserInput | FoodImageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FoodImageCreateManyUserInputEnvelope
    set?: FoodImageWhereUniqueInput | FoodImageWhereUniqueInput[]
    disconnect?: FoodImageWhereUniqueInput | FoodImageWhereUniqueInput[]
    delete?: FoodImageWhereUniqueInput | FoodImageWhereUniqueInput[]
    connect?: FoodImageWhereUniqueInput | FoodImageWhereUniqueInput[]
    update?: FoodImageUpdateWithWhereUniqueWithoutUserInput | FoodImageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FoodImageUpdateManyWithWhereWithoutUserInput | FoodImageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FoodImageScalarWhereInput | FoodImageScalarWhereInput[]
  }

  export type FollowUpdateManyWithoutFollowerNestedInput = {
    create?: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput> | FollowCreateWithoutFollowerInput[] | FollowUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowerInput | FollowCreateOrConnectWithoutFollowerInput[]
    upsert?: FollowUpsertWithWhereUniqueWithoutFollowerInput | FollowUpsertWithWhereUniqueWithoutFollowerInput[]
    createMany?: FollowCreateManyFollowerInputEnvelope
    set?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    disconnect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    delete?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    update?: FollowUpdateWithWhereUniqueWithoutFollowerInput | FollowUpdateWithWhereUniqueWithoutFollowerInput[]
    updateMany?: FollowUpdateManyWithWhereWithoutFollowerInput | FollowUpdateManyWithWhereWithoutFollowerInput[]
    deleteMany?: FollowScalarWhereInput | FollowScalarWhereInput[]
  }

  export type FollowUpdateManyWithoutFollowingNestedInput = {
    create?: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput> | FollowCreateWithoutFollowingInput[] | FollowUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowingInput | FollowCreateOrConnectWithoutFollowingInput[]
    upsert?: FollowUpsertWithWhereUniqueWithoutFollowingInput | FollowUpsertWithWhereUniqueWithoutFollowingInput[]
    createMany?: FollowCreateManyFollowingInputEnvelope
    set?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    disconnect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    delete?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    update?: FollowUpdateWithWhereUniqueWithoutFollowingInput | FollowUpdateWithWhereUniqueWithoutFollowingInput[]
    updateMany?: FollowUpdateManyWithWhereWithoutFollowingInput | FollowUpdateManyWithWhereWithoutFollowingInput[]
    deleteMany?: FollowScalarWhereInput | FollowScalarWhereInput[]
  }

  export type ShoppingListUpdateManyWithoutUserNestedInput = {
    create?: XOR<ShoppingListCreateWithoutUserInput, ShoppingListUncheckedCreateWithoutUserInput> | ShoppingListCreateWithoutUserInput[] | ShoppingListUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShoppingListCreateOrConnectWithoutUserInput | ShoppingListCreateOrConnectWithoutUserInput[]
    upsert?: ShoppingListUpsertWithWhereUniqueWithoutUserInput | ShoppingListUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ShoppingListCreateManyUserInputEnvelope
    set?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    disconnect?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    delete?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    connect?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    update?: ShoppingListUpdateWithWhereUniqueWithoutUserInput | ShoppingListUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ShoppingListUpdateManyWithWhereWithoutUserInput | ShoppingListUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ShoppingListScalarWhereInput | ShoppingListScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type RecipeUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<RecipeCreateWithoutAuthorInput, RecipeUncheckedCreateWithoutAuthorInput> | RecipeCreateWithoutAuthorInput[] | RecipeUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: RecipeCreateOrConnectWithoutAuthorInput | RecipeCreateOrConnectWithoutAuthorInput[]
    upsert?: RecipeUpsertWithWhereUniqueWithoutAuthorInput | RecipeUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: RecipeCreateManyAuthorInputEnvelope
    set?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    disconnect?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    delete?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    connect?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    update?: RecipeUpdateWithWhereUniqueWithoutAuthorInput | RecipeUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: RecipeUpdateManyWithWhereWithoutAuthorInput | RecipeUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: RecipeScalarWhereInput | RecipeScalarWhereInput[]
  }

  export type SavedRecipeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SavedRecipeCreateWithoutUserInput, SavedRecipeUncheckedCreateWithoutUserInput> | SavedRecipeCreateWithoutUserInput[] | SavedRecipeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SavedRecipeCreateOrConnectWithoutUserInput | SavedRecipeCreateOrConnectWithoutUserInput[]
    upsert?: SavedRecipeUpsertWithWhereUniqueWithoutUserInput | SavedRecipeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SavedRecipeCreateManyUserInputEnvelope
    set?: SavedRecipeWhereUniqueInput | SavedRecipeWhereUniqueInput[]
    disconnect?: SavedRecipeWhereUniqueInput | SavedRecipeWhereUniqueInput[]
    delete?: SavedRecipeWhereUniqueInput | SavedRecipeWhereUniqueInput[]
    connect?: SavedRecipeWhereUniqueInput | SavedRecipeWhereUniqueInput[]
    update?: SavedRecipeUpdateWithWhereUniqueWithoutUserInput | SavedRecipeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SavedRecipeUpdateManyWithWhereWithoutUserInput | SavedRecipeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SavedRecipeScalarWhereInput | SavedRecipeScalarWhereInput[]
  }

  export type RecipeLikeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RecipeLikeCreateWithoutUserInput, RecipeLikeUncheckedCreateWithoutUserInput> | RecipeLikeCreateWithoutUserInput[] | RecipeLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecipeLikeCreateOrConnectWithoutUserInput | RecipeLikeCreateOrConnectWithoutUserInput[]
    upsert?: RecipeLikeUpsertWithWhereUniqueWithoutUserInput | RecipeLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RecipeLikeCreateManyUserInputEnvelope
    set?: RecipeLikeWhereUniqueInput | RecipeLikeWhereUniqueInput[]
    disconnect?: RecipeLikeWhereUniqueInput | RecipeLikeWhereUniqueInput[]
    delete?: RecipeLikeWhereUniqueInput | RecipeLikeWhereUniqueInput[]
    connect?: RecipeLikeWhereUniqueInput | RecipeLikeWhereUniqueInput[]
    update?: RecipeLikeUpdateWithWhereUniqueWithoutUserInput | RecipeLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RecipeLikeUpdateManyWithWhereWithoutUserInput | RecipeLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RecipeLikeScalarWhereInput | RecipeLikeScalarWhereInput[]
  }

  export type RecipeReviewUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RecipeReviewCreateWithoutUserInput, RecipeReviewUncheckedCreateWithoutUserInput> | RecipeReviewCreateWithoutUserInput[] | RecipeReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecipeReviewCreateOrConnectWithoutUserInput | RecipeReviewCreateOrConnectWithoutUserInput[]
    upsert?: RecipeReviewUpsertWithWhereUniqueWithoutUserInput | RecipeReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RecipeReviewCreateManyUserInputEnvelope
    set?: RecipeReviewWhereUniqueInput | RecipeReviewWhereUniqueInput[]
    disconnect?: RecipeReviewWhereUniqueInput | RecipeReviewWhereUniqueInput[]
    delete?: RecipeReviewWhereUniqueInput | RecipeReviewWhereUniqueInput[]
    connect?: RecipeReviewWhereUniqueInput | RecipeReviewWhereUniqueInput[]
    update?: RecipeReviewUpdateWithWhereUniqueWithoutUserInput | RecipeReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RecipeReviewUpdateManyWithWhereWithoutUserInput | RecipeReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RecipeReviewScalarWhereInput | RecipeReviewScalarWhereInput[]
  }

  export type MadeRecipeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MadeRecipeCreateWithoutUserInput, MadeRecipeUncheckedCreateWithoutUserInput> | MadeRecipeCreateWithoutUserInput[] | MadeRecipeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MadeRecipeCreateOrConnectWithoutUserInput | MadeRecipeCreateOrConnectWithoutUserInput[]
    upsert?: MadeRecipeUpsertWithWhereUniqueWithoutUserInput | MadeRecipeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MadeRecipeCreateManyUserInputEnvelope
    set?: MadeRecipeWhereUniqueInput | MadeRecipeWhereUniqueInput[]
    disconnect?: MadeRecipeWhereUniqueInput | MadeRecipeWhereUniqueInput[]
    delete?: MadeRecipeWhereUniqueInput | MadeRecipeWhereUniqueInput[]
    connect?: MadeRecipeWhereUniqueInput | MadeRecipeWhereUniqueInput[]
    update?: MadeRecipeUpdateWithWhereUniqueWithoutUserInput | MadeRecipeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MadeRecipeUpdateManyWithWhereWithoutUserInput | MadeRecipeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MadeRecipeScalarWhereInput | MadeRecipeScalarWhereInput[]
  }

  export type MealPlanUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MealPlanCreateWithoutUserInput, MealPlanUncheckedCreateWithoutUserInput> | MealPlanCreateWithoutUserInput[] | MealPlanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MealPlanCreateOrConnectWithoutUserInput | MealPlanCreateOrConnectWithoutUserInput[]
    upsert?: MealPlanUpsertWithWhereUniqueWithoutUserInput | MealPlanUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MealPlanCreateManyUserInputEnvelope
    set?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    disconnect?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    delete?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    connect?: MealPlanWhereUniqueInput | MealPlanWhereUniqueInput[]
    update?: MealPlanUpdateWithWhereUniqueWithoutUserInput | MealPlanUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MealPlanUpdateManyWithWhereWithoutUserInput | MealPlanUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MealPlanScalarWhereInput | MealPlanScalarWhereInput[]
  }

  export type FoodImageUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FoodImageCreateWithoutUserInput, FoodImageUncheckedCreateWithoutUserInput> | FoodImageCreateWithoutUserInput[] | FoodImageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FoodImageCreateOrConnectWithoutUserInput | FoodImageCreateOrConnectWithoutUserInput[]
    upsert?: FoodImageUpsertWithWhereUniqueWithoutUserInput | FoodImageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FoodImageCreateManyUserInputEnvelope
    set?: FoodImageWhereUniqueInput | FoodImageWhereUniqueInput[]
    disconnect?: FoodImageWhereUniqueInput | FoodImageWhereUniqueInput[]
    delete?: FoodImageWhereUniqueInput | FoodImageWhereUniqueInput[]
    connect?: FoodImageWhereUniqueInput | FoodImageWhereUniqueInput[]
    update?: FoodImageUpdateWithWhereUniqueWithoutUserInput | FoodImageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FoodImageUpdateManyWithWhereWithoutUserInput | FoodImageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FoodImageScalarWhereInput | FoodImageScalarWhereInput[]
  }

  export type FollowUncheckedUpdateManyWithoutFollowerNestedInput = {
    create?: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput> | FollowCreateWithoutFollowerInput[] | FollowUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowerInput | FollowCreateOrConnectWithoutFollowerInput[]
    upsert?: FollowUpsertWithWhereUniqueWithoutFollowerInput | FollowUpsertWithWhereUniqueWithoutFollowerInput[]
    createMany?: FollowCreateManyFollowerInputEnvelope
    set?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    disconnect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    delete?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    update?: FollowUpdateWithWhereUniqueWithoutFollowerInput | FollowUpdateWithWhereUniqueWithoutFollowerInput[]
    updateMany?: FollowUpdateManyWithWhereWithoutFollowerInput | FollowUpdateManyWithWhereWithoutFollowerInput[]
    deleteMany?: FollowScalarWhereInput | FollowScalarWhereInput[]
  }

  export type FollowUncheckedUpdateManyWithoutFollowingNestedInput = {
    create?: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput> | FollowCreateWithoutFollowingInput[] | FollowUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowingInput | FollowCreateOrConnectWithoutFollowingInput[]
    upsert?: FollowUpsertWithWhereUniqueWithoutFollowingInput | FollowUpsertWithWhereUniqueWithoutFollowingInput[]
    createMany?: FollowCreateManyFollowingInputEnvelope
    set?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    disconnect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    delete?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    update?: FollowUpdateWithWhereUniqueWithoutFollowingInput | FollowUpdateWithWhereUniqueWithoutFollowingInput[]
    updateMany?: FollowUpdateManyWithWhereWithoutFollowingInput | FollowUpdateManyWithWhereWithoutFollowingInput[]
    deleteMany?: FollowScalarWhereInput | FollowScalarWhereInput[]
  }

  export type ShoppingListUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ShoppingListCreateWithoutUserInput, ShoppingListUncheckedCreateWithoutUserInput> | ShoppingListCreateWithoutUserInput[] | ShoppingListUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShoppingListCreateOrConnectWithoutUserInput | ShoppingListCreateOrConnectWithoutUserInput[]
    upsert?: ShoppingListUpsertWithWhereUniqueWithoutUserInput | ShoppingListUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ShoppingListCreateManyUserInputEnvelope
    set?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    disconnect?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    delete?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    connect?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    update?: ShoppingListUpdateWithWhereUniqueWithoutUserInput | ShoppingListUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ShoppingListUpdateManyWithWhereWithoutUserInput | ShoppingListUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ShoppingListScalarWhereInput | ShoppingListScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutFoodImagesInput = {
    create?: XOR<UserCreateWithoutFoodImagesInput, UserUncheckedCreateWithoutFoodImagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFoodImagesInput
    connect?: UserWhereUniqueInput
  }

  export type RecipeCreateNestedOneWithoutFoodImagesInput = {
    create?: XOR<RecipeCreateWithoutFoodImagesInput, RecipeUncheckedCreateWithoutFoodImagesInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutFoodImagesInput
    connect?: RecipeWhereUniqueInput
  }

  export type UserUpdateOneWithoutFoodImagesNestedInput = {
    create?: XOR<UserCreateWithoutFoodImagesInput, UserUncheckedCreateWithoutFoodImagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFoodImagesInput
    upsert?: UserUpsertWithoutFoodImagesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFoodImagesInput, UserUpdateWithoutFoodImagesInput>, UserUncheckedUpdateWithoutFoodImagesInput>
  }

  export type RecipeUpdateOneWithoutFoodImagesNestedInput = {
    create?: XOR<RecipeCreateWithoutFoodImagesInput, RecipeUncheckedCreateWithoutFoodImagesInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutFoodImagesInput
    upsert?: RecipeUpsertWithoutFoodImagesInput
    disconnect?: RecipeWhereInput | boolean
    delete?: RecipeWhereInput | boolean
    connect?: RecipeWhereUniqueInput
    update?: XOR<XOR<RecipeUpdateToOneWithWhereWithoutFoodImagesInput, RecipeUpdateWithoutFoodImagesInput>, RecipeUncheckedUpdateWithoutFoodImagesInput>
  }

  export type RecipeCreateimagesInput = {
    set: string[]
  }

  export type RecipeCreateaiTagsInput = {
    set: string[]
  }

  export type RecipeCreateuserTagsInput = {
    set: string[]
  }

  export type RecipeCreateallTagsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutRecipesInput = {
    create?: XOR<UserCreateWithoutRecipesInput, UserUncheckedCreateWithoutRecipesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRecipesInput
    connect?: UserWhereUniqueInput
  }

  export type RecipeIngredientCreateNestedManyWithoutRecipeInput = {
    create?: XOR<RecipeIngredientCreateWithoutRecipeInput, RecipeIngredientUncheckedCreateWithoutRecipeInput> | RecipeIngredientCreateWithoutRecipeInput[] | RecipeIngredientUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeIngredientCreateOrConnectWithoutRecipeInput | RecipeIngredientCreateOrConnectWithoutRecipeInput[]
    createMany?: RecipeIngredientCreateManyRecipeInputEnvelope
    connect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
  }

  export type RecipeLikeCreateNestedManyWithoutRecipeInput = {
    create?: XOR<RecipeLikeCreateWithoutRecipeInput, RecipeLikeUncheckedCreateWithoutRecipeInput> | RecipeLikeCreateWithoutRecipeInput[] | RecipeLikeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeLikeCreateOrConnectWithoutRecipeInput | RecipeLikeCreateOrConnectWithoutRecipeInput[]
    createMany?: RecipeLikeCreateManyRecipeInputEnvelope
    connect?: RecipeLikeWhereUniqueInput | RecipeLikeWhereUniqueInput[]
  }

  export type SavedRecipeCreateNestedManyWithoutRecipeInput = {
    create?: XOR<SavedRecipeCreateWithoutRecipeInput, SavedRecipeUncheckedCreateWithoutRecipeInput> | SavedRecipeCreateWithoutRecipeInput[] | SavedRecipeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: SavedRecipeCreateOrConnectWithoutRecipeInput | SavedRecipeCreateOrConnectWithoutRecipeInput[]
    createMany?: SavedRecipeCreateManyRecipeInputEnvelope
    connect?: SavedRecipeWhereUniqueInput | SavedRecipeWhereUniqueInput[]
  }

  export type RecipeReviewCreateNestedManyWithoutRecipeInput = {
    create?: XOR<RecipeReviewCreateWithoutRecipeInput, RecipeReviewUncheckedCreateWithoutRecipeInput> | RecipeReviewCreateWithoutRecipeInput[] | RecipeReviewUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeReviewCreateOrConnectWithoutRecipeInput | RecipeReviewCreateOrConnectWithoutRecipeInput[]
    createMany?: RecipeReviewCreateManyRecipeInputEnvelope
    connect?: RecipeReviewWhereUniqueInput | RecipeReviewWhereUniqueInput[]
  }

  export type MadeRecipeCreateNestedManyWithoutRecipeInput = {
    create?: XOR<MadeRecipeCreateWithoutRecipeInput, MadeRecipeUncheckedCreateWithoutRecipeInput> | MadeRecipeCreateWithoutRecipeInput[] | MadeRecipeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: MadeRecipeCreateOrConnectWithoutRecipeInput | MadeRecipeCreateOrConnectWithoutRecipeInput[]
    createMany?: MadeRecipeCreateManyRecipeInputEnvelope
    connect?: MadeRecipeWhereUniqueInput | MadeRecipeWhereUniqueInput[]
  }

  export type MealPlanItemCreateNestedManyWithoutRecipeInput = {
    create?: XOR<MealPlanItemCreateWithoutRecipeInput, MealPlanItemUncheckedCreateWithoutRecipeInput> | MealPlanItemCreateWithoutRecipeInput[] | MealPlanItemUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: MealPlanItemCreateOrConnectWithoutRecipeInput | MealPlanItemCreateOrConnectWithoutRecipeInput[]
    createMany?: MealPlanItemCreateManyRecipeInputEnvelope
    connect?: MealPlanItemWhereUniqueInput | MealPlanItemWhereUniqueInput[]
  }

  export type FoodImageCreateNestedManyWithoutRecipeInput = {
    create?: XOR<FoodImageCreateWithoutRecipeInput, FoodImageUncheckedCreateWithoutRecipeInput> | FoodImageCreateWithoutRecipeInput[] | FoodImageUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: FoodImageCreateOrConnectWithoutRecipeInput | FoodImageCreateOrConnectWithoutRecipeInput[]
    createMany?: FoodImageCreateManyRecipeInputEnvelope
    connect?: FoodImageWhereUniqueInput | FoodImageWhereUniqueInput[]
  }

  export type RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInput = {
    create?: XOR<RecipeIngredientCreateWithoutRecipeInput, RecipeIngredientUncheckedCreateWithoutRecipeInput> | RecipeIngredientCreateWithoutRecipeInput[] | RecipeIngredientUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeIngredientCreateOrConnectWithoutRecipeInput | RecipeIngredientCreateOrConnectWithoutRecipeInput[]
    createMany?: RecipeIngredientCreateManyRecipeInputEnvelope
    connect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
  }

  export type RecipeLikeUncheckedCreateNestedManyWithoutRecipeInput = {
    create?: XOR<RecipeLikeCreateWithoutRecipeInput, RecipeLikeUncheckedCreateWithoutRecipeInput> | RecipeLikeCreateWithoutRecipeInput[] | RecipeLikeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeLikeCreateOrConnectWithoutRecipeInput | RecipeLikeCreateOrConnectWithoutRecipeInput[]
    createMany?: RecipeLikeCreateManyRecipeInputEnvelope
    connect?: RecipeLikeWhereUniqueInput | RecipeLikeWhereUniqueInput[]
  }

  export type SavedRecipeUncheckedCreateNestedManyWithoutRecipeInput = {
    create?: XOR<SavedRecipeCreateWithoutRecipeInput, SavedRecipeUncheckedCreateWithoutRecipeInput> | SavedRecipeCreateWithoutRecipeInput[] | SavedRecipeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: SavedRecipeCreateOrConnectWithoutRecipeInput | SavedRecipeCreateOrConnectWithoutRecipeInput[]
    createMany?: SavedRecipeCreateManyRecipeInputEnvelope
    connect?: SavedRecipeWhereUniqueInput | SavedRecipeWhereUniqueInput[]
  }

  export type RecipeReviewUncheckedCreateNestedManyWithoutRecipeInput = {
    create?: XOR<RecipeReviewCreateWithoutRecipeInput, RecipeReviewUncheckedCreateWithoutRecipeInput> | RecipeReviewCreateWithoutRecipeInput[] | RecipeReviewUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeReviewCreateOrConnectWithoutRecipeInput | RecipeReviewCreateOrConnectWithoutRecipeInput[]
    createMany?: RecipeReviewCreateManyRecipeInputEnvelope
    connect?: RecipeReviewWhereUniqueInput | RecipeReviewWhereUniqueInput[]
  }

  export type MadeRecipeUncheckedCreateNestedManyWithoutRecipeInput = {
    create?: XOR<MadeRecipeCreateWithoutRecipeInput, MadeRecipeUncheckedCreateWithoutRecipeInput> | MadeRecipeCreateWithoutRecipeInput[] | MadeRecipeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: MadeRecipeCreateOrConnectWithoutRecipeInput | MadeRecipeCreateOrConnectWithoutRecipeInput[]
    createMany?: MadeRecipeCreateManyRecipeInputEnvelope
    connect?: MadeRecipeWhereUniqueInput | MadeRecipeWhereUniqueInput[]
  }

  export type MealPlanItemUncheckedCreateNestedManyWithoutRecipeInput = {
    create?: XOR<MealPlanItemCreateWithoutRecipeInput, MealPlanItemUncheckedCreateWithoutRecipeInput> | MealPlanItemCreateWithoutRecipeInput[] | MealPlanItemUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: MealPlanItemCreateOrConnectWithoutRecipeInput | MealPlanItemCreateOrConnectWithoutRecipeInput[]
    createMany?: MealPlanItemCreateManyRecipeInputEnvelope
    connect?: MealPlanItemWhereUniqueInput | MealPlanItemWhereUniqueInput[]
  }

  export type FoodImageUncheckedCreateNestedManyWithoutRecipeInput = {
    create?: XOR<FoodImageCreateWithoutRecipeInput, FoodImageUncheckedCreateWithoutRecipeInput> | FoodImageCreateWithoutRecipeInput[] | FoodImageUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: FoodImageCreateOrConnectWithoutRecipeInput | FoodImageCreateOrConnectWithoutRecipeInput[]
    createMany?: FoodImageCreateManyRecipeInputEnvelope
    connect?: FoodImageWhereUniqueInput | FoodImageWhereUniqueInput[]
  }

  export type RecipeUpdateimagesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type RecipeUpdateaiTagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type RecipeUpdateuserTagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type RecipeUpdateallTagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutRecipesNestedInput = {
    create?: XOR<UserCreateWithoutRecipesInput, UserUncheckedCreateWithoutRecipesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRecipesInput
    upsert?: UserUpsertWithoutRecipesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRecipesInput, UserUpdateWithoutRecipesInput>, UserUncheckedUpdateWithoutRecipesInput>
  }

  export type RecipeIngredientUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<RecipeIngredientCreateWithoutRecipeInput, RecipeIngredientUncheckedCreateWithoutRecipeInput> | RecipeIngredientCreateWithoutRecipeInput[] | RecipeIngredientUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeIngredientCreateOrConnectWithoutRecipeInput | RecipeIngredientCreateOrConnectWithoutRecipeInput[]
    upsert?: RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInput | RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: RecipeIngredientCreateManyRecipeInputEnvelope
    set?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    disconnect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    delete?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    connect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    update?: RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInput | RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: RecipeIngredientUpdateManyWithWhereWithoutRecipeInput | RecipeIngredientUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: RecipeIngredientScalarWhereInput | RecipeIngredientScalarWhereInput[]
  }

  export type RecipeLikeUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<RecipeLikeCreateWithoutRecipeInput, RecipeLikeUncheckedCreateWithoutRecipeInput> | RecipeLikeCreateWithoutRecipeInput[] | RecipeLikeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeLikeCreateOrConnectWithoutRecipeInput | RecipeLikeCreateOrConnectWithoutRecipeInput[]
    upsert?: RecipeLikeUpsertWithWhereUniqueWithoutRecipeInput | RecipeLikeUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: RecipeLikeCreateManyRecipeInputEnvelope
    set?: RecipeLikeWhereUniqueInput | RecipeLikeWhereUniqueInput[]
    disconnect?: RecipeLikeWhereUniqueInput | RecipeLikeWhereUniqueInput[]
    delete?: RecipeLikeWhereUniqueInput | RecipeLikeWhereUniqueInput[]
    connect?: RecipeLikeWhereUniqueInput | RecipeLikeWhereUniqueInput[]
    update?: RecipeLikeUpdateWithWhereUniqueWithoutRecipeInput | RecipeLikeUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: RecipeLikeUpdateManyWithWhereWithoutRecipeInput | RecipeLikeUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: RecipeLikeScalarWhereInput | RecipeLikeScalarWhereInput[]
  }

  export type SavedRecipeUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<SavedRecipeCreateWithoutRecipeInput, SavedRecipeUncheckedCreateWithoutRecipeInput> | SavedRecipeCreateWithoutRecipeInput[] | SavedRecipeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: SavedRecipeCreateOrConnectWithoutRecipeInput | SavedRecipeCreateOrConnectWithoutRecipeInput[]
    upsert?: SavedRecipeUpsertWithWhereUniqueWithoutRecipeInput | SavedRecipeUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: SavedRecipeCreateManyRecipeInputEnvelope
    set?: SavedRecipeWhereUniqueInput | SavedRecipeWhereUniqueInput[]
    disconnect?: SavedRecipeWhereUniqueInput | SavedRecipeWhereUniqueInput[]
    delete?: SavedRecipeWhereUniqueInput | SavedRecipeWhereUniqueInput[]
    connect?: SavedRecipeWhereUniqueInput | SavedRecipeWhereUniqueInput[]
    update?: SavedRecipeUpdateWithWhereUniqueWithoutRecipeInput | SavedRecipeUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: SavedRecipeUpdateManyWithWhereWithoutRecipeInput | SavedRecipeUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: SavedRecipeScalarWhereInput | SavedRecipeScalarWhereInput[]
  }

  export type RecipeReviewUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<RecipeReviewCreateWithoutRecipeInput, RecipeReviewUncheckedCreateWithoutRecipeInput> | RecipeReviewCreateWithoutRecipeInput[] | RecipeReviewUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeReviewCreateOrConnectWithoutRecipeInput | RecipeReviewCreateOrConnectWithoutRecipeInput[]
    upsert?: RecipeReviewUpsertWithWhereUniqueWithoutRecipeInput | RecipeReviewUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: RecipeReviewCreateManyRecipeInputEnvelope
    set?: RecipeReviewWhereUniqueInput | RecipeReviewWhereUniqueInput[]
    disconnect?: RecipeReviewWhereUniqueInput | RecipeReviewWhereUniqueInput[]
    delete?: RecipeReviewWhereUniqueInput | RecipeReviewWhereUniqueInput[]
    connect?: RecipeReviewWhereUniqueInput | RecipeReviewWhereUniqueInput[]
    update?: RecipeReviewUpdateWithWhereUniqueWithoutRecipeInput | RecipeReviewUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: RecipeReviewUpdateManyWithWhereWithoutRecipeInput | RecipeReviewUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: RecipeReviewScalarWhereInput | RecipeReviewScalarWhereInput[]
  }

  export type MadeRecipeUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<MadeRecipeCreateWithoutRecipeInput, MadeRecipeUncheckedCreateWithoutRecipeInput> | MadeRecipeCreateWithoutRecipeInput[] | MadeRecipeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: MadeRecipeCreateOrConnectWithoutRecipeInput | MadeRecipeCreateOrConnectWithoutRecipeInput[]
    upsert?: MadeRecipeUpsertWithWhereUniqueWithoutRecipeInput | MadeRecipeUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: MadeRecipeCreateManyRecipeInputEnvelope
    set?: MadeRecipeWhereUniqueInput | MadeRecipeWhereUniqueInput[]
    disconnect?: MadeRecipeWhereUniqueInput | MadeRecipeWhereUniqueInput[]
    delete?: MadeRecipeWhereUniqueInput | MadeRecipeWhereUniqueInput[]
    connect?: MadeRecipeWhereUniqueInput | MadeRecipeWhereUniqueInput[]
    update?: MadeRecipeUpdateWithWhereUniqueWithoutRecipeInput | MadeRecipeUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: MadeRecipeUpdateManyWithWhereWithoutRecipeInput | MadeRecipeUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: MadeRecipeScalarWhereInput | MadeRecipeScalarWhereInput[]
  }

  export type MealPlanItemUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<MealPlanItemCreateWithoutRecipeInput, MealPlanItemUncheckedCreateWithoutRecipeInput> | MealPlanItemCreateWithoutRecipeInput[] | MealPlanItemUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: MealPlanItemCreateOrConnectWithoutRecipeInput | MealPlanItemCreateOrConnectWithoutRecipeInput[]
    upsert?: MealPlanItemUpsertWithWhereUniqueWithoutRecipeInput | MealPlanItemUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: MealPlanItemCreateManyRecipeInputEnvelope
    set?: MealPlanItemWhereUniqueInput | MealPlanItemWhereUniqueInput[]
    disconnect?: MealPlanItemWhereUniqueInput | MealPlanItemWhereUniqueInput[]
    delete?: MealPlanItemWhereUniqueInput | MealPlanItemWhereUniqueInput[]
    connect?: MealPlanItemWhereUniqueInput | MealPlanItemWhereUniqueInput[]
    update?: MealPlanItemUpdateWithWhereUniqueWithoutRecipeInput | MealPlanItemUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: MealPlanItemUpdateManyWithWhereWithoutRecipeInput | MealPlanItemUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: MealPlanItemScalarWhereInput | MealPlanItemScalarWhereInput[]
  }

  export type FoodImageUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<FoodImageCreateWithoutRecipeInput, FoodImageUncheckedCreateWithoutRecipeInput> | FoodImageCreateWithoutRecipeInput[] | FoodImageUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: FoodImageCreateOrConnectWithoutRecipeInput | FoodImageCreateOrConnectWithoutRecipeInput[]
    upsert?: FoodImageUpsertWithWhereUniqueWithoutRecipeInput | FoodImageUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: FoodImageCreateManyRecipeInputEnvelope
    set?: FoodImageWhereUniqueInput | FoodImageWhereUniqueInput[]
    disconnect?: FoodImageWhereUniqueInput | FoodImageWhereUniqueInput[]
    delete?: FoodImageWhereUniqueInput | FoodImageWhereUniqueInput[]
    connect?: FoodImageWhereUniqueInput | FoodImageWhereUniqueInput[]
    update?: FoodImageUpdateWithWhereUniqueWithoutRecipeInput | FoodImageUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: FoodImageUpdateManyWithWhereWithoutRecipeInput | FoodImageUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: FoodImageScalarWhereInput | FoodImageScalarWhereInput[]
  }

  export type RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<RecipeIngredientCreateWithoutRecipeInput, RecipeIngredientUncheckedCreateWithoutRecipeInput> | RecipeIngredientCreateWithoutRecipeInput[] | RecipeIngredientUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeIngredientCreateOrConnectWithoutRecipeInput | RecipeIngredientCreateOrConnectWithoutRecipeInput[]
    upsert?: RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInput | RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: RecipeIngredientCreateManyRecipeInputEnvelope
    set?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    disconnect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    delete?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    connect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    update?: RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInput | RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: RecipeIngredientUpdateManyWithWhereWithoutRecipeInput | RecipeIngredientUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: RecipeIngredientScalarWhereInput | RecipeIngredientScalarWhereInput[]
  }

  export type RecipeLikeUncheckedUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<RecipeLikeCreateWithoutRecipeInput, RecipeLikeUncheckedCreateWithoutRecipeInput> | RecipeLikeCreateWithoutRecipeInput[] | RecipeLikeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeLikeCreateOrConnectWithoutRecipeInput | RecipeLikeCreateOrConnectWithoutRecipeInput[]
    upsert?: RecipeLikeUpsertWithWhereUniqueWithoutRecipeInput | RecipeLikeUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: RecipeLikeCreateManyRecipeInputEnvelope
    set?: RecipeLikeWhereUniqueInput | RecipeLikeWhereUniqueInput[]
    disconnect?: RecipeLikeWhereUniqueInput | RecipeLikeWhereUniqueInput[]
    delete?: RecipeLikeWhereUniqueInput | RecipeLikeWhereUniqueInput[]
    connect?: RecipeLikeWhereUniqueInput | RecipeLikeWhereUniqueInput[]
    update?: RecipeLikeUpdateWithWhereUniqueWithoutRecipeInput | RecipeLikeUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: RecipeLikeUpdateManyWithWhereWithoutRecipeInput | RecipeLikeUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: RecipeLikeScalarWhereInput | RecipeLikeScalarWhereInput[]
  }

  export type SavedRecipeUncheckedUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<SavedRecipeCreateWithoutRecipeInput, SavedRecipeUncheckedCreateWithoutRecipeInput> | SavedRecipeCreateWithoutRecipeInput[] | SavedRecipeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: SavedRecipeCreateOrConnectWithoutRecipeInput | SavedRecipeCreateOrConnectWithoutRecipeInput[]
    upsert?: SavedRecipeUpsertWithWhereUniqueWithoutRecipeInput | SavedRecipeUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: SavedRecipeCreateManyRecipeInputEnvelope
    set?: SavedRecipeWhereUniqueInput | SavedRecipeWhereUniqueInput[]
    disconnect?: SavedRecipeWhereUniqueInput | SavedRecipeWhereUniqueInput[]
    delete?: SavedRecipeWhereUniqueInput | SavedRecipeWhereUniqueInput[]
    connect?: SavedRecipeWhereUniqueInput | SavedRecipeWhereUniqueInput[]
    update?: SavedRecipeUpdateWithWhereUniqueWithoutRecipeInput | SavedRecipeUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: SavedRecipeUpdateManyWithWhereWithoutRecipeInput | SavedRecipeUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: SavedRecipeScalarWhereInput | SavedRecipeScalarWhereInput[]
  }

  export type RecipeReviewUncheckedUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<RecipeReviewCreateWithoutRecipeInput, RecipeReviewUncheckedCreateWithoutRecipeInput> | RecipeReviewCreateWithoutRecipeInput[] | RecipeReviewUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeReviewCreateOrConnectWithoutRecipeInput | RecipeReviewCreateOrConnectWithoutRecipeInput[]
    upsert?: RecipeReviewUpsertWithWhereUniqueWithoutRecipeInput | RecipeReviewUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: RecipeReviewCreateManyRecipeInputEnvelope
    set?: RecipeReviewWhereUniqueInput | RecipeReviewWhereUniqueInput[]
    disconnect?: RecipeReviewWhereUniqueInput | RecipeReviewWhereUniqueInput[]
    delete?: RecipeReviewWhereUniqueInput | RecipeReviewWhereUniqueInput[]
    connect?: RecipeReviewWhereUniqueInput | RecipeReviewWhereUniqueInput[]
    update?: RecipeReviewUpdateWithWhereUniqueWithoutRecipeInput | RecipeReviewUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: RecipeReviewUpdateManyWithWhereWithoutRecipeInput | RecipeReviewUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: RecipeReviewScalarWhereInput | RecipeReviewScalarWhereInput[]
  }

  export type MadeRecipeUncheckedUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<MadeRecipeCreateWithoutRecipeInput, MadeRecipeUncheckedCreateWithoutRecipeInput> | MadeRecipeCreateWithoutRecipeInput[] | MadeRecipeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: MadeRecipeCreateOrConnectWithoutRecipeInput | MadeRecipeCreateOrConnectWithoutRecipeInput[]
    upsert?: MadeRecipeUpsertWithWhereUniqueWithoutRecipeInput | MadeRecipeUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: MadeRecipeCreateManyRecipeInputEnvelope
    set?: MadeRecipeWhereUniqueInput | MadeRecipeWhereUniqueInput[]
    disconnect?: MadeRecipeWhereUniqueInput | MadeRecipeWhereUniqueInput[]
    delete?: MadeRecipeWhereUniqueInput | MadeRecipeWhereUniqueInput[]
    connect?: MadeRecipeWhereUniqueInput | MadeRecipeWhereUniqueInput[]
    update?: MadeRecipeUpdateWithWhereUniqueWithoutRecipeInput | MadeRecipeUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: MadeRecipeUpdateManyWithWhereWithoutRecipeInput | MadeRecipeUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: MadeRecipeScalarWhereInput | MadeRecipeScalarWhereInput[]
  }

  export type MealPlanItemUncheckedUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<MealPlanItemCreateWithoutRecipeInput, MealPlanItemUncheckedCreateWithoutRecipeInput> | MealPlanItemCreateWithoutRecipeInput[] | MealPlanItemUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: MealPlanItemCreateOrConnectWithoutRecipeInput | MealPlanItemCreateOrConnectWithoutRecipeInput[]
    upsert?: MealPlanItemUpsertWithWhereUniqueWithoutRecipeInput | MealPlanItemUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: MealPlanItemCreateManyRecipeInputEnvelope
    set?: MealPlanItemWhereUniqueInput | MealPlanItemWhereUniqueInput[]
    disconnect?: MealPlanItemWhereUniqueInput | MealPlanItemWhereUniqueInput[]
    delete?: MealPlanItemWhereUniqueInput | MealPlanItemWhereUniqueInput[]
    connect?: MealPlanItemWhereUniqueInput | MealPlanItemWhereUniqueInput[]
    update?: MealPlanItemUpdateWithWhereUniqueWithoutRecipeInput | MealPlanItemUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: MealPlanItemUpdateManyWithWhereWithoutRecipeInput | MealPlanItemUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: MealPlanItemScalarWhereInput | MealPlanItemScalarWhereInput[]
  }

  export type FoodImageUncheckedUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<FoodImageCreateWithoutRecipeInput, FoodImageUncheckedCreateWithoutRecipeInput> | FoodImageCreateWithoutRecipeInput[] | FoodImageUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: FoodImageCreateOrConnectWithoutRecipeInput | FoodImageCreateOrConnectWithoutRecipeInput[]
    upsert?: FoodImageUpsertWithWhereUniqueWithoutRecipeInput | FoodImageUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: FoodImageCreateManyRecipeInputEnvelope
    set?: FoodImageWhereUniqueInput | FoodImageWhereUniqueInput[]
    disconnect?: FoodImageWhereUniqueInput | FoodImageWhereUniqueInput[]
    delete?: FoodImageWhereUniqueInput | FoodImageWhereUniqueInput[]
    connect?: FoodImageWhereUniqueInput | FoodImageWhereUniqueInput[]
    update?: FoodImageUpdateWithWhereUniqueWithoutRecipeInput | FoodImageUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: FoodImageUpdateManyWithWhereWithoutRecipeInput | FoodImageUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: FoodImageScalarWhereInput | FoodImageScalarWhereInput[]
  }

  export type IngredientCreatealiasesInput = {
    set: string[]
  }

  export type RecipeIngredientCreateNestedManyWithoutIngredientInput = {
    create?: XOR<RecipeIngredientCreateWithoutIngredientInput, RecipeIngredientUncheckedCreateWithoutIngredientInput> | RecipeIngredientCreateWithoutIngredientInput[] | RecipeIngredientUncheckedCreateWithoutIngredientInput[]
    connectOrCreate?: RecipeIngredientCreateOrConnectWithoutIngredientInput | RecipeIngredientCreateOrConnectWithoutIngredientInput[]
    createMany?: RecipeIngredientCreateManyIngredientInputEnvelope
    connect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
  }

  export type RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInput = {
    create?: XOR<RecipeIngredientCreateWithoutIngredientInput, RecipeIngredientUncheckedCreateWithoutIngredientInput> | RecipeIngredientCreateWithoutIngredientInput[] | RecipeIngredientUncheckedCreateWithoutIngredientInput[]
    connectOrCreate?: RecipeIngredientCreateOrConnectWithoutIngredientInput | RecipeIngredientCreateOrConnectWithoutIngredientInput[]
    createMany?: RecipeIngredientCreateManyIngredientInputEnvelope
    connect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
  }

  export type IngredientUpdatealiasesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type RecipeIngredientUpdateManyWithoutIngredientNestedInput = {
    create?: XOR<RecipeIngredientCreateWithoutIngredientInput, RecipeIngredientUncheckedCreateWithoutIngredientInput> | RecipeIngredientCreateWithoutIngredientInput[] | RecipeIngredientUncheckedCreateWithoutIngredientInput[]
    connectOrCreate?: RecipeIngredientCreateOrConnectWithoutIngredientInput | RecipeIngredientCreateOrConnectWithoutIngredientInput[]
    upsert?: RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInput | RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInput[]
    createMany?: RecipeIngredientCreateManyIngredientInputEnvelope
    set?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    disconnect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    delete?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    connect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    update?: RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInput | RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInput[]
    updateMany?: RecipeIngredientUpdateManyWithWhereWithoutIngredientInput | RecipeIngredientUpdateManyWithWhereWithoutIngredientInput[]
    deleteMany?: RecipeIngredientScalarWhereInput | RecipeIngredientScalarWhereInput[]
  }

  export type RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInput = {
    create?: XOR<RecipeIngredientCreateWithoutIngredientInput, RecipeIngredientUncheckedCreateWithoutIngredientInput> | RecipeIngredientCreateWithoutIngredientInput[] | RecipeIngredientUncheckedCreateWithoutIngredientInput[]
    connectOrCreate?: RecipeIngredientCreateOrConnectWithoutIngredientInput | RecipeIngredientCreateOrConnectWithoutIngredientInput[]
    upsert?: RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInput | RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInput[]
    createMany?: RecipeIngredientCreateManyIngredientInputEnvelope
    set?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    disconnect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    delete?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    connect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    update?: RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInput | RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInput[]
    updateMany?: RecipeIngredientUpdateManyWithWhereWithoutIngredientInput | RecipeIngredientUpdateManyWithWhereWithoutIngredientInput[]
    deleteMany?: RecipeIngredientScalarWhereInput | RecipeIngredientScalarWhereInput[]
  }

  export type RecipeCreateNestedOneWithoutIngredientsInput = {
    create?: XOR<RecipeCreateWithoutIngredientsInput, RecipeUncheckedCreateWithoutIngredientsInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutIngredientsInput
    connect?: RecipeWhereUniqueInput
  }

  export type IngredientCreateNestedOneWithoutRecipeIngredientsInput = {
    create?: XOR<IngredientCreateWithoutRecipeIngredientsInput, IngredientUncheckedCreateWithoutRecipeIngredientsInput>
    connectOrCreate?: IngredientCreateOrConnectWithoutRecipeIngredientsInput
    connect?: IngredientWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RecipeUpdateOneRequiredWithoutIngredientsNestedInput = {
    create?: XOR<RecipeCreateWithoutIngredientsInput, RecipeUncheckedCreateWithoutIngredientsInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutIngredientsInput
    upsert?: RecipeUpsertWithoutIngredientsInput
    connect?: RecipeWhereUniqueInput
    update?: XOR<XOR<RecipeUpdateToOneWithWhereWithoutIngredientsInput, RecipeUpdateWithoutIngredientsInput>, RecipeUncheckedUpdateWithoutIngredientsInput>
  }

  export type IngredientUpdateOneRequiredWithoutRecipeIngredientsNestedInput = {
    create?: XOR<IngredientCreateWithoutRecipeIngredientsInput, IngredientUncheckedCreateWithoutRecipeIngredientsInput>
    connectOrCreate?: IngredientCreateOrConnectWithoutRecipeIngredientsInput
    upsert?: IngredientUpsertWithoutRecipeIngredientsInput
    connect?: IngredientWhereUniqueInput
    update?: XOR<XOR<IngredientUpdateToOneWithWhereWithoutRecipeIngredientsInput, IngredientUpdateWithoutRecipeIngredientsInput>, IngredientUncheckedUpdateWithoutRecipeIngredientsInput>
  }

  export type RecipeCreateNestedOneWithoutLikesInput = {
    create?: XOR<RecipeCreateWithoutLikesInput, RecipeUncheckedCreateWithoutLikesInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutLikesInput
    connect?: RecipeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRecipeLikesInput = {
    create?: XOR<UserCreateWithoutRecipeLikesInput, UserUncheckedCreateWithoutRecipeLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRecipeLikesInput
    connect?: UserWhereUniqueInput
  }

  export type RecipeUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<RecipeCreateWithoutLikesInput, RecipeUncheckedCreateWithoutLikesInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutLikesInput
    upsert?: RecipeUpsertWithoutLikesInput
    connect?: RecipeWhereUniqueInput
    update?: XOR<XOR<RecipeUpdateToOneWithWhereWithoutLikesInput, RecipeUpdateWithoutLikesInput>, RecipeUncheckedUpdateWithoutLikesInput>
  }

  export type UserUpdateOneRequiredWithoutRecipeLikesNestedInput = {
    create?: XOR<UserCreateWithoutRecipeLikesInput, UserUncheckedCreateWithoutRecipeLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRecipeLikesInput
    upsert?: UserUpsertWithoutRecipeLikesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRecipeLikesInput, UserUpdateWithoutRecipeLikesInput>, UserUncheckedUpdateWithoutRecipeLikesInput>
  }

  export type RecipeCreateNestedOneWithoutSavesInput = {
    create?: XOR<RecipeCreateWithoutSavesInput, RecipeUncheckedCreateWithoutSavesInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutSavesInput
    connect?: RecipeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSavedRecipesInput = {
    create?: XOR<UserCreateWithoutSavedRecipesInput, UserUncheckedCreateWithoutSavedRecipesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSavedRecipesInput
    connect?: UserWhereUniqueInput
  }

  export type RecipeUpdateOneRequiredWithoutSavesNestedInput = {
    create?: XOR<RecipeCreateWithoutSavesInput, RecipeUncheckedCreateWithoutSavesInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutSavesInput
    upsert?: RecipeUpsertWithoutSavesInput
    connect?: RecipeWhereUniqueInput
    update?: XOR<XOR<RecipeUpdateToOneWithWhereWithoutSavesInput, RecipeUpdateWithoutSavesInput>, RecipeUncheckedUpdateWithoutSavesInput>
  }

  export type UserUpdateOneRequiredWithoutSavedRecipesNestedInput = {
    create?: XOR<UserCreateWithoutSavedRecipesInput, UserUncheckedCreateWithoutSavedRecipesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSavedRecipesInput
    upsert?: UserUpsertWithoutSavedRecipesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSavedRecipesInput, UserUpdateWithoutSavedRecipesInput>, UserUncheckedUpdateWithoutSavedRecipesInput>
  }

  export type RecipeReviewCreateimagesInput = {
    set: string[]
  }

  export type RecipeCreateNestedOneWithoutReviewsInput = {
    create?: XOR<RecipeCreateWithoutReviewsInput, RecipeUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutReviewsInput
    connect?: RecipeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRecipeReviewsInput = {
    create?: XOR<UserCreateWithoutRecipeReviewsInput, UserUncheckedCreateWithoutRecipeReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRecipeReviewsInput
    connect?: UserWhereUniqueInput
  }

  export type RecipeReviewUpdateimagesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type RecipeUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<RecipeCreateWithoutReviewsInput, RecipeUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutReviewsInput
    upsert?: RecipeUpsertWithoutReviewsInput
    connect?: RecipeWhereUniqueInput
    update?: XOR<XOR<RecipeUpdateToOneWithWhereWithoutReviewsInput, RecipeUpdateWithoutReviewsInput>, RecipeUncheckedUpdateWithoutReviewsInput>
  }

  export type UserUpdateOneRequiredWithoutRecipeReviewsNestedInput = {
    create?: XOR<UserCreateWithoutRecipeReviewsInput, UserUncheckedCreateWithoutRecipeReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRecipeReviewsInput
    upsert?: UserUpsertWithoutRecipeReviewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRecipeReviewsInput, UserUpdateWithoutRecipeReviewsInput>, UserUncheckedUpdateWithoutRecipeReviewsInput>
  }

  export type MadeRecipeCreateimagesInput = {
    set: string[]
  }

  export type RecipeCreateNestedOneWithoutMadeRecipesInput = {
    create?: XOR<RecipeCreateWithoutMadeRecipesInput, RecipeUncheckedCreateWithoutMadeRecipesInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutMadeRecipesInput
    connect?: RecipeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMadeRecipesInput = {
    create?: XOR<UserCreateWithoutMadeRecipesInput, UserUncheckedCreateWithoutMadeRecipesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMadeRecipesInput
    connect?: UserWhereUniqueInput
  }

  export type MadeRecipeUpdateimagesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type RecipeUpdateOneRequiredWithoutMadeRecipesNestedInput = {
    create?: XOR<RecipeCreateWithoutMadeRecipesInput, RecipeUncheckedCreateWithoutMadeRecipesInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutMadeRecipesInput
    upsert?: RecipeUpsertWithoutMadeRecipesInput
    connect?: RecipeWhereUniqueInput
    update?: XOR<XOR<RecipeUpdateToOneWithWhereWithoutMadeRecipesInput, RecipeUpdateWithoutMadeRecipesInput>, RecipeUncheckedUpdateWithoutMadeRecipesInput>
  }

  export type UserUpdateOneRequiredWithoutMadeRecipesNestedInput = {
    create?: XOR<UserCreateWithoutMadeRecipesInput, UserUncheckedCreateWithoutMadeRecipesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMadeRecipesInput
    upsert?: UserUpsertWithoutMadeRecipesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMadeRecipesInput, UserUpdateWithoutMadeRecipesInput>, UserUncheckedUpdateWithoutMadeRecipesInput>
  }

  export type UserCreateNestedOneWithoutFollowingInput = {
    create?: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowingInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFollowersInput = {
    create?: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowersInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFollowingNestedInput = {
    create?: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowingInput
    upsert?: UserUpsertWithoutFollowingInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFollowingInput, UserUpdateWithoutFollowingInput>, UserUncheckedUpdateWithoutFollowingInput>
  }

  export type UserUpdateOneRequiredWithoutFollowersNestedInput = {
    create?: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowersInput
    upsert?: UserUpsertWithoutFollowersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFollowersInput, UserUpdateWithoutFollowersInput>, UserUncheckedUpdateWithoutFollowersInput>
  }

  export type UserCreateNestedOneWithoutMealPlansInput = {
    create?: XOR<UserCreateWithoutMealPlansInput, UserUncheckedCreateWithoutMealPlansInput>
    connectOrCreate?: UserCreateOrConnectWithoutMealPlansInput
    connect?: UserWhereUniqueInput
  }

  export type MealPlanItemCreateNestedManyWithoutMealPlanInput = {
    create?: XOR<MealPlanItemCreateWithoutMealPlanInput, MealPlanItemUncheckedCreateWithoutMealPlanInput> | MealPlanItemCreateWithoutMealPlanInput[] | MealPlanItemUncheckedCreateWithoutMealPlanInput[]
    connectOrCreate?: MealPlanItemCreateOrConnectWithoutMealPlanInput | MealPlanItemCreateOrConnectWithoutMealPlanInput[]
    createMany?: MealPlanItemCreateManyMealPlanInputEnvelope
    connect?: MealPlanItemWhereUniqueInput | MealPlanItemWhereUniqueInput[]
  }

  export type MealPlanItemUncheckedCreateNestedManyWithoutMealPlanInput = {
    create?: XOR<MealPlanItemCreateWithoutMealPlanInput, MealPlanItemUncheckedCreateWithoutMealPlanInput> | MealPlanItemCreateWithoutMealPlanInput[] | MealPlanItemUncheckedCreateWithoutMealPlanInput[]
    connectOrCreate?: MealPlanItemCreateOrConnectWithoutMealPlanInput | MealPlanItemCreateOrConnectWithoutMealPlanInput[]
    createMany?: MealPlanItemCreateManyMealPlanInputEnvelope
    connect?: MealPlanItemWhereUniqueInput | MealPlanItemWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutMealPlansNestedInput = {
    create?: XOR<UserCreateWithoutMealPlansInput, UserUncheckedCreateWithoutMealPlansInput>
    connectOrCreate?: UserCreateOrConnectWithoutMealPlansInput
    upsert?: UserUpsertWithoutMealPlansInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMealPlansInput, UserUpdateWithoutMealPlansInput>, UserUncheckedUpdateWithoutMealPlansInput>
  }

  export type MealPlanItemUpdateManyWithoutMealPlanNestedInput = {
    create?: XOR<MealPlanItemCreateWithoutMealPlanInput, MealPlanItemUncheckedCreateWithoutMealPlanInput> | MealPlanItemCreateWithoutMealPlanInput[] | MealPlanItemUncheckedCreateWithoutMealPlanInput[]
    connectOrCreate?: MealPlanItemCreateOrConnectWithoutMealPlanInput | MealPlanItemCreateOrConnectWithoutMealPlanInput[]
    upsert?: MealPlanItemUpsertWithWhereUniqueWithoutMealPlanInput | MealPlanItemUpsertWithWhereUniqueWithoutMealPlanInput[]
    createMany?: MealPlanItemCreateManyMealPlanInputEnvelope
    set?: MealPlanItemWhereUniqueInput | MealPlanItemWhereUniqueInput[]
    disconnect?: MealPlanItemWhereUniqueInput | MealPlanItemWhereUniqueInput[]
    delete?: MealPlanItemWhereUniqueInput | MealPlanItemWhereUniqueInput[]
    connect?: MealPlanItemWhereUniqueInput | MealPlanItemWhereUniqueInput[]
    update?: MealPlanItemUpdateWithWhereUniqueWithoutMealPlanInput | MealPlanItemUpdateWithWhereUniqueWithoutMealPlanInput[]
    updateMany?: MealPlanItemUpdateManyWithWhereWithoutMealPlanInput | MealPlanItemUpdateManyWithWhereWithoutMealPlanInput[]
    deleteMany?: MealPlanItemScalarWhereInput | MealPlanItemScalarWhereInput[]
  }

  export type MealPlanItemUncheckedUpdateManyWithoutMealPlanNestedInput = {
    create?: XOR<MealPlanItemCreateWithoutMealPlanInput, MealPlanItemUncheckedCreateWithoutMealPlanInput> | MealPlanItemCreateWithoutMealPlanInput[] | MealPlanItemUncheckedCreateWithoutMealPlanInput[]
    connectOrCreate?: MealPlanItemCreateOrConnectWithoutMealPlanInput | MealPlanItemCreateOrConnectWithoutMealPlanInput[]
    upsert?: MealPlanItemUpsertWithWhereUniqueWithoutMealPlanInput | MealPlanItemUpsertWithWhereUniqueWithoutMealPlanInput[]
    createMany?: MealPlanItemCreateManyMealPlanInputEnvelope
    set?: MealPlanItemWhereUniqueInput | MealPlanItemWhereUniqueInput[]
    disconnect?: MealPlanItemWhereUniqueInput | MealPlanItemWhereUniqueInput[]
    delete?: MealPlanItemWhereUniqueInput | MealPlanItemWhereUniqueInput[]
    connect?: MealPlanItemWhereUniqueInput | MealPlanItemWhereUniqueInput[]
    update?: MealPlanItemUpdateWithWhereUniqueWithoutMealPlanInput | MealPlanItemUpdateWithWhereUniqueWithoutMealPlanInput[]
    updateMany?: MealPlanItemUpdateManyWithWhereWithoutMealPlanInput | MealPlanItemUpdateManyWithWhereWithoutMealPlanInput[]
    deleteMany?: MealPlanItemScalarWhereInput | MealPlanItemScalarWhereInput[]
  }

  export type MealPlanCreateNestedOneWithoutItemsInput = {
    create?: XOR<MealPlanCreateWithoutItemsInput, MealPlanUncheckedCreateWithoutItemsInput>
    connectOrCreate?: MealPlanCreateOrConnectWithoutItemsInput
    connect?: MealPlanWhereUniqueInput
  }

  export type RecipeCreateNestedOneWithoutMealPlanItemsInput = {
    create?: XOR<RecipeCreateWithoutMealPlanItemsInput, RecipeUncheckedCreateWithoutMealPlanItemsInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutMealPlanItemsInput
    connect?: RecipeWhereUniqueInput
  }

  export type MealPlanUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<MealPlanCreateWithoutItemsInput, MealPlanUncheckedCreateWithoutItemsInput>
    connectOrCreate?: MealPlanCreateOrConnectWithoutItemsInput
    upsert?: MealPlanUpsertWithoutItemsInput
    connect?: MealPlanWhereUniqueInput
    update?: XOR<XOR<MealPlanUpdateToOneWithWhereWithoutItemsInput, MealPlanUpdateWithoutItemsInput>, MealPlanUncheckedUpdateWithoutItemsInput>
  }

  export type RecipeUpdateOneRequiredWithoutMealPlanItemsNestedInput = {
    create?: XOR<RecipeCreateWithoutMealPlanItemsInput, RecipeUncheckedCreateWithoutMealPlanItemsInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutMealPlanItemsInput
    upsert?: RecipeUpsertWithoutMealPlanItemsInput
    connect?: RecipeWhereUniqueInput
    update?: XOR<XOR<RecipeUpdateToOneWithWhereWithoutMealPlanItemsInput, RecipeUpdateWithoutMealPlanItemsInput>, RecipeUncheckedUpdateWithoutMealPlanItemsInput>
  }

  export type UserCreateNestedOneWithoutShoppingListsInput = {
    create?: XOR<UserCreateWithoutShoppingListsInput, UserUncheckedCreateWithoutShoppingListsInput>
    connectOrCreate?: UserCreateOrConnectWithoutShoppingListsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutShoppingListsNestedInput = {
    create?: XOR<UserCreateWithoutShoppingListsInput, UserUncheckedCreateWithoutShoppingListsInput>
    connectOrCreate?: UserCreateOrConnectWithoutShoppingListsInput
    upsert?: UserUpsertWithoutShoppingListsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutShoppingListsInput, UserUpdateWithoutShoppingListsInput>, UserUncheckedUpdateWithoutShoppingListsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RecipeCreateWithoutAuthorInput = {
    id?: string
    title: string
    description?: string | null
    instructions: JsonNullValueInput | InputJsonValue
    prepTime?: number | null
    cookTime?: number | null
    servings?: number | null
    difficulty?: string | null
    cuisine?: string | null
    category?: string | null
    images?: RecipeCreateimagesInput | string[]
    mainImage?: string | null
    aiTags?: RecipeCreateaiTagsInput | string[]
    userTags?: RecipeCreateuserTagsInput | string[]
    allTags?: RecipeCreateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: number
    savesCount?: number
    madeCount?: number
    viewsCount?: number
    avgRating?: number
    reviewsCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    publishedAt?: Date | string | null
    isPublished?: boolean
    ingredients?: RecipeIngredientCreateNestedManyWithoutRecipeInput
    likes?: RecipeLikeCreateNestedManyWithoutRecipeInput
    saves?: SavedRecipeCreateNestedManyWithoutRecipeInput
    reviews?: RecipeReviewCreateNestedManyWithoutRecipeInput
    madeRecipes?: MadeRecipeCreateNestedManyWithoutRecipeInput
    mealPlanItems?: MealPlanItemCreateNestedManyWithoutRecipeInput
    foodImages?: FoodImageCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUncheckedCreateWithoutAuthorInput = {
    id?: string
    title: string
    description?: string | null
    instructions: JsonNullValueInput | InputJsonValue
    prepTime?: number | null
    cookTime?: number | null
    servings?: number | null
    difficulty?: string | null
    cuisine?: string | null
    category?: string | null
    images?: RecipeCreateimagesInput | string[]
    mainImage?: string | null
    aiTags?: RecipeCreateaiTagsInput | string[]
    userTags?: RecipeCreateuserTagsInput | string[]
    allTags?: RecipeCreateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: number
    savesCount?: number
    madeCount?: number
    viewsCount?: number
    avgRating?: number
    reviewsCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    publishedAt?: Date | string | null
    isPublished?: boolean
    ingredients?: RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInput
    likes?: RecipeLikeUncheckedCreateNestedManyWithoutRecipeInput
    saves?: SavedRecipeUncheckedCreateNestedManyWithoutRecipeInput
    reviews?: RecipeReviewUncheckedCreateNestedManyWithoutRecipeInput
    madeRecipes?: MadeRecipeUncheckedCreateNestedManyWithoutRecipeInput
    mealPlanItems?: MealPlanItemUncheckedCreateNestedManyWithoutRecipeInput
    foodImages?: FoodImageUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type RecipeCreateOrConnectWithoutAuthorInput = {
    where: RecipeWhereUniqueInput
    create: XOR<RecipeCreateWithoutAuthorInput, RecipeUncheckedCreateWithoutAuthorInput>
  }

  export type RecipeCreateManyAuthorInputEnvelope = {
    data: RecipeCreateManyAuthorInput | RecipeCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type SavedRecipeCreateWithoutUserInput = {
    id?: string
    savedAt?: Date | string
    notes?: string | null
    recipe: RecipeCreateNestedOneWithoutSavesInput
  }

  export type SavedRecipeUncheckedCreateWithoutUserInput = {
    id?: string
    recipeId: string
    savedAt?: Date | string
    notes?: string | null
  }

  export type SavedRecipeCreateOrConnectWithoutUserInput = {
    where: SavedRecipeWhereUniqueInput
    create: XOR<SavedRecipeCreateWithoutUserInput, SavedRecipeUncheckedCreateWithoutUserInput>
  }

  export type SavedRecipeCreateManyUserInputEnvelope = {
    data: SavedRecipeCreateManyUserInput | SavedRecipeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RecipeLikeCreateWithoutUserInput = {
    id?: string
    likedAt?: Date | string
    recipe: RecipeCreateNestedOneWithoutLikesInput
  }

  export type RecipeLikeUncheckedCreateWithoutUserInput = {
    id?: string
    recipeId: string
    likedAt?: Date | string
  }

  export type RecipeLikeCreateOrConnectWithoutUserInput = {
    where: RecipeLikeWhereUniqueInput
    create: XOR<RecipeLikeCreateWithoutUserInput, RecipeLikeUncheckedCreateWithoutUserInput>
  }

  export type RecipeLikeCreateManyUserInputEnvelope = {
    data: RecipeLikeCreateManyUserInput | RecipeLikeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RecipeReviewCreateWithoutUserInput = {
    id?: string
    rating: number
    comment?: string | null
    images?: RecipeReviewCreateimagesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    recipe: RecipeCreateNestedOneWithoutReviewsInput
  }

  export type RecipeReviewUncheckedCreateWithoutUserInput = {
    id?: string
    recipeId: string
    rating: number
    comment?: string | null
    images?: RecipeReviewCreateimagesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecipeReviewCreateOrConnectWithoutUserInput = {
    where: RecipeReviewWhereUniqueInput
    create: XOR<RecipeReviewCreateWithoutUserInput, RecipeReviewUncheckedCreateWithoutUserInput>
  }

  export type RecipeReviewCreateManyUserInputEnvelope = {
    data: RecipeReviewCreateManyUserInput | RecipeReviewCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MadeRecipeCreateWithoutUserInput = {
    id?: string
    madeAt?: Date | string
    rating?: number | null
    notes?: string | null
    images?: MadeRecipeCreateimagesInput | string[]
    recipe: RecipeCreateNestedOneWithoutMadeRecipesInput
  }

  export type MadeRecipeUncheckedCreateWithoutUserInput = {
    id?: string
    recipeId: string
    madeAt?: Date | string
    rating?: number | null
    notes?: string | null
    images?: MadeRecipeCreateimagesInput | string[]
  }

  export type MadeRecipeCreateOrConnectWithoutUserInput = {
    where: MadeRecipeWhereUniqueInput
    create: XOR<MadeRecipeCreateWithoutUserInput, MadeRecipeUncheckedCreateWithoutUserInput>
  }

  export type MadeRecipeCreateManyUserInputEnvelope = {
    data: MadeRecipeCreateManyUserInput | MadeRecipeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MealPlanCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: MealPlanItemCreateNestedManyWithoutMealPlanInput
  }

  export type MealPlanUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: MealPlanItemUncheckedCreateNestedManyWithoutMealPlanInput
  }

  export type MealPlanCreateOrConnectWithoutUserInput = {
    where: MealPlanWhereUniqueInput
    create: XOR<MealPlanCreateWithoutUserInput, MealPlanUncheckedCreateWithoutUserInput>
  }

  export type MealPlanCreateManyUserInputEnvelope = {
    data: MealPlanCreateManyUserInput | MealPlanCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FoodImageCreateWithoutUserInput = {
    id?: string
    filename: string
    base64: string
    uploadedAt?: Date | string
    analysis?: NullableJsonNullValueInput | InputJsonValue
    recipe?: RecipeCreateNestedOneWithoutFoodImagesInput
  }

  export type FoodImageUncheckedCreateWithoutUserInput = {
    id?: string
    filename: string
    base64: string
    uploadedAt?: Date | string
    analysis?: NullableJsonNullValueInput | InputJsonValue
    recipeId?: string | null
  }

  export type FoodImageCreateOrConnectWithoutUserInput = {
    where: FoodImageWhereUniqueInput
    create: XOR<FoodImageCreateWithoutUserInput, FoodImageUncheckedCreateWithoutUserInput>
  }

  export type FoodImageCreateManyUserInputEnvelope = {
    data: FoodImageCreateManyUserInput | FoodImageCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FollowCreateWithoutFollowerInput = {
    id?: string
    createdAt?: Date | string
    following: UserCreateNestedOneWithoutFollowersInput
  }

  export type FollowUncheckedCreateWithoutFollowerInput = {
    id?: string
    followingId: string
    createdAt?: Date | string
  }

  export type FollowCreateOrConnectWithoutFollowerInput = {
    where: FollowWhereUniqueInput
    create: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput>
  }

  export type FollowCreateManyFollowerInputEnvelope = {
    data: FollowCreateManyFollowerInput | FollowCreateManyFollowerInput[]
    skipDuplicates?: boolean
  }

  export type FollowCreateWithoutFollowingInput = {
    id?: string
    createdAt?: Date | string
    follower: UserCreateNestedOneWithoutFollowingInput
  }

  export type FollowUncheckedCreateWithoutFollowingInput = {
    id?: string
    followerId: string
    createdAt?: Date | string
  }

  export type FollowCreateOrConnectWithoutFollowingInput = {
    where: FollowWhereUniqueInput
    create: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput>
  }

  export type FollowCreateManyFollowingInputEnvelope = {
    data: FollowCreateManyFollowingInput | FollowCreateManyFollowingInput[]
    skipDuplicates?: boolean
  }

  export type ShoppingListCreateWithoutUserInput = {
    id?: string
    name: string
    items: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShoppingListUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    items: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShoppingListCreateOrConnectWithoutUserInput = {
    where: ShoppingListWhereUniqueInput
    create: XOR<ShoppingListCreateWithoutUserInput, ShoppingListUncheckedCreateWithoutUserInput>
  }

  export type ShoppingListCreateManyUserInputEnvelope = {
    data: ShoppingListCreateManyUserInput | ShoppingListCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
  }

  export type RecipeUpsertWithWhereUniqueWithoutAuthorInput = {
    where: RecipeWhereUniqueInput
    update: XOR<RecipeUpdateWithoutAuthorInput, RecipeUncheckedUpdateWithoutAuthorInput>
    create: XOR<RecipeCreateWithoutAuthorInput, RecipeUncheckedCreateWithoutAuthorInput>
  }

  export type RecipeUpdateWithWhereUniqueWithoutAuthorInput = {
    where: RecipeWhereUniqueInput
    data: XOR<RecipeUpdateWithoutAuthorInput, RecipeUncheckedUpdateWithoutAuthorInput>
  }

  export type RecipeUpdateManyWithWhereWithoutAuthorInput = {
    where: RecipeScalarWhereInput
    data: XOR<RecipeUpdateManyMutationInput, RecipeUncheckedUpdateManyWithoutAuthorInput>
  }

  export type RecipeScalarWhereInput = {
    AND?: RecipeScalarWhereInput | RecipeScalarWhereInput[]
    OR?: RecipeScalarWhereInput[]
    NOT?: RecipeScalarWhereInput | RecipeScalarWhereInput[]
    id?: StringFilter<"Recipe"> | string
    title?: StringFilter<"Recipe"> | string
    description?: StringNullableFilter<"Recipe"> | string | null
    instructions?: JsonFilter<"Recipe">
    prepTime?: IntNullableFilter<"Recipe"> | number | null
    cookTime?: IntNullableFilter<"Recipe"> | number | null
    servings?: IntNullableFilter<"Recipe"> | number | null
    difficulty?: StringNullableFilter<"Recipe"> | string | null
    cuisine?: StringNullableFilter<"Recipe"> | string | null
    category?: StringNullableFilter<"Recipe"> | string | null
    images?: StringNullableListFilter<"Recipe">
    mainImage?: StringNullableFilter<"Recipe"> | string | null
    aiTags?: StringNullableListFilter<"Recipe">
    userTags?: StringNullableListFilter<"Recipe">
    allTags?: StringNullableListFilter<"Recipe">
    pairings?: JsonNullableFilter<"Recipe">
    nutrition?: JsonNullableFilter<"Recipe">
    likesCount?: IntFilter<"Recipe"> | number
    savesCount?: IntFilter<"Recipe"> | number
    madeCount?: IntFilter<"Recipe"> | number
    viewsCount?: IntFilter<"Recipe"> | number
    avgRating?: FloatFilter<"Recipe"> | number
    reviewsCount?: IntFilter<"Recipe"> | number
    createdAt?: DateTimeFilter<"Recipe"> | Date | string
    updatedAt?: DateTimeFilter<"Recipe"> | Date | string
    publishedAt?: DateTimeNullableFilter<"Recipe"> | Date | string | null
    isPublished?: BoolFilter<"Recipe"> | boolean
    authorId?: StringFilter<"Recipe"> | string
  }

  export type SavedRecipeUpsertWithWhereUniqueWithoutUserInput = {
    where: SavedRecipeWhereUniqueInput
    update: XOR<SavedRecipeUpdateWithoutUserInput, SavedRecipeUncheckedUpdateWithoutUserInput>
    create: XOR<SavedRecipeCreateWithoutUserInput, SavedRecipeUncheckedCreateWithoutUserInput>
  }

  export type SavedRecipeUpdateWithWhereUniqueWithoutUserInput = {
    where: SavedRecipeWhereUniqueInput
    data: XOR<SavedRecipeUpdateWithoutUserInput, SavedRecipeUncheckedUpdateWithoutUserInput>
  }

  export type SavedRecipeUpdateManyWithWhereWithoutUserInput = {
    where: SavedRecipeScalarWhereInput
    data: XOR<SavedRecipeUpdateManyMutationInput, SavedRecipeUncheckedUpdateManyWithoutUserInput>
  }

  export type SavedRecipeScalarWhereInput = {
    AND?: SavedRecipeScalarWhereInput | SavedRecipeScalarWhereInput[]
    OR?: SavedRecipeScalarWhereInput[]
    NOT?: SavedRecipeScalarWhereInput | SavedRecipeScalarWhereInput[]
    id?: StringFilter<"SavedRecipe"> | string
    recipeId?: StringFilter<"SavedRecipe"> | string
    userId?: StringFilter<"SavedRecipe"> | string
    savedAt?: DateTimeFilter<"SavedRecipe"> | Date | string
    notes?: StringNullableFilter<"SavedRecipe"> | string | null
  }

  export type RecipeLikeUpsertWithWhereUniqueWithoutUserInput = {
    where: RecipeLikeWhereUniqueInput
    update: XOR<RecipeLikeUpdateWithoutUserInput, RecipeLikeUncheckedUpdateWithoutUserInput>
    create: XOR<RecipeLikeCreateWithoutUserInput, RecipeLikeUncheckedCreateWithoutUserInput>
  }

  export type RecipeLikeUpdateWithWhereUniqueWithoutUserInput = {
    where: RecipeLikeWhereUniqueInput
    data: XOR<RecipeLikeUpdateWithoutUserInput, RecipeLikeUncheckedUpdateWithoutUserInput>
  }

  export type RecipeLikeUpdateManyWithWhereWithoutUserInput = {
    where: RecipeLikeScalarWhereInput
    data: XOR<RecipeLikeUpdateManyMutationInput, RecipeLikeUncheckedUpdateManyWithoutUserInput>
  }

  export type RecipeLikeScalarWhereInput = {
    AND?: RecipeLikeScalarWhereInput | RecipeLikeScalarWhereInput[]
    OR?: RecipeLikeScalarWhereInput[]
    NOT?: RecipeLikeScalarWhereInput | RecipeLikeScalarWhereInput[]
    id?: StringFilter<"RecipeLike"> | string
    recipeId?: StringFilter<"RecipeLike"> | string
    userId?: StringFilter<"RecipeLike"> | string
    likedAt?: DateTimeFilter<"RecipeLike"> | Date | string
  }

  export type RecipeReviewUpsertWithWhereUniqueWithoutUserInput = {
    where: RecipeReviewWhereUniqueInput
    update: XOR<RecipeReviewUpdateWithoutUserInput, RecipeReviewUncheckedUpdateWithoutUserInput>
    create: XOR<RecipeReviewCreateWithoutUserInput, RecipeReviewUncheckedCreateWithoutUserInput>
  }

  export type RecipeReviewUpdateWithWhereUniqueWithoutUserInput = {
    where: RecipeReviewWhereUniqueInput
    data: XOR<RecipeReviewUpdateWithoutUserInput, RecipeReviewUncheckedUpdateWithoutUserInput>
  }

  export type RecipeReviewUpdateManyWithWhereWithoutUserInput = {
    where: RecipeReviewScalarWhereInput
    data: XOR<RecipeReviewUpdateManyMutationInput, RecipeReviewUncheckedUpdateManyWithoutUserInput>
  }

  export type RecipeReviewScalarWhereInput = {
    AND?: RecipeReviewScalarWhereInput | RecipeReviewScalarWhereInput[]
    OR?: RecipeReviewScalarWhereInput[]
    NOT?: RecipeReviewScalarWhereInput | RecipeReviewScalarWhereInput[]
    id?: StringFilter<"RecipeReview"> | string
    recipeId?: StringFilter<"RecipeReview"> | string
    userId?: StringFilter<"RecipeReview"> | string
    rating?: IntFilter<"RecipeReview"> | number
    comment?: StringNullableFilter<"RecipeReview"> | string | null
    images?: StringNullableListFilter<"RecipeReview">
    createdAt?: DateTimeFilter<"RecipeReview"> | Date | string
    updatedAt?: DateTimeFilter<"RecipeReview"> | Date | string
  }

  export type MadeRecipeUpsertWithWhereUniqueWithoutUserInput = {
    where: MadeRecipeWhereUniqueInput
    update: XOR<MadeRecipeUpdateWithoutUserInput, MadeRecipeUncheckedUpdateWithoutUserInput>
    create: XOR<MadeRecipeCreateWithoutUserInput, MadeRecipeUncheckedCreateWithoutUserInput>
  }

  export type MadeRecipeUpdateWithWhereUniqueWithoutUserInput = {
    where: MadeRecipeWhereUniqueInput
    data: XOR<MadeRecipeUpdateWithoutUserInput, MadeRecipeUncheckedUpdateWithoutUserInput>
  }

  export type MadeRecipeUpdateManyWithWhereWithoutUserInput = {
    where: MadeRecipeScalarWhereInput
    data: XOR<MadeRecipeUpdateManyMutationInput, MadeRecipeUncheckedUpdateManyWithoutUserInput>
  }

  export type MadeRecipeScalarWhereInput = {
    AND?: MadeRecipeScalarWhereInput | MadeRecipeScalarWhereInput[]
    OR?: MadeRecipeScalarWhereInput[]
    NOT?: MadeRecipeScalarWhereInput | MadeRecipeScalarWhereInput[]
    id?: StringFilter<"MadeRecipe"> | string
    recipeId?: StringFilter<"MadeRecipe"> | string
    userId?: StringFilter<"MadeRecipe"> | string
    madeAt?: DateTimeFilter<"MadeRecipe"> | Date | string
    rating?: IntNullableFilter<"MadeRecipe"> | number | null
    notes?: StringNullableFilter<"MadeRecipe"> | string | null
    images?: StringNullableListFilter<"MadeRecipe">
  }

  export type MealPlanUpsertWithWhereUniqueWithoutUserInput = {
    where: MealPlanWhereUniqueInput
    update: XOR<MealPlanUpdateWithoutUserInput, MealPlanUncheckedUpdateWithoutUserInput>
    create: XOR<MealPlanCreateWithoutUserInput, MealPlanUncheckedCreateWithoutUserInput>
  }

  export type MealPlanUpdateWithWhereUniqueWithoutUserInput = {
    where: MealPlanWhereUniqueInput
    data: XOR<MealPlanUpdateWithoutUserInput, MealPlanUncheckedUpdateWithoutUserInput>
  }

  export type MealPlanUpdateManyWithWhereWithoutUserInput = {
    where: MealPlanScalarWhereInput
    data: XOR<MealPlanUpdateManyMutationInput, MealPlanUncheckedUpdateManyWithoutUserInput>
  }

  export type MealPlanScalarWhereInput = {
    AND?: MealPlanScalarWhereInput | MealPlanScalarWhereInput[]
    OR?: MealPlanScalarWhereInput[]
    NOT?: MealPlanScalarWhereInput | MealPlanScalarWhereInput[]
    id?: StringFilter<"MealPlan"> | string
    userId?: StringFilter<"MealPlan"> | string
    name?: StringFilter<"MealPlan"> | string
    description?: StringNullableFilter<"MealPlan"> | string | null
    startDate?: DateTimeFilter<"MealPlan"> | Date | string
    endDate?: DateTimeFilter<"MealPlan"> | Date | string
    isActive?: BoolFilter<"MealPlan"> | boolean
    createdAt?: DateTimeFilter<"MealPlan"> | Date | string
    updatedAt?: DateTimeFilter<"MealPlan"> | Date | string
  }

  export type FoodImageUpsertWithWhereUniqueWithoutUserInput = {
    where: FoodImageWhereUniqueInput
    update: XOR<FoodImageUpdateWithoutUserInput, FoodImageUncheckedUpdateWithoutUserInput>
    create: XOR<FoodImageCreateWithoutUserInput, FoodImageUncheckedCreateWithoutUserInput>
  }

  export type FoodImageUpdateWithWhereUniqueWithoutUserInput = {
    where: FoodImageWhereUniqueInput
    data: XOR<FoodImageUpdateWithoutUserInput, FoodImageUncheckedUpdateWithoutUserInput>
  }

  export type FoodImageUpdateManyWithWhereWithoutUserInput = {
    where: FoodImageScalarWhereInput
    data: XOR<FoodImageUpdateManyMutationInput, FoodImageUncheckedUpdateManyWithoutUserInput>
  }

  export type FoodImageScalarWhereInput = {
    AND?: FoodImageScalarWhereInput | FoodImageScalarWhereInput[]
    OR?: FoodImageScalarWhereInput[]
    NOT?: FoodImageScalarWhereInput | FoodImageScalarWhereInput[]
    id?: StringFilter<"FoodImage"> | string
    filename?: StringFilter<"FoodImage"> | string
    base64?: StringFilter<"FoodImage"> | string
    uploadedAt?: DateTimeFilter<"FoodImage"> | Date | string
    analysis?: JsonNullableFilter<"FoodImage">
    userId?: StringNullableFilter<"FoodImage"> | string | null
    recipeId?: StringNullableFilter<"FoodImage"> | string | null
  }

  export type FollowUpsertWithWhereUniqueWithoutFollowerInput = {
    where: FollowWhereUniqueInput
    update: XOR<FollowUpdateWithoutFollowerInput, FollowUncheckedUpdateWithoutFollowerInput>
    create: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput>
  }

  export type FollowUpdateWithWhereUniqueWithoutFollowerInput = {
    where: FollowWhereUniqueInput
    data: XOR<FollowUpdateWithoutFollowerInput, FollowUncheckedUpdateWithoutFollowerInput>
  }

  export type FollowUpdateManyWithWhereWithoutFollowerInput = {
    where: FollowScalarWhereInput
    data: XOR<FollowUpdateManyMutationInput, FollowUncheckedUpdateManyWithoutFollowerInput>
  }

  export type FollowScalarWhereInput = {
    AND?: FollowScalarWhereInput | FollowScalarWhereInput[]
    OR?: FollowScalarWhereInput[]
    NOT?: FollowScalarWhereInput | FollowScalarWhereInput[]
    id?: StringFilter<"Follow"> | string
    followerId?: StringFilter<"Follow"> | string
    followingId?: StringFilter<"Follow"> | string
    createdAt?: DateTimeFilter<"Follow"> | Date | string
  }

  export type FollowUpsertWithWhereUniqueWithoutFollowingInput = {
    where: FollowWhereUniqueInput
    update: XOR<FollowUpdateWithoutFollowingInput, FollowUncheckedUpdateWithoutFollowingInput>
    create: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput>
  }

  export type FollowUpdateWithWhereUniqueWithoutFollowingInput = {
    where: FollowWhereUniqueInput
    data: XOR<FollowUpdateWithoutFollowingInput, FollowUncheckedUpdateWithoutFollowingInput>
  }

  export type FollowUpdateManyWithWhereWithoutFollowingInput = {
    where: FollowScalarWhereInput
    data: XOR<FollowUpdateManyMutationInput, FollowUncheckedUpdateManyWithoutFollowingInput>
  }

  export type ShoppingListUpsertWithWhereUniqueWithoutUserInput = {
    where: ShoppingListWhereUniqueInput
    update: XOR<ShoppingListUpdateWithoutUserInput, ShoppingListUncheckedUpdateWithoutUserInput>
    create: XOR<ShoppingListCreateWithoutUserInput, ShoppingListUncheckedCreateWithoutUserInput>
  }

  export type ShoppingListUpdateWithWhereUniqueWithoutUserInput = {
    where: ShoppingListWhereUniqueInput
    data: XOR<ShoppingListUpdateWithoutUserInput, ShoppingListUncheckedUpdateWithoutUserInput>
  }

  export type ShoppingListUpdateManyWithWhereWithoutUserInput = {
    where: ShoppingListScalarWhereInput
    data: XOR<ShoppingListUpdateManyMutationInput, ShoppingListUncheckedUpdateManyWithoutUserInput>
  }

  export type ShoppingListScalarWhereInput = {
    AND?: ShoppingListScalarWhereInput | ShoppingListScalarWhereInput[]
    OR?: ShoppingListScalarWhereInput[]
    NOT?: ShoppingListScalarWhereInput | ShoppingListScalarWhereInput[]
    id?: StringFilter<"ShoppingList"> | string
    userId?: StringFilter<"ShoppingList"> | string
    name?: StringFilter<"ShoppingList"> | string
    items?: JsonFilter<"ShoppingList">
    createdAt?: DateTimeFilter<"ShoppingList"> | Date | string
    updatedAt?: DateTimeFilter<"ShoppingList"> | Date | string
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    bio?: string | null
    avatar?: string | null
    verified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    password?: string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    recipes?: RecipeCreateNestedManyWithoutAuthorInput
    savedRecipes?: SavedRecipeCreateNestedManyWithoutUserInput
    recipeLikes?: RecipeLikeCreateNestedManyWithoutUserInput
    recipeReviews?: RecipeReviewCreateNestedManyWithoutUserInput
    madeRecipes?: MadeRecipeCreateNestedManyWithoutUserInput
    mealPlans?: MealPlanCreateNestedManyWithoutUserInput
    foodImages?: FoodImageCreateNestedManyWithoutUserInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    bio?: string | null
    avatar?: string | null
    verified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    password?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutAuthorInput
    savedRecipes?: SavedRecipeUncheckedCreateNestedManyWithoutUserInput
    recipeLikes?: RecipeLikeUncheckedCreateNestedManyWithoutUserInput
    recipeReviews?: RecipeReviewUncheckedCreateNestedManyWithoutUserInput
    madeRecipes?: MadeRecipeUncheckedCreateNestedManyWithoutUserInput
    mealPlans?: MealPlanUncheckedCreateNestedManyWithoutUserInput
    foodImages?: FoodImageUncheckedCreateNestedManyWithoutUserInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    recipes?: RecipeUpdateManyWithoutAuthorNestedInput
    savedRecipes?: SavedRecipeUpdateManyWithoutUserNestedInput
    recipeLikes?: RecipeLikeUpdateManyWithoutUserNestedInput
    recipeReviews?: RecipeReviewUpdateManyWithoutUserNestedInput
    madeRecipes?: MadeRecipeUpdateManyWithoutUserNestedInput
    mealPlans?: MealPlanUpdateManyWithoutUserNestedInput
    foodImages?: FoodImageUpdateManyWithoutUserNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutAuthorNestedInput
    savedRecipes?: SavedRecipeUncheckedUpdateManyWithoutUserNestedInput
    recipeLikes?: RecipeLikeUncheckedUpdateManyWithoutUserNestedInput
    recipeReviews?: RecipeReviewUncheckedUpdateManyWithoutUserNestedInput
    madeRecipes?: MadeRecipeUncheckedUpdateManyWithoutUserNestedInput
    mealPlans?: MealPlanUncheckedUpdateManyWithoutUserNestedInput
    foodImages?: FoodImageUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    bio?: string | null
    avatar?: string | null
    verified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    password?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    recipes?: RecipeCreateNestedManyWithoutAuthorInput
    savedRecipes?: SavedRecipeCreateNestedManyWithoutUserInput
    recipeLikes?: RecipeLikeCreateNestedManyWithoutUserInput
    recipeReviews?: RecipeReviewCreateNestedManyWithoutUserInput
    madeRecipes?: MadeRecipeCreateNestedManyWithoutUserInput
    mealPlans?: MealPlanCreateNestedManyWithoutUserInput
    foodImages?: FoodImageCreateNestedManyWithoutUserInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    bio?: string | null
    avatar?: string | null
    verified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    password?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutAuthorInput
    savedRecipes?: SavedRecipeUncheckedCreateNestedManyWithoutUserInput
    recipeLikes?: RecipeLikeUncheckedCreateNestedManyWithoutUserInput
    recipeReviews?: RecipeReviewUncheckedCreateNestedManyWithoutUserInput
    madeRecipes?: MadeRecipeUncheckedCreateNestedManyWithoutUserInput
    mealPlans?: MealPlanUncheckedCreateNestedManyWithoutUserInput
    foodImages?: FoodImageUncheckedCreateNestedManyWithoutUserInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    recipes?: RecipeUpdateManyWithoutAuthorNestedInput
    savedRecipes?: SavedRecipeUpdateManyWithoutUserNestedInput
    recipeLikes?: RecipeLikeUpdateManyWithoutUserNestedInput
    recipeReviews?: RecipeReviewUpdateManyWithoutUserNestedInput
    madeRecipes?: MadeRecipeUpdateManyWithoutUserNestedInput
    mealPlans?: MealPlanUpdateManyWithoutUserNestedInput
    foodImages?: FoodImageUpdateManyWithoutUserNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutAuthorNestedInput
    savedRecipes?: SavedRecipeUncheckedUpdateManyWithoutUserNestedInput
    recipeLikes?: RecipeLikeUncheckedUpdateManyWithoutUserNestedInput
    recipeReviews?: RecipeReviewUncheckedUpdateManyWithoutUserNestedInput
    madeRecipes?: MadeRecipeUncheckedUpdateManyWithoutUserNestedInput
    mealPlans?: MealPlanUncheckedUpdateManyWithoutUserNestedInput
    foodImages?: FoodImageUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutFoodImagesInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    bio?: string | null
    avatar?: string | null
    verified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    password?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    recipes?: RecipeCreateNestedManyWithoutAuthorInput
    savedRecipes?: SavedRecipeCreateNestedManyWithoutUserInput
    recipeLikes?: RecipeLikeCreateNestedManyWithoutUserInput
    recipeReviews?: RecipeReviewCreateNestedManyWithoutUserInput
    madeRecipes?: MadeRecipeCreateNestedManyWithoutUserInput
    mealPlans?: MealPlanCreateNestedManyWithoutUserInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFoodImagesInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    bio?: string | null
    avatar?: string | null
    verified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    password?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutAuthorInput
    savedRecipes?: SavedRecipeUncheckedCreateNestedManyWithoutUserInput
    recipeLikes?: RecipeLikeUncheckedCreateNestedManyWithoutUserInput
    recipeReviews?: RecipeReviewUncheckedCreateNestedManyWithoutUserInput
    madeRecipes?: MadeRecipeUncheckedCreateNestedManyWithoutUserInput
    mealPlans?: MealPlanUncheckedCreateNestedManyWithoutUserInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFoodImagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFoodImagesInput, UserUncheckedCreateWithoutFoodImagesInput>
  }

  export type RecipeCreateWithoutFoodImagesInput = {
    id?: string
    title: string
    description?: string | null
    instructions: JsonNullValueInput | InputJsonValue
    prepTime?: number | null
    cookTime?: number | null
    servings?: number | null
    difficulty?: string | null
    cuisine?: string | null
    category?: string | null
    images?: RecipeCreateimagesInput | string[]
    mainImage?: string | null
    aiTags?: RecipeCreateaiTagsInput | string[]
    userTags?: RecipeCreateuserTagsInput | string[]
    allTags?: RecipeCreateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: number
    savesCount?: number
    madeCount?: number
    viewsCount?: number
    avgRating?: number
    reviewsCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    publishedAt?: Date | string | null
    isPublished?: boolean
    author: UserCreateNestedOneWithoutRecipesInput
    ingredients?: RecipeIngredientCreateNestedManyWithoutRecipeInput
    likes?: RecipeLikeCreateNestedManyWithoutRecipeInput
    saves?: SavedRecipeCreateNestedManyWithoutRecipeInput
    reviews?: RecipeReviewCreateNestedManyWithoutRecipeInput
    madeRecipes?: MadeRecipeCreateNestedManyWithoutRecipeInput
    mealPlanItems?: MealPlanItemCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUncheckedCreateWithoutFoodImagesInput = {
    id?: string
    title: string
    description?: string | null
    instructions: JsonNullValueInput | InputJsonValue
    prepTime?: number | null
    cookTime?: number | null
    servings?: number | null
    difficulty?: string | null
    cuisine?: string | null
    category?: string | null
    images?: RecipeCreateimagesInput | string[]
    mainImage?: string | null
    aiTags?: RecipeCreateaiTagsInput | string[]
    userTags?: RecipeCreateuserTagsInput | string[]
    allTags?: RecipeCreateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: number
    savesCount?: number
    madeCount?: number
    viewsCount?: number
    avgRating?: number
    reviewsCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    publishedAt?: Date | string | null
    isPublished?: boolean
    authorId: string
    ingredients?: RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInput
    likes?: RecipeLikeUncheckedCreateNestedManyWithoutRecipeInput
    saves?: SavedRecipeUncheckedCreateNestedManyWithoutRecipeInput
    reviews?: RecipeReviewUncheckedCreateNestedManyWithoutRecipeInput
    madeRecipes?: MadeRecipeUncheckedCreateNestedManyWithoutRecipeInput
    mealPlanItems?: MealPlanItemUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type RecipeCreateOrConnectWithoutFoodImagesInput = {
    where: RecipeWhereUniqueInput
    create: XOR<RecipeCreateWithoutFoodImagesInput, RecipeUncheckedCreateWithoutFoodImagesInput>
  }

  export type UserUpsertWithoutFoodImagesInput = {
    update: XOR<UserUpdateWithoutFoodImagesInput, UserUncheckedUpdateWithoutFoodImagesInput>
    create: XOR<UserCreateWithoutFoodImagesInput, UserUncheckedCreateWithoutFoodImagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFoodImagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFoodImagesInput, UserUncheckedUpdateWithoutFoodImagesInput>
  }

  export type UserUpdateWithoutFoodImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    recipes?: RecipeUpdateManyWithoutAuthorNestedInput
    savedRecipes?: SavedRecipeUpdateManyWithoutUserNestedInput
    recipeLikes?: RecipeLikeUpdateManyWithoutUserNestedInput
    recipeReviews?: RecipeReviewUpdateManyWithoutUserNestedInput
    madeRecipes?: MadeRecipeUpdateManyWithoutUserNestedInput
    mealPlans?: MealPlanUpdateManyWithoutUserNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFoodImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutAuthorNestedInput
    savedRecipes?: SavedRecipeUncheckedUpdateManyWithoutUserNestedInput
    recipeLikes?: RecipeLikeUncheckedUpdateManyWithoutUserNestedInput
    recipeReviews?: RecipeReviewUncheckedUpdateManyWithoutUserNestedInput
    madeRecipes?: MadeRecipeUncheckedUpdateManyWithoutUserNestedInput
    mealPlans?: MealPlanUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RecipeUpsertWithoutFoodImagesInput = {
    update: XOR<RecipeUpdateWithoutFoodImagesInput, RecipeUncheckedUpdateWithoutFoodImagesInput>
    create: XOR<RecipeCreateWithoutFoodImagesInput, RecipeUncheckedCreateWithoutFoodImagesInput>
    where?: RecipeWhereInput
  }

  export type RecipeUpdateToOneWithWhereWithoutFoodImagesInput = {
    where?: RecipeWhereInput
    data: XOR<RecipeUpdateWithoutFoodImagesInput, RecipeUncheckedUpdateWithoutFoodImagesInput>
  }

  export type RecipeUpdateWithoutFoodImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: JsonNullValueInput | InputJsonValue
    prepTime?: NullableIntFieldUpdateOperationsInput | number | null
    cookTime?: NullableIntFieldUpdateOperationsInput | number | null
    servings?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    cuisine?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeUpdateimagesInput | string[]
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    aiTags?: RecipeUpdateaiTagsInput | string[]
    userTags?: RecipeUpdateuserTagsInput | string[]
    allTags?: RecipeUpdateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: IntFieldUpdateOperationsInput | number
    savesCount?: IntFieldUpdateOperationsInput | number
    madeCount?: IntFieldUpdateOperationsInput | number
    viewsCount?: IntFieldUpdateOperationsInput | number
    avgRating?: FloatFieldUpdateOperationsInput | number
    reviewsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    author?: UserUpdateOneRequiredWithoutRecipesNestedInput
    ingredients?: RecipeIngredientUpdateManyWithoutRecipeNestedInput
    likes?: RecipeLikeUpdateManyWithoutRecipeNestedInput
    saves?: SavedRecipeUpdateManyWithoutRecipeNestedInput
    reviews?: RecipeReviewUpdateManyWithoutRecipeNestedInput
    madeRecipes?: MadeRecipeUpdateManyWithoutRecipeNestedInput
    mealPlanItems?: MealPlanItemUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateWithoutFoodImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: JsonNullValueInput | InputJsonValue
    prepTime?: NullableIntFieldUpdateOperationsInput | number | null
    cookTime?: NullableIntFieldUpdateOperationsInput | number | null
    servings?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    cuisine?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeUpdateimagesInput | string[]
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    aiTags?: RecipeUpdateaiTagsInput | string[]
    userTags?: RecipeUpdateuserTagsInput | string[]
    allTags?: RecipeUpdateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: IntFieldUpdateOperationsInput | number
    savesCount?: IntFieldUpdateOperationsInput | number
    madeCount?: IntFieldUpdateOperationsInput | number
    viewsCount?: IntFieldUpdateOperationsInput | number
    avgRating?: FloatFieldUpdateOperationsInput | number
    reviewsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    authorId?: StringFieldUpdateOperationsInput | string
    ingredients?: RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInput
    likes?: RecipeLikeUncheckedUpdateManyWithoutRecipeNestedInput
    saves?: SavedRecipeUncheckedUpdateManyWithoutRecipeNestedInput
    reviews?: RecipeReviewUncheckedUpdateManyWithoutRecipeNestedInput
    madeRecipes?: MadeRecipeUncheckedUpdateManyWithoutRecipeNestedInput
    mealPlanItems?: MealPlanItemUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type UserCreateWithoutRecipesInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    bio?: string | null
    avatar?: string | null
    verified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    password?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    savedRecipes?: SavedRecipeCreateNestedManyWithoutUserInput
    recipeLikes?: RecipeLikeCreateNestedManyWithoutUserInput
    recipeReviews?: RecipeReviewCreateNestedManyWithoutUserInput
    madeRecipes?: MadeRecipeCreateNestedManyWithoutUserInput
    mealPlans?: MealPlanCreateNestedManyWithoutUserInput
    foodImages?: FoodImageCreateNestedManyWithoutUserInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRecipesInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    bio?: string | null
    avatar?: string | null
    verified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    password?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    savedRecipes?: SavedRecipeUncheckedCreateNestedManyWithoutUserInput
    recipeLikes?: RecipeLikeUncheckedCreateNestedManyWithoutUserInput
    recipeReviews?: RecipeReviewUncheckedCreateNestedManyWithoutUserInput
    madeRecipes?: MadeRecipeUncheckedCreateNestedManyWithoutUserInput
    mealPlans?: MealPlanUncheckedCreateNestedManyWithoutUserInput
    foodImages?: FoodImageUncheckedCreateNestedManyWithoutUserInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRecipesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRecipesInput, UserUncheckedCreateWithoutRecipesInput>
  }

  export type RecipeIngredientCreateWithoutRecipeInput = {
    id?: string
    amount?: number | null
    unit?: string | null
    preparation?: string | null
    optional?: boolean
    ingredient: IngredientCreateNestedOneWithoutRecipeIngredientsInput
  }

  export type RecipeIngredientUncheckedCreateWithoutRecipeInput = {
    id?: string
    ingredientId: string
    amount?: number | null
    unit?: string | null
    preparation?: string | null
    optional?: boolean
  }

  export type RecipeIngredientCreateOrConnectWithoutRecipeInput = {
    where: RecipeIngredientWhereUniqueInput
    create: XOR<RecipeIngredientCreateWithoutRecipeInput, RecipeIngredientUncheckedCreateWithoutRecipeInput>
  }

  export type RecipeIngredientCreateManyRecipeInputEnvelope = {
    data: RecipeIngredientCreateManyRecipeInput | RecipeIngredientCreateManyRecipeInput[]
    skipDuplicates?: boolean
  }

  export type RecipeLikeCreateWithoutRecipeInput = {
    id?: string
    likedAt?: Date | string
    user: UserCreateNestedOneWithoutRecipeLikesInput
  }

  export type RecipeLikeUncheckedCreateWithoutRecipeInput = {
    id?: string
    userId: string
    likedAt?: Date | string
  }

  export type RecipeLikeCreateOrConnectWithoutRecipeInput = {
    where: RecipeLikeWhereUniqueInput
    create: XOR<RecipeLikeCreateWithoutRecipeInput, RecipeLikeUncheckedCreateWithoutRecipeInput>
  }

  export type RecipeLikeCreateManyRecipeInputEnvelope = {
    data: RecipeLikeCreateManyRecipeInput | RecipeLikeCreateManyRecipeInput[]
    skipDuplicates?: boolean
  }

  export type SavedRecipeCreateWithoutRecipeInput = {
    id?: string
    savedAt?: Date | string
    notes?: string | null
    user: UserCreateNestedOneWithoutSavedRecipesInput
  }

  export type SavedRecipeUncheckedCreateWithoutRecipeInput = {
    id?: string
    userId: string
    savedAt?: Date | string
    notes?: string | null
  }

  export type SavedRecipeCreateOrConnectWithoutRecipeInput = {
    where: SavedRecipeWhereUniqueInput
    create: XOR<SavedRecipeCreateWithoutRecipeInput, SavedRecipeUncheckedCreateWithoutRecipeInput>
  }

  export type SavedRecipeCreateManyRecipeInputEnvelope = {
    data: SavedRecipeCreateManyRecipeInput | SavedRecipeCreateManyRecipeInput[]
    skipDuplicates?: boolean
  }

  export type RecipeReviewCreateWithoutRecipeInput = {
    id?: string
    rating: number
    comment?: string | null
    images?: RecipeReviewCreateimagesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutRecipeReviewsInput
  }

  export type RecipeReviewUncheckedCreateWithoutRecipeInput = {
    id?: string
    userId: string
    rating: number
    comment?: string | null
    images?: RecipeReviewCreateimagesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecipeReviewCreateOrConnectWithoutRecipeInput = {
    where: RecipeReviewWhereUniqueInput
    create: XOR<RecipeReviewCreateWithoutRecipeInput, RecipeReviewUncheckedCreateWithoutRecipeInput>
  }

  export type RecipeReviewCreateManyRecipeInputEnvelope = {
    data: RecipeReviewCreateManyRecipeInput | RecipeReviewCreateManyRecipeInput[]
    skipDuplicates?: boolean
  }

  export type MadeRecipeCreateWithoutRecipeInput = {
    id?: string
    madeAt?: Date | string
    rating?: number | null
    notes?: string | null
    images?: MadeRecipeCreateimagesInput | string[]
    user: UserCreateNestedOneWithoutMadeRecipesInput
  }

  export type MadeRecipeUncheckedCreateWithoutRecipeInput = {
    id?: string
    userId: string
    madeAt?: Date | string
    rating?: number | null
    notes?: string | null
    images?: MadeRecipeCreateimagesInput | string[]
  }

  export type MadeRecipeCreateOrConnectWithoutRecipeInput = {
    where: MadeRecipeWhereUniqueInput
    create: XOR<MadeRecipeCreateWithoutRecipeInput, MadeRecipeUncheckedCreateWithoutRecipeInput>
  }

  export type MadeRecipeCreateManyRecipeInputEnvelope = {
    data: MadeRecipeCreateManyRecipeInput | MadeRecipeCreateManyRecipeInput[]
    skipDuplicates?: boolean
  }

  export type MealPlanItemCreateWithoutRecipeInput = {
    id?: string
    date: Date | string
    mealType: string
    servings?: number
    mealPlan: MealPlanCreateNestedOneWithoutItemsInput
  }

  export type MealPlanItemUncheckedCreateWithoutRecipeInput = {
    id?: string
    mealPlanId: string
    date: Date | string
    mealType: string
    servings?: number
  }

  export type MealPlanItemCreateOrConnectWithoutRecipeInput = {
    where: MealPlanItemWhereUniqueInput
    create: XOR<MealPlanItemCreateWithoutRecipeInput, MealPlanItemUncheckedCreateWithoutRecipeInput>
  }

  export type MealPlanItemCreateManyRecipeInputEnvelope = {
    data: MealPlanItemCreateManyRecipeInput | MealPlanItemCreateManyRecipeInput[]
    skipDuplicates?: boolean
  }

  export type FoodImageCreateWithoutRecipeInput = {
    id?: string
    filename: string
    base64: string
    uploadedAt?: Date | string
    analysis?: NullableJsonNullValueInput | InputJsonValue
    user?: UserCreateNestedOneWithoutFoodImagesInput
  }

  export type FoodImageUncheckedCreateWithoutRecipeInput = {
    id?: string
    filename: string
    base64: string
    uploadedAt?: Date | string
    analysis?: NullableJsonNullValueInput | InputJsonValue
    userId?: string | null
  }

  export type FoodImageCreateOrConnectWithoutRecipeInput = {
    where: FoodImageWhereUniqueInput
    create: XOR<FoodImageCreateWithoutRecipeInput, FoodImageUncheckedCreateWithoutRecipeInput>
  }

  export type FoodImageCreateManyRecipeInputEnvelope = {
    data: FoodImageCreateManyRecipeInput | FoodImageCreateManyRecipeInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutRecipesInput = {
    update: XOR<UserUpdateWithoutRecipesInput, UserUncheckedUpdateWithoutRecipesInput>
    create: XOR<UserCreateWithoutRecipesInput, UserUncheckedCreateWithoutRecipesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRecipesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRecipesInput, UserUncheckedUpdateWithoutRecipesInput>
  }

  export type UserUpdateWithoutRecipesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    savedRecipes?: SavedRecipeUpdateManyWithoutUserNestedInput
    recipeLikes?: RecipeLikeUpdateManyWithoutUserNestedInput
    recipeReviews?: RecipeReviewUpdateManyWithoutUserNestedInput
    madeRecipes?: MadeRecipeUpdateManyWithoutUserNestedInput
    mealPlans?: MealPlanUpdateManyWithoutUserNestedInput
    foodImages?: FoodImageUpdateManyWithoutUserNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRecipesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    savedRecipes?: SavedRecipeUncheckedUpdateManyWithoutUserNestedInput
    recipeLikes?: RecipeLikeUncheckedUpdateManyWithoutUserNestedInput
    recipeReviews?: RecipeReviewUncheckedUpdateManyWithoutUserNestedInput
    madeRecipes?: MadeRecipeUncheckedUpdateManyWithoutUserNestedInput
    mealPlans?: MealPlanUncheckedUpdateManyWithoutUserNestedInput
    foodImages?: FoodImageUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInput = {
    where: RecipeIngredientWhereUniqueInput
    update: XOR<RecipeIngredientUpdateWithoutRecipeInput, RecipeIngredientUncheckedUpdateWithoutRecipeInput>
    create: XOR<RecipeIngredientCreateWithoutRecipeInput, RecipeIngredientUncheckedCreateWithoutRecipeInput>
  }

  export type RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInput = {
    where: RecipeIngredientWhereUniqueInput
    data: XOR<RecipeIngredientUpdateWithoutRecipeInput, RecipeIngredientUncheckedUpdateWithoutRecipeInput>
  }

  export type RecipeIngredientUpdateManyWithWhereWithoutRecipeInput = {
    where: RecipeIngredientScalarWhereInput
    data: XOR<RecipeIngredientUpdateManyMutationInput, RecipeIngredientUncheckedUpdateManyWithoutRecipeInput>
  }

  export type RecipeIngredientScalarWhereInput = {
    AND?: RecipeIngredientScalarWhereInput | RecipeIngredientScalarWhereInput[]
    OR?: RecipeIngredientScalarWhereInput[]
    NOT?: RecipeIngredientScalarWhereInput | RecipeIngredientScalarWhereInput[]
    id?: StringFilter<"RecipeIngredient"> | string
    recipeId?: StringFilter<"RecipeIngredient"> | string
    ingredientId?: StringFilter<"RecipeIngredient"> | string
    amount?: FloatNullableFilter<"RecipeIngredient"> | number | null
    unit?: StringNullableFilter<"RecipeIngredient"> | string | null
    preparation?: StringNullableFilter<"RecipeIngredient"> | string | null
    optional?: BoolFilter<"RecipeIngredient"> | boolean
  }

  export type RecipeLikeUpsertWithWhereUniqueWithoutRecipeInput = {
    where: RecipeLikeWhereUniqueInput
    update: XOR<RecipeLikeUpdateWithoutRecipeInput, RecipeLikeUncheckedUpdateWithoutRecipeInput>
    create: XOR<RecipeLikeCreateWithoutRecipeInput, RecipeLikeUncheckedCreateWithoutRecipeInput>
  }

  export type RecipeLikeUpdateWithWhereUniqueWithoutRecipeInput = {
    where: RecipeLikeWhereUniqueInput
    data: XOR<RecipeLikeUpdateWithoutRecipeInput, RecipeLikeUncheckedUpdateWithoutRecipeInput>
  }

  export type RecipeLikeUpdateManyWithWhereWithoutRecipeInput = {
    where: RecipeLikeScalarWhereInput
    data: XOR<RecipeLikeUpdateManyMutationInput, RecipeLikeUncheckedUpdateManyWithoutRecipeInput>
  }

  export type SavedRecipeUpsertWithWhereUniqueWithoutRecipeInput = {
    where: SavedRecipeWhereUniqueInput
    update: XOR<SavedRecipeUpdateWithoutRecipeInput, SavedRecipeUncheckedUpdateWithoutRecipeInput>
    create: XOR<SavedRecipeCreateWithoutRecipeInput, SavedRecipeUncheckedCreateWithoutRecipeInput>
  }

  export type SavedRecipeUpdateWithWhereUniqueWithoutRecipeInput = {
    where: SavedRecipeWhereUniqueInput
    data: XOR<SavedRecipeUpdateWithoutRecipeInput, SavedRecipeUncheckedUpdateWithoutRecipeInput>
  }

  export type SavedRecipeUpdateManyWithWhereWithoutRecipeInput = {
    where: SavedRecipeScalarWhereInput
    data: XOR<SavedRecipeUpdateManyMutationInput, SavedRecipeUncheckedUpdateManyWithoutRecipeInput>
  }

  export type RecipeReviewUpsertWithWhereUniqueWithoutRecipeInput = {
    where: RecipeReviewWhereUniqueInput
    update: XOR<RecipeReviewUpdateWithoutRecipeInput, RecipeReviewUncheckedUpdateWithoutRecipeInput>
    create: XOR<RecipeReviewCreateWithoutRecipeInput, RecipeReviewUncheckedCreateWithoutRecipeInput>
  }

  export type RecipeReviewUpdateWithWhereUniqueWithoutRecipeInput = {
    where: RecipeReviewWhereUniqueInput
    data: XOR<RecipeReviewUpdateWithoutRecipeInput, RecipeReviewUncheckedUpdateWithoutRecipeInput>
  }

  export type RecipeReviewUpdateManyWithWhereWithoutRecipeInput = {
    where: RecipeReviewScalarWhereInput
    data: XOR<RecipeReviewUpdateManyMutationInput, RecipeReviewUncheckedUpdateManyWithoutRecipeInput>
  }

  export type MadeRecipeUpsertWithWhereUniqueWithoutRecipeInput = {
    where: MadeRecipeWhereUniqueInput
    update: XOR<MadeRecipeUpdateWithoutRecipeInput, MadeRecipeUncheckedUpdateWithoutRecipeInput>
    create: XOR<MadeRecipeCreateWithoutRecipeInput, MadeRecipeUncheckedCreateWithoutRecipeInput>
  }

  export type MadeRecipeUpdateWithWhereUniqueWithoutRecipeInput = {
    where: MadeRecipeWhereUniqueInput
    data: XOR<MadeRecipeUpdateWithoutRecipeInput, MadeRecipeUncheckedUpdateWithoutRecipeInput>
  }

  export type MadeRecipeUpdateManyWithWhereWithoutRecipeInput = {
    where: MadeRecipeScalarWhereInput
    data: XOR<MadeRecipeUpdateManyMutationInput, MadeRecipeUncheckedUpdateManyWithoutRecipeInput>
  }

  export type MealPlanItemUpsertWithWhereUniqueWithoutRecipeInput = {
    where: MealPlanItemWhereUniqueInput
    update: XOR<MealPlanItemUpdateWithoutRecipeInput, MealPlanItemUncheckedUpdateWithoutRecipeInput>
    create: XOR<MealPlanItemCreateWithoutRecipeInput, MealPlanItemUncheckedCreateWithoutRecipeInput>
  }

  export type MealPlanItemUpdateWithWhereUniqueWithoutRecipeInput = {
    where: MealPlanItemWhereUniqueInput
    data: XOR<MealPlanItemUpdateWithoutRecipeInput, MealPlanItemUncheckedUpdateWithoutRecipeInput>
  }

  export type MealPlanItemUpdateManyWithWhereWithoutRecipeInput = {
    where: MealPlanItemScalarWhereInput
    data: XOR<MealPlanItemUpdateManyMutationInput, MealPlanItemUncheckedUpdateManyWithoutRecipeInput>
  }

  export type MealPlanItemScalarWhereInput = {
    AND?: MealPlanItemScalarWhereInput | MealPlanItemScalarWhereInput[]
    OR?: MealPlanItemScalarWhereInput[]
    NOT?: MealPlanItemScalarWhereInput | MealPlanItemScalarWhereInput[]
    id?: StringFilter<"MealPlanItem"> | string
    mealPlanId?: StringFilter<"MealPlanItem"> | string
    recipeId?: StringFilter<"MealPlanItem"> | string
    date?: DateTimeFilter<"MealPlanItem"> | Date | string
    mealType?: StringFilter<"MealPlanItem"> | string
    servings?: IntFilter<"MealPlanItem"> | number
  }

  export type FoodImageUpsertWithWhereUniqueWithoutRecipeInput = {
    where: FoodImageWhereUniqueInput
    update: XOR<FoodImageUpdateWithoutRecipeInput, FoodImageUncheckedUpdateWithoutRecipeInput>
    create: XOR<FoodImageCreateWithoutRecipeInput, FoodImageUncheckedCreateWithoutRecipeInput>
  }

  export type FoodImageUpdateWithWhereUniqueWithoutRecipeInput = {
    where: FoodImageWhereUniqueInput
    data: XOR<FoodImageUpdateWithoutRecipeInput, FoodImageUncheckedUpdateWithoutRecipeInput>
  }

  export type FoodImageUpdateManyWithWhereWithoutRecipeInput = {
    where: FoodImageScalarWhereInput
    data: XOR<FoodImageUpdateManyMutationInput, FoodImageUncheckedUpdateManyWithoutRecipeInput>
  }

  export type RecipeIngredientCreateWithoutIngredientInput = {
    id?: string
    amount?: number | null
    unit?: string | null
    preparation?: string | null
    optional?: boolean
    recipe: RecipeCreateNestedOneWithoutIngredientsInput
  }

  export type RecipeIngredientUncheckedCreateWithoutIngredientInput = {
    id?: string
    recipeId: string
    amount?: number | null
    unit?: string | null
    preparation?: string | null
    optional?: boolean
  }

  export type RecipeIngredientCreateOrConnectWithoutIngredientInput = {
    where: RecipeIngredientWhereUniqueInput
    create: XOR<RecipeIngredientCreateWithoutIngredientInput, RecipeIngredientUncheckedCreateWithoutIngredientInput>
  }

  export type RecipeIngredientCreateManyIngredientInputEnvelope = {
    data: RecipeIngredientCreateManyIngredientInput | RecipeIngredientCreateManyIngredientInput[]
    skipDuplicates?: boolean
  }

  export type RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInput = {
    where: RecipeIngredientWhereUniqueInput
    update: XOR<RecipeIngredientUpdateWithoutIngredientInput, RecipeIngredientUncheckedUpdateWithoutIngredientInput>
    create: XOR<RecipeIngredientCreateWithoutIngredientInput, RecipeIngredientUncheckedCreateWithoutIngredientInput>
  }

  export type RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInput = {
    where: RecipeIngredientWhereUniqueInput
    data: XOR<RecipeIngredientUpdateWithoutIngredientInput, RecipeIngredientUncheckedUpdateWithoutIngredientInput>
  }

  export type RecipeIngredientUpdateManyWithWhereWithoutIngredientInput = {
    where: RecipeIngredientScalarWhereInput
    data: XOR<RecipeIngredientUpdateManyMutationInput, RecipeIngredientUncheckedUpdateManyWithoutIngredientInput>
  }

  export type RecipeCreateWithoutIngredientsInput = {
    id?: string
    title: string
    description?: string | null
    instructions: JsonNullValueInput | InputJsonValue
    prepTime?: number | null
    cookTime?: number | null
    servings?: number | null
    difficulty?: string | null
    cuisine?: string | null
    category?: string | null
    images?: RecipeCreateimagesInput | string[]
    mainImage?: string | null
    aiTags?: RecipeCreateaiTagsInput | string[]
    userTags?: RecipeCreateuserTagsInput | string[]
    allTags?: RecipeCreateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: number
    savesCount?: number
    madeCount?: number
    viewsCount?: number
    avgRating?: number
    reviewsCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    publishedAt?: Date | string | null
    isPublished?: boolean
    author: UserCreateNestedOneWithoutRecipesInput
    likes?: RecipeLikeCreateNestedManyWithoutRecipeInput
    saves?: SavedRecipeCreateNestedManyWithoutRecipeInput
    reviews?: RecipeReviewCreateNestedManyWithoutRecipeInput
    madeRecipes?: MadeRecipeCreateNestedManyWithoutRecipeInput
    mealPlanItems?: MealPlanItemCreateNestedManyWithoutRecipeInput
    foodImages?: FoodImageCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUncheckedCreateWithoutIngredientsInput = {
    id?: string
    title: string
    description?: string | null
    instructions: JsonNullValueInput | InputJsonValue
    prepTime?: number | null
    cookTime?: number | null
    servings?: number | null
    difficulty?: string | null
    cuisine?: string | null
    category?: string | null
    images?: RecipeCreateimagesInput | string[]
    mainImage?: string | null
    aiTags?: RecipeCreateaiTagsInput | string[]
    userTags?: RecipeCreateuserTagsInput | string[]
    allTags?: RecipeCreateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: number
    savesCount?: number
    madeCount?: number
    viewsCount?: number
    avgRating?: number
    reviewsCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    publishedAt?: Date | string | null
    isPublished?: boolean
    authorId: string
    likes?: RecipeLikeUncheckedCreateNestedManyWithoutRecipeInput
    saves?: SavedRecipeUncheckedCreateNestedManyWithoutRecipeInput
    reviews?: RecipeReviewUncheckedCreateNestedManyWithoutRecipeInput
    madeRecipes?: MadeRecipeUncheckedCreateNestedManyWithoutRecipeInput
    mealPlanItems?: MealPlanItemUncheckedCreateNestedManyWithoutRecipeInput
    foodImages?: FoodImageUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type RecipeCreateOrConnectWithoutIngredientsInput = {
    where: RecipeWhereUniqueInput
    create: XOR<RecipeCreateWithoutIngredientsInput, RecipeUncheckedCreateWithoutIngredientsInput>
  }

  export type IngredientCreateWithoutRecipeIngredientsInput = {
    id?: string
    name: string
    category?: string | null
    commonUnit?: string | null
    nutritionPer100g?: NullableJsonNullValueInput | InputJsonValue
    aliases?: IngredientCreatealiasesInput | string[]
    createdAt?: Date | string
  }

  export type IngredientUncheckedCreateWithoutRecipeIngredientsInput = {
    id?: string
    name: string
    category?: string | null
    commonUnit?: string | null
    nutritionPer100g?: NullableJsonNullValueInput | InputJsonValue
    aliases?: IngredientCreatealiasesInput | string[]
    createdAt?: Date | string
  }

  export type IngredientCreateOrConnectWithoutRecipeIngredientsInput = {
    where: IngredientWhereUniqueInput
    create: XOR<IngredientCreateWithoutRecipeIngredientsInput, IngredientUncheckedCreateWithoutRecipeIngredientsInput>
  }

  export type RecipeUpsertWithoutIngredientsInput = {
    update: XOR<RecipeUpdateWithoutIngredientsInput, RecipeUncheckedUpdateWithoutIngredientsInput>
    create: XOR<RecipeCreateWithoutIngredientsInput, RecipeUncheckedCreateWithoutIngredientsInput>
    where?: RecipeWhereInput
  }

  export type RecipeUpdateToOneWithWhereWithoutIngredientsInput = {
    where?: RecipeWhereInput
    data: XOR<RecipeUpdateWithoutIngredientsInput, RecipeUncheckedUpdateWithoutIngredientsInput>
  }

  export type RecipeUpdateWithoutIngredientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: JsonNullValueInput | InputJsonValue
    prepTime?: NullableIntFieldUpdateOperationsInput | number | null
    cookTime?: NullableIntFieldUpdateOperationsInput | number | null
    servings?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    cuisine?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeUpdateimagesInput | string[]
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    aiTags?: RecipeUpdateaiTagsInput | string[]
    userTags?: RecipeUpdateuserTagsInput | string[]
    allTags?: RecipeUpdateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: IntFieldUpdateOperationsInput | number
    savesCount?: IntFieldUpdateOperationsInput | number
    madeCount?: IntFieldUpdateOperationsInput | number
    viewsCount?: IntFieldUpdateOperationsInput | number
    avgRating?: FloatFieldUpdateOperationsInput | number
    reviewsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    author?: UserUpdateOneRequiredWithoutRecipesNestedInput
    likes?: RecipeLikeUpdateManyWithoutRecipeNestedInput
    saves?: SavedRecipeUpdateManyWithoutRecipeNestedInput
    reviews?: RecipeReviewUpdateManyWithoutRecipeNestedInput
    madeRecipes?: MadeRecipeUpdateManyWithoutRecipeNestedInput
    mealPlanItems?: MealPlanItemUpdateManyWithoutRecipeNestedInput
    foodImages?: FoodImageUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateWithoutIngredientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: JsonNullValueInput | InputJsonValue
    prepTime?: NullableIntFieldUpdateOperationsInput | number | null
    cookTime?: NullableIntFieldUpdateOperationsInput | number | null
    servings?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    cuisine?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeUpdateimagesInput | string[]
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    aiTags?: RecipeUpdateaiTagsInput | string[]
    userTags?: RecipeUpdateuserTagsInput | string[]
    allTags?: RecipeUpdateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: IntFieldUpdateOperationsInput | number
    savesCount?: IntFieldUpdateOperationsInput | number
    madeCount?: IntFieldUpdateOperationsInput | number
    viewsCount?: IntFieldUpdateOperationsInput | number
    avgRating?: FloatFieldUpdateOperationsInput | number
    reviewsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    authorId?: StringFieldUpdateOperationsInput | string
    likes?: RecipeLikeUncheckedUpdateManyWithoutRecipeNestedInput
    saves?: SavedRecipeUncheckedUpdateManyWithoutRecipeNestedInput
    reviews?: RecipeReviewUncheckedUpdateManyWithoutRecipeNestedInput
    madeRecipes?: MadeRecipeUncheckedUpdateManyWithoutRecipeNestedInput
    mealPlanItems?: MealPlanItemUncheckedUpdateManyWithoutRecipeNestedInput
    foodImages?: FoodImageUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type IngredientUpsertWithoutRecipeIngredientsInput = {
    update: XOR<IngredientUpdateWithoutRecipeIngredientsInput, IngredientUncheckedUpdateWithoutRecipeIngredientsInput>
    create: XOR<IngredientCreateWithoutRecipeIngredientsInput, IngredientUncheckedCreateWithoutRecipeIngredientsInput>
    where?: IngredientWhereInput
  }

  export type IngredientUpdateToOneWithWhereWithoutRecipeIngredientsInput = {
    where?: IngredientWhereInput
    data: XOR<IngredientUpdateWithoutRecipeIngredientsInput, IngredientUncheckedUpdateWithoutRecipeIngredientsInput>
  }

  export type IngredientUpdateWithoutRecipeIngredientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    commonUnit?: NullableStringFieldUpdateOperationsInput | string | null
    nutritionPer100g?: NullableJsonNullValueInput | InputJsonValue
    aliases?: IngredientUpdatealiasesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IngredientUncheckedUpdateWithoutRecipeIngredientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    commonUnit?: NullableStringFieldUpdateOperationsInput | string | null
    nutritionPer100g?: NullableJsonNullValueInput | InputJsonValue
    aliases?: IngredientUpdatealiasesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipeCreateWithoutLikesInput = {
    id?: string
    title: string
    description?: string | null
    instructions: JsonNullValueInput | InputJsonValue
    prepTime?: number | null
    cookTime?: number | null
    servings?: number | null
    difficulty?: string | null
    cuisine?: string | null
    category?: string | null
    images?: RecipeCreateimagesInput | string[]
    mainImage?: string | null
    aiTags?: RecipeCreateaiTagsInput | string[]
    userTags?: RecipeCreateuserTagsInput | string[]
    allTags?: RecipeCreateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: number
    savesCount?: number
    madeCount?: number
    viewsCount?: number
    avgRating?: number
    reviewsCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    publishedAt?: Date | string | null
    isPublished?: boolean
    author: UserCreateNestedOneWithoutRecipesInput
    ingredients?: RecipeIngredientCreateNestedManyWithoutRecipeInput
    saves?: SavedRecipeCreateNestedManyWithoutRecipeInput
    reviews?: RecipeReviewCreateNestedManyWithoutRecipeInput
    madeRecipes?: MadeRecipeCreateNestedManyWithoutRecipeInput
    mealPlanItems?: MealPlanItemCreateNestedManyWithoutRecipeInput
    foodImages?: FoodImageCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUncheckedCreateWithoutLikesInput = {
    id?: string
    title: string
    description?: string | null
    instructions: JsonNullValueInput | InputJsonValue
    prepTime?: number | null
    cookTime?: number | null
    servings?: number | null
    difficulty?: string | null
    cuisine?: string | null
    category?: string | null
    images?: RecipeCreateimagesInput | string[]
    mainImage?: string | null
    aiTags?: RecipeCreateaiTagsInput | string[]
    userTags?: RecipeCreateuserTagsInput | string[]
    allTags?: RecipeCreateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: number
    savesCount?: number
    madeCount?: number
    viewsCount?: number
    avgRating?: number
    reviewsCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    publishedAt?: Date | string | null
    isPublished?: boolean
    authorId: string
    ingredients?: RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInput
    saves?: SavedRecipeUncheckedCreateNestedManyWithoutRecipeInput
    reviews?: RecipeReviewUncheckedCreateNestedManyWithoutRecipeInput
    madeRecipes?: MadeRecipeUncheckedCreateNestedManyWithoutRecipeInput
    mealPlanItems?: MealPlanItemUncheckedCreateNestedManyWithoutRecipeInput
    foodImages?: FoodImageUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type RecipeCreateOrConnectWithoutLikesInput = {
    where: RecipeWhereUniqueInput
    create: XOR<RecipeCreateWithoutLikesInput, RecipeUncheckedCreateWithoutLikesInput>
  }

  export type UserCreateWithoutRecipeLikesInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    bio?: string | null
    avatar?: string | null
    verified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    password?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    recipes?: RecipeCreateNestedManyWithoutAuthorInput
    savedRecipes?: SavedRecipeCreateNestedManyWithoutUserInput
    recipeReviews?: RecipeReviewCreateNestedManyWithoutUserInput
    madeRecipes?: MadeRecipeCreateNestedManyWithoutUserInput
    mealPlans?: MealPlanCreateNestedManyWithoutUserInput
    foodImages?: FoodImageCreateNestedManyWithoutUserInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRecipeLikesInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    bio?: string | null
    avatar?: string | null
    verified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    password?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutAuthorInput
    savedRecipes?: SavedRecipeUncheckedCreateNestedManyWithoutUserInput
    recipeReviews?: RecipeReviewUncheckedCreateNestedManyWithoutUserInput
    madeRecipes?: MadeRecipeUncheckedCreateNestedManyWithoutUserInput
    mealPlans?: MealPlanUncheckedCreateNestedManyWithoutUserInput
    foodImages?: FoodImageUncheckedCreateNestedManyWithoutUserInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRecipeLikesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRecipeLikesInput, UserUncheckedCreateWithoutRecipeLikesInput>
  }

  export type RecipeUpsertWithoutLikesInput = {
    update: XOR<RecipeUpdateWithoutLikesInput, RecipeUncheckedUpdateWithoutLikesInput>
    create: XOR<RecipeCreateWithoutLikesInput, RecipeUncheckedCreateWithoutLikesInput>
    where?: RecipeWhereInput
  }

  export type RecipeUpdateToOneWithWhereWithoutLikesInput = {
    where?: RecipeWhereInput
    data: XOR<RecipeUpdateWithoutLikesInput, RecipeUncheckedUpdateWithoutLikesInput>
  }

  export type RecipeUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: JsonNullValueInput | InputJsonValue
    prepTime?: NullableIntFieldUpdateOperationsInput | number | null
    cookTime?: NullableIntFieldUpdateOperationsInput | number | null
    servings?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    cuisine?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeUpdateimagesInput | string[]
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    aiTags?: RecipeUpdateaiTagsInput | string[]
    userTags?: RecipeUpdateuserTagsInput | string[]
    allTags?: RecipeUpdateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: IntFieldUpdateOperationsInput | number
    savesCount?: IntFieldUpdateOperationsInput | number
    madeCount?: IntFieldUpdateOperationsInput | number
    viewsCount?: IntFieldUpdateOperationsInput | number
    avgRating?: FloatFieldUpdateOperationsInput | number
    reviewsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    author?: UserUpdateOneRequiredWithoutRecipesNestedInput
    ingredients?: RecipeIngredientUpdateManyWithoutRecipeNestedInput
    saves?: SavedRecipeUpdateManyWithoutRecipeNestedInput
    reviews?: RecipeReviewUpdateManyWithoutRecipeNestedInput
    madeRecipes?: MadeRecipeUpdateManyWithoutRecipeNestedInput
    mealPlanItems?: MealPlanItemUpdateManyWithoutRecipeNestedInput
    foodImages?: FoodImageUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: JsonNullValueInput | InputJsonValue
    prepTime?: NullableIntFieldUpdateOperationsInput | number | null
    cookTime?: NullableIntFieldUpdateOperationsInput | number | null
    servings?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    cuisine?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeUpdateimagesInput | string[]
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    aiTags?: RecipeUpdateaiTagsInput | string[]
    userTags?: RecipeUpdateuserTagsInput | string[]
    allTags?: RecipeUpdateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: IntFieldUpdateOperationsInput | number
    savesCount?: IntFieldUpdateOperationsInput | number
    madeCount?: IntFieldUpdateOperationsInput | number
    viewsCount?: IntFieldUpdateOperationsInput | number
    avgRating?: FloatFieldUpdateOperationsInput | number
    reviewsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    authorId?: StringFieldUpdateOperationsInput | string
    ingredients?: RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInput
    saves?: SavedRecipeUncheckedUpdateManyWithoutRecipeNestedInput
    reviews?: RecipeReviewUncheckedUpdateManyWithoutRecipeNestedInput
    madeRecipes?: MadeRecipeUncheckedUpdateManyWithoutRecipeNestedInput
    mealPlanItems?: MealPlanItemUncheckedUpdateManyWithoutRecipeNestedInput
    foodImages?: FoodImageUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type UserUpsertWithoutRecipeLikesInput = {
    update: XOR<UserUpdateWithoutRecipeLikesInput, UserUncheckedUpdateWithoutRecipeLikesInput>
    create: XOR<UserCreateWithoutRecipeLikesInput, UserUncheckedCreateWithoutRecipeLikesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRecipeLikesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRecipeLikesInput, UserUncheckedUpdateWithoutRecipeLikesInput>
  }

  export type UserUpdateWithoutRecipeLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    recipes?: RecipeUpdateManyWithoutAuthorNestedInput
    savedRecipes?: SavedRecipeUpdateManyWithoutUserNestedInput
    recipeReviews?: RecipeReviewUpdateManyWithoutUserNestedInput
    madeRecipes?: MadeRecipeUpdateManyWithoutUserNestedInput
    mealPlans?: MealPlanUpdateManyWithoutUserNestedInput
    foodImages?: FoodImageUpdateManyWithoutUserNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRecipeLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutAuthorNestedInput
    savedRecipes?: SavedRecipeUncheckedUpdateManyWithoutUserNestedInput
    recipeReviews?: RecipeReviewUncheckedUpdateManyWithoutUserNestedInput
    madeRecipes?: MadeRecipeUncheckedUpdateManyWithoutUserNestedInput
    mealPlans?: MealPlanUncheckedUpdateManyWithoutUserNestedInput
    foodImages?: FoodImageUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RecipeCreateWithoutSavesInput = {
    id?: string
    title: string
    description?: string | null
    instructions: JsonNullValueInput | InputJsonValue
    prepTime?: number | null
    cookTime?: number | null
    servings?: number | null
    difficulty?: string | null
    cuisine?: string | null
    category?: string | null
    images?: RecipeCreateimagesInput | string[]
    mainImage?: string | null
    aiTags?: RecipeCreateaiTagsInput | string[]
    userTags?: RecipeCreateuserTagsInput | string[]
    allTags?: RecipeCreateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: number
    savesCount?: number
    madeCount?: number
    viewsCount?: number
    avgRating?: number
    reviewsCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    publishedAt?: Date | string | null
    isPublished?: boolean
    author: UserCreateNestedOneWithoutRecipesInput
    ingredients?: RecipeIngredientCreateNestedManyWithoutRecipeInput
    likes?: RecipeLikeCreateNestedManyWithoutRecipeInput
    reviews?: RecipeReviewCreateNestedManyWithoutRecipeInput
    madeRecipes?: MadeRecipeCreateNestedManyWithoutRecipeInput
    mealPlanItems?: MealPlanItemCreateNestedManyWithoutRecipeInput
    foodImages?: FoodImageCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUncheckedCreateWithoutSavesInput = {
    id?: string
    title: string
    description?: string | null
    instructions: JsonNullValueInput | InputJsonValue
    prepTime?: number | null
    cookTime?: number | null
    servings?: number | null
    difficulty?: string | null
    cuisine?: string | null
    category?: string | null
    images?: RecipeCreateimagesInput | string[]
    mainImage?: string | null
    aiTags?: RecipeCreateaiTagsInput | string[]
    userTags?: RecipeCreateuserTagsInput | string[]
    allTags?: RecipeCreateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: number
    savesCount?: number
    madeCount?: number
    viewsCount?: number
    avgRating?: number
    reviewsCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    publishedAt?: Date | string | null
    isPublished?: boolean
    authorId: string
    ingredients?: RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInput
    likes?: RecipeLikeUncheckedCreateNestedManyWithoutRecipeInput
    reviews?: RecipeReviewUncheckedCreateNestedManyWithoutRecipeInput
    madeRecipes?: MadeRecipeUncheckedCreateNestedManyWithoutRecipeInput
    mealPlanItems?: MealPlanItemUncheckedCreateNestedManyWithoutRecipeInput
    foodImages?: FoodImageUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type RecipeCreateOrConnectWithoutSavesInput = {
    where: RecipeWhereUniqueInput
    create: XOR<RecipeCreateWithoutSavesInput, RecipeUncheckedCreateWithoutSavesInput>
  }

  export type UserCreateWithoutSavedRecipesInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    bio?: string | null
    avatar?: string | null
    verified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    password?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    recipes?: RecipeCreateNestedManyWithoutAuthorInput
    recipeLikes?: RecipeLikeCreateNestedManyWithoutUserInput
    recipeReviews?: RecipeReviewCreateNestedManyWithoutUserInput
    madeRecipes?: MadeRecipeCreateNestedManyWithoutUserInput
    mealPlans?: MealPlanCreateNestedManyWithoutUserInput
    foodImages?: FoodImageCreateNestedManyWithoutUserInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSavedRecipesInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    bio?: string | null
    avatar?: string | null
    verified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    password?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutAuthorInput
    recipeLikes?: RecipeLikeUncheckedCreateNestedManyWithoutUserInput
    recipeReviews?: RecipeReviewUncheckedCreateNestedManyWithoutUserInput
    madeRecipes?: MadeRecipeUncheckedCreateNestedManyWithoutUserInput
    mealPlans?: MealPlanUncheckedCreateNestedManyWithoutUserInput
    foodImages?: FoodImageUncheckedCreateNestedManyWithoutUserInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSavedRecipesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSavedRecipesInput, UserUncheckedCreateWithoutSavedRecipesInput>
  }

  export type RecipeUpsertWithoutSavesInput = {
    update: XOR<RecipeUpdateWithoutSavesInput, RecipeUncheckedUpdateWithoutSavesInput>
    create: XOR<RecipeCreateWithoutSavesInput, RecipeUncheckedCreateWithoutSavesInput>
    where?: RecipeWhereInput
  }

  export type RecipeUpdateToOneWithWhereWithoutSavesInput = {
    where?: RecipeWhereInput
    data: XOR<RecipeUpdateWithoutSavesInput, RecipeUncheckedUpdateWithoutSavesInput>
  }

  export type RecipeUpdateWithoutSavesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: JsonNullValueInput | InputJsonValue
    prepTime?: NullableIntFieldUpdateOperationsInput | number | null
    cookTime?: NullableIntFieldUpdateOperationsInput | number | null
    servings?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    cuisine?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeUpdateimagesInput | string[]
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    aiTags?: RecipeUpdateaiTagsInput | string[]
    userTags?: RecipeUpdateuserTagsInput | string[]
    allTags?: RecipeUpdateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: IntFieldUpdateOperationsInput | number
    savesCount?: IntFieldUpdateOperationsInput | number
    madeCount?: IntFieldUpdateOperationsInput | number
    viewsCount?: IntFieldUpdateOperationsInput | number
    avgRating?: FloatFieldUpdateOperationsInput | number
    reviewsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    author?: UserUpdateOneRequiredWithoutRecipesNestedInput
    ingredients?: RecipeIngredientUpdateManyWithoutRecipeNestedInput
    likes?: RecipeLikeUpdateManyWithoutRecipeNestedInput
    reviews?: RecipeReviewUpdateManyWithoutRecipeNestedInput
    madeRecipes?: MadeRecipeUpdateManyWithoutRecipeNestedInput
    mealPlanItems?: MealPlanItemUpdateManyWithoutRecipeNestedInput
    foodImages?: FoodImageUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateWithoutSavesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: JsonNullValueInput | InputJsonValue
    prepTime?: NullableIntFieldUpdateOperationsInput | number | null
    cookTime?: NullableIntFieldUpdateOperationsInput | number | null
    servings?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    cuisine?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeUpdateimagesInput | string[]
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    aiTags?: RecipeUpdateaiTagsInput | string[]
    userTags?: RecipeUpdateuserTagsInput | string[]
    allTags?: RecipeUpdateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: IntFieldUpdateOperationsInput | number
    savesCount?: IntFieldUpdateOperationsInput | number
    madeCount?: IntFieldUpdateOperationsInput | number
    viewsCount?: IntFieldUpdateOperationsInput | number
    avgRating?: FloatFieldUpdateOperationsInput | number
    reviewsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    authorId?: StringFieldUpdateOperationsInput | string
    ingredients?: RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInput
    likes?: RecipeLikeUncheckedUpdateManyWithoutRecipeNestedInput
    reviews?: RecipeReviewUncheckedUpdateManyWithoutRecipeNestedInput
    madeRecipes?: MadeRecipeUncheckedUpdateManyWithoutRecipeNestedInput
    mealPlanItems?: MealPlanItemUncheckedUpdateManyWithoutRecipeNestedInput
    foodImages?: FoodImageUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type UserUpsertWithoutSavedRecipesInput = {
    update: XOR<UserUpdateWithoutSavedRecipesInput, UserUncheckedUpdateWithoutSavedRecipesInput>
    create: XOR<UserCreateWithoutSavedRecipesInput, UserUncheckedCreateWithoutSavedRecipesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSavedRecipesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSavedRecipesInput, UserUncheckedUpdateWithoutSavedRecipesInput>
  }

  export type UserUpdateWithoutSavedRecipesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    recipes?: RecipeUpdateManyWithoutAuthorNestedInput
    recipeLikes?: RecipeLikeUpdateManyWithoutUserNestedInput
    recipeReviews?: RecipeReviewUpdateManyWithoutUserNestedInput
    madeRecipes?: MadeRecipeUpdateManyWithoutUserNestedInput
    mealPlans?: MealPlanUpdateManyWithoutUserNestedInput
    foodImages?: FoodImageUpdateManyWithoutUserNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSavedRecipesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutAuthorNestedInput
    recipeLikes?: RecipeLikeUncheckedUpdateManyWithoutUserNestedInput
    recipeReviews?: RecipeReviewUncheckedUpdateManyWithoutUserNestedInput
    madeRecipes?: MadeRecipeUncheckedUpdateManyWithoutUserNestedInput
    mealPlans?: MealPlanUncheckedUpdateManyWithoutUserNestedInput
    foodImages?: FoodImageUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RecipeCreateWithoutReviewsInput = {
    id?: string
    title: string
    description?: string | null
    instructions: JsonNullValueInput | InputJsonValue
    prepTime?: number | null
    cookTime?: number | null
    servings?: number | null
    difficulty?: string | null
    cuisine?: string | null
    category?: string | null
    images?: RecipeCreateimagesInput | string[]
    mainImage?: string | null
    aiTags?: RecipeCreateaiTagsInput | string[]
    userTags?: RecipeCreateuserTagsInput | string[]
    allTags?: RecipeCreateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: number
    savesCount?: number
    madeCount?: number
    viewsCount?: number
    avgRating?: number
    reviewsCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    publishedAt?: Date | string | null
    isPublished?: boolean
    author: UserCreateNestedOneWithoutRecipesInput
    ingredients?: RecipeIngredientCreateNestedManyWithoutRecipeInput
    likes?: RecipeLikeCreateNestedManyWithoutRecipeInput
    saves?: SavedRecipeCreateNestedManyWithoutRecipeInput
    madeRecipes?: MadeRecipeCreateNestedManyWithoutRecipeInput
    mealPlanItems?: MealPlanItemCreateNestedManyWithoutRecipeInput
    foodImages?: FoodImageCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUncheckedCreateWithoutReviewsInput = {
    id?: string
    title: string
    description?: string | null
    instructions: JsonNullValueInput | InputJsonValue
    prepTime?: number | null
    cookTime?: number | null
    servings?: number | null
    difficulty?: string | null
    cuisine?: string | null
    category?: string | null
    images?: RecipeCreateimagesInput | string[]
    mainImage?: string | null
    aiTags?: RecipeCreateaiTagsInput | string[]
    userTags?: RecipeCreateuserTagsInput | string[]
    allTags?: RecipeCreateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: number
    savesCount?: number
    madeCount?: number
    viewsCount?: number
    avgRating?: number
    reviewsCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    publishedAt?: Date | string | null
    isPublished?: boolean
    authorId: string
    ingredients?: RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInput
    likes?: RecipeLikeUncheckedCreateNestedManyWithoutRecipeInput
    saves?: SavedRecipeUncheckedCreateNestedManyWithoutRecipeInput
    madeRecipes?: MadeRecipeUncheckedCreateNestedManyWithoutRecipeInput
    mealPlanItems?: MealPlanItemUncheckedCreateNestedManyWithoutRecipeInput
    foodImages?: FoodImageUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type RecipeCreateOrConnectWithoutReviewsInput = {
    where: RecipeWhereUniqueInput
    create: XOR<RecipeCreateWithoutReviewsInput, RecipeUncheckedCreateWithoutReviewsInput>
  }

  export type UserCreateWithoutRecipeReviewsInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    bio?: string | null
    avatar?: string | null
    verified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    password?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    recipes?: RecipeCreateNestedManyWithoutAuthorInput
    savedRecipes?: SavedRecipeCreateNestedManyWithoutUserInput
    recipeLikes?: RecipeLikeCreateNestedManyWithoutUserInput
    madeRecipes?: MadeRecipeCreateNestedManyWithoutUserInput
    mealPlans?: MealPlanCreateNestedManyWithoutUserInput
    foodImages?: FoodImageCreateNestedManyWithoutUserInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRecipeReviewsInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    bio?: string | null
    avatar?: string | null
    verified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    password?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutAuthorInput
    savedRecipes?: SavedRecipeUncheckedCreateNestedManyWithoutUserInput
    recipeLikes?: RecipeLikeUncheckedCreateNestedManyWithoutUserInput
    madeRecipes?: MadeRecipeUncheckedCreateNestedManyWithoutUserInput
    mealPlans?: MealPlanUncheckedCreateNestedManyWithoutUserInput
    foodImages?: FoodImageUncheckedCreateNestedManyWithoutUserInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRecipeReviewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRecipeReviewsInput, UserUncheckedCreateWithoutRecipeReviewsInput>
  }

  export type RecipeUpsertWithoutReviewsInput = {
    update: XOR<RecipeUpdateWithoutReviewsInput, RecipeUncheckedUpdateWithoutReviewsInput>
    create: XOR<RecipeCreateWithoutReviewsInput, RecipeUncheckedCreateWithoutReviewsInput>
    where?: RecipeWhereInput
  }

  export type RecipeUpdateToOneWithWhereWithoutReviewsInput = {
    where?: RecipeWhereInput
    data: XOR<RecipeUpdateWithoutReviewsInput, RecipeUncheckedUpdateWithoutReviewsInput>
  }

  export type RecipeUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: JsonNullValueInput | InputJsonValue
    prepTime?: NullableIntFieldUpdateOperationsInput | number | null
    cookTime?: NullableIntFieldUpdateOperationsInput | number | null
    servings?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    cuisine?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeUpdateimagesInput | string[]
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    aiTags?: RecipeUpdateaiTagsInput | string[]
    userTags?: RecipeUpdateuserTagsInput | string[]
    allTags?: RecipeUpdateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: IntFieldUpdateOperationsInput | number
    savesCount?: IntFieldUpdateOperationsInput | number
    madeCount?: IntFieldUpdateOperationsInput | number
    viewsCount?: IntFieldUpdateOperationsInput | number
    avgRating?: FloatFieldUpdateOperationsInput | number
    reviewsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    author?: UserUpdateOneRequiredWithoutRecipesNestedInput
    ingredients?: RecipeIngredientUpdateManyWithoutRecipeNestedInput
    likes?: RecipeLikeUpdateManyWithoutRecipeNestedInput
    saves?: SavedRecipeUpdateManyWithoutRecipeNestedInput
    madeRecipes?: MadeRecipeUpdateManyWithoutRecipeNestedInput
    mealPlanItems?: MealPlanItemUpdateManyWithoutRecipeNestedInput
    foodImages?: FoodImageUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: JsonNullValueInput | InputJsonValue
    prepTime?: NullableIntFieldUpdateOperationsInput | number | null
    cookTime?: NullableIntFieldUpdateOperationsInput | number | null
    servings?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    cuisine?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeUpdateimagesInput | string[]
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    aiTags?: RecipeUpdateaiTagsInput | string[]
    userTags?: RecipeUpdateuserTagsInput | string[]
    allTags?: RecipeUpdateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: IntFieldUpdateOperationsInput | number
    savesCount?: IntFieldUpdateOperationsInput | number
    madeCount?: IntFieldUpdateOperationsInput | number
    viewsCount?: IntFieldUpdateOperationsInput | number
    avgRating?: FloatFieldUpdateOperationsInput | number
    reviewsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    authorId?: StringFieldUpdateOperationsInput | string
    ingredients?: RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInput
    likes?: RecipeLikeUncheckedUpdateManyWithoutRecipeNestedInput
    saves?: SavedRecipeUncheckedUpdateManyWithoutRecipeNestedInput
    madeRecipes?: MadeRecipeUncheckedUpdateManyWithoutRecipeNestedInput
    mealPlanItems?: MealPlanItemUncheckedUpdateManyWithoutRecipeNestedInput
    foodImages?: FoodImageUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type UserUpsertWithoutRecipeReviewsInput = {
    update: XOR<UserUpdateWithoutRecipeReviewsInput, UserUncheckedUpdateWithoutRecipeReviewsInput>
    create: XOR<UserCreateWithoutRecipeReviewsInput, UserUncheckedCreateWithoutRecipeReviewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRecipeReviewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRecipeReviewsInput, UserUncheckedUpdateWithoutRecipeReviewsInput>
  }

  export type UserUpdateWithoutRecipeReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    recipes?: RecipeUpdateManyWithoutAuthorNestedInput
    savedRecipes?: SavedRecipeUpdateManyWithoutUserNestedInput
    recipeLikes?: RecipeLikeUpdateManyWithoutUserNestedInput
    madeRecipes?: MadeRecipeUpdateManyWithoutUserNestedInput
    mealPlans?: MealPlanUpdateManyWithoutUserNestedInput
    foodImages?: FoodImageUpdateManyWithoutUserNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRecipeReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutAuthorNestedInput
    savedRecipes?: SavedRecipeUncheckedUpdateManyWithoutUserNestedInput
    recipeLikes?: RecipeLikeUncheckedUpdateManyWithoutUserNestedInput
    madeRecipes?: MadeRecipeUncheckedUpdateManyWithoutUserNestedInput
    mealPlans?: MealPlanUncheckedUpdateManyWithoutUserNestedInput
    foodImages?: FoodImageUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RecipeCreateWithoutMadeRecipesInput = {
    id?: string
    title: string
    description?: string | null
    instructions: JsonNullValueInput | InputJsonValue
    prepTime?: number | null
    cookTime?: number | null
    servings?: number | null
    difficulty?: string | null
    cuisine?: string | null
    category?: string | null
    images?: RecipeCreateimagesInput | string[]
    mainImage?: string | null
    aiTags?: RecipeCreateaiTagsInput | string[]
    userTags?: RecipeCreateuserTagsInput | string[]
    allTags?: RecipeCreateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: number
    savesCount?: number
    madeCount?: number
    viewsCount?: number
    avgRating?: number
    reviewsCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    publishedAt?: Date | string | null
    isPublished?: boolean
    author: UserCreateNestedOneWithoutRecipesInput
    ingredients?: RecipeIngredientCreateNestedManyWithoutRecipeInput
    likes?: RecipeLikeCreateNestedManyWithoutRecipeInput
    saves?: SavedRecipeCreateNestedManyWithoutRecipeInput
    reviews?: RecipeReviewCreateNestedManyWithoutRecipeInput
    mealPlanItems?: MealPlanItemCreateNestedManyWithoutRecipeInput
    foodImages?: FoodImageCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUncheckedCreateWithoutMadeRecipesInput = {
    id?: string
    title: string
    description?: string | null
    instructions: JsonNullValueInput | InputJsonValue
    prepTime?: number | null
    cookTime?: number | null
    servings?: number | null
    difficulty?: string | null
    cuisine?: string | null
    category?: string | null
    images?: RecipeCreateimagesInput | string[]
    mainImage?: string | null
    aiTags?: RecipeCreateaiTagsInput | string[]
    userTags?: RecipeCreateuserTagsInput | string[]
    allTags?: RecipeCreateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: number
    savesCount?: number
    madeCount?: number
    viewsCount?: number
    avgRating?: number
    reviewsCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    publishedAt?: Date | string | null
    isPublished?: boolean
    authorId: string
    ingredients?: RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInput
    likes?: RecipeLikeUncheckedCreateNestedManyWithoutRecipeInput
    saves?: SavedRecipeUncheckedCreateNestedManyWithoutRecipeInput
    reviews?: RecipeReviewUncheckedCreateNestedManyWithoutRecipeInput
    mealPlanItems?: MealPlanItemUncheckedCreateNestedManyWithoutRecipeInput
    foodImages?: FoodImageUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type RecipeCreateOrConnectWithoutMadeRecipesInput = {
    where: RecipeWhereUniqueInput
    create: XOR<RecipeCreateWithoutMadeRecipesInput, RecipeUncheckedCreateWithoutMadeRecipesInput>
  }

  export type UserCreateWithoutMadeRecipesInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    bio?: string | null
    avatar?: string | null
    verified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    password?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    recipes?: RecipeCreateNestedManyWithoutAuthorInput
    savedRecipes?: SavedRecipeCreateNestedManyWithoutUserInput
    recipeLikes?: RecipeLikeCreateNestedManyWithoutUserInput
    recipeReviews?: RecipeReviewCreateNestedManyWithoutUserInput
    mealPlans?: MealPlanCreateNestedManyWithoutUserInput
    foodImages?: FoodImageCreateNestedManyWithoutUserInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMadeRecipesInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    bio?: string | null
    avatar?: string | null
    verified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    password?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutAuthorInput
    savedRecipes?: SavedRecipeUncheckedCreateNestedManyWithoutUserInput
    recipeLikes?: RecipeLikeUncheckedCreateNestedManyWithoutUserInput
    recipeReviews?: RecipeReviewUncheckedCreateNestedManyWithoutUserInput
    mealPlans?: MealPlanUncheckedCreateNestedManyWithoutUserInput
    foodImages?: FoodImageUncheckedCreateNestedManyWithoutUserInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMadeRecipesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMadeRecipesInput, UserUncheckedCreateWithoutMadeRecipesInput>
  }

  export type RecipeUpsertWithoutMadeRecipesInput = {
    update: XOR<RecipeUpdateWithoutMadeRecipesInput, RecipeUncheckedUpdateWithoutMadeRecipesInput>
    create: XOR<RecipeCreateWithoutMadeRecipesInput, RecipeUncheckedCreateWithoutMadeRecipesInput>
    where?: RecipeWhereInput
  }

  export type RecipeUpdateToOneWithWhereWithoutMadeRecipesInput = {
    where?: RecipeWhereInput
    data: XOR<RecipeUpdateWithoutMadeRecipesInput, RecipeUncheckedUpdateWithoutMadeRecipesInput>
  }

  export type RecipeUpdateWithoutMadeRecipesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: JsonNullValueInput | InputJsonValue
    prepTime?: NullableIntFieldUpdateOperationsInput | number | null
    cookTime?: NullableIntFieldUpdateOperationsInput | number | null
    servings?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    cuisine?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeUpdateimagesInput | string[]
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    aiTags?: RecipeUpdateaiTagsInput | string[]
    userTags?: RecipeUpdateuserTagsInput | string[]
    allTags?: RecipeUpdateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: IntFieldUpdateOperationsInput | number
    savesCount?: IntFieldUpdateOperationsInput | number
    madeCount?: IntFieldUpdateOperationsInput | number
    viewsCount?: IntFieldUpdateOperationsInput | number
    avgRating?: FloatFieldUpdateOperationsInput | number
    reviewsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    author?: UserUpdateOneRequiredWithoutRecipesNestedInput
    ingredients?: RecipeIngredientUpdateManyWithoutRecipeNestedInput
    likes?: RecipeLikeUpdateManyWithoutRecipeNestedInput
    saves?: SavedRecipeUpdateManyWithoutRecipeNestedInput
    reviews?: RecipeReviewUpdateManyWithoutRecipeNestedInput
    mealPlanItems?: MealPlanItemUpdateManyWithoutRecipeNestedInput
    foodImages?: FoodImageUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateWithoutMadeRecipesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: JsonNullValueInput | InputJsonValue
    prepTime?: NullableIntFieldUpdateOperationsInput | number | null
    cookTime?: NullableIntFieldUpdateOperationsInput | number | null
    servings?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    cuisine?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeUpdateimagesInput | string[]
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    aiTags?: RecipeUpdateaiTagsInput | string[]
    userTags?: RecipeUpdateuserTagsInput | string[]
    allTags?: RecipeUpdateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: IntFieldUpdateOperationsInput | number
    savesCount?: IntFieldUpdateOperationsInput | number
    madeCount?: IntFieldUpdateOperationsInput | number
    viewsCount?: IntFieldUpdateOperationsInput | number
    avgRating?: FloatFieldUpdateOperationsInput | number
    reviewsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    authorId?: StringFieldUpdateOperationsInput | string
    ingredients?: RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInput
    likes?: RecipeLikeUncheckedUpdateManyWithoutRecipeNestedInput
    saves?: SavedRecipeUncheckedUpdateManyWithoutRecipeNestedInput
    reviews?: RecipeReviewUncheckedUpdateManyWithoutRecipeNestedInput
    mealPlanItems?: MealPlanItemUncheckedUpdateManyWithoutRecipeNestedInput
    foodImages?: FoodImageUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type UserUpsertWithoutMadeRecipesInput = {
    update: XOR<UserUpdateWithoutMadeRecipesInput, UserUncheckedUpdateWithoutMadeRecipesInput>
    create: XOR<UserCreateWithoutMadeRecipesInput, UserUncheckedCreateWithoutMadeRecipesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMadeRecipesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMadeRecipesInput, UserUncheckedUpdateWithoutMadeRecipesInput>
  }

  export type UserUpdateWithoutMadeRecipesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    recipes?: RecipeUpdateManyWithoutAuthorNestedInput
    savedRecipes?: SavedRecipeUpdateManyWithoutUserNestedInput
    recipeLikes?: RecipeLikeUpdateManyWithoutUserNestedInput
    recipeReviews?: RecipeReviewUpdateManyWithoutUserNestedInput
    mealPlans?: MealPlanUpdateManyWithoutUserNestedInput
    foodImages?: FoodImageUpdateManyWithoutUserNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMadeRecipesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutAuthorNestedInput
    savedRecipes?: SavedRecipeUncheckedUpdateManyWithoutUserNestedInput
    recipeLikes?: RecipeLikeUncheckedUpdateManyWithoutUserNestedInput
    recipeReviews?: RecipeReviewUncheckedUpdateManyWithoutUserNestedInput
    mealPlans?: MealPlanUncheckedUpdateManyWithoutUserNestedInput
    foodImages?: FoodImageUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutFollowingInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    bio?: string | null
    avatar?: string | null
    verified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    password?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    recipes?: RecipeCreateNestedManyWithoutAuthorInput
    savedRecipes?: SavedRecipeCreateNestedManyWithoutUserInput
    recipeLikes?: RecipeLikeCreateNestedManyWithoutUserInput
    recipeReviews?: RecipeReviewCreateNestedManyWithoutUserInput
    madeRecipes?: MadeRecipeCreateNestedManyWithoutUserInput
    mealPlans?: MealPlanCreateNestedManyWithoutUserInput
    foodImages?: FoodImageCreateNestedManyWithoutUserInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFollowingInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    bio?: string | null
    avatar?: string | null
    verified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    password?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutAuthorInput
    savedRecipes?: SavedRecipeUncheckedCreateNestedManyWithoutUserInput
    recipeLikes?: RecipeLikeUncheckedCreateNestedManyWithoutUserInput
    recipeReviews?: RecipeReviewUncheckedCreateNestedManyWithoutUserInput
    madeRecipes?: MadeRecipeUncheckedCreateNestedManyWithoutUserInput
    mealPlans?: MealPlanUncheckedCreateNestedManyWithoutUserInput
    foodImages?: FoodImageUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFollowingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
  }

  export type UserCreateWithoutFollowersInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    bio?: string | null
    avatar?: string | null
    verified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    password?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    recipes?: RecipeCreateNestedManyWithoutAuthorInput
    savedRecipes?: SavedRecipeCreateNestedManyWithoutUserInput
    recipeLikes?: RecipeLikeCreateNestedManyWithoutUserInput
    recipeReviews?: RecipeReviewCreateNestedManyWithoutUserInput
    madeRecipes?: MadeRecipeCreateNestedManyWithoutUserInput
    mealPlans?: MealPlanCreateNestedManyWithoutUserInput
    foodImages?: FoodImageCreateNestedManyWithoutUserInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFollowersInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    bio?: string | null
    avatar?: string | null
    verified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    password?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutAuthorInput
    savedRecipes?: SavedRecipeUncheckedCreateNestedManyWithoutUserInput
    recipeLikes?: RecipeLikeUncheckedCreateNestedManyWithoutUserInput
    recipeReviews?: RecipeReviewUncheckedCreateNestedManyWithoutUserInput
    madeRecipes?: MadeRecipeUncheckedCreateNestedManyWithoutUserInput
    mealPlans?: MealPlanUncheckedCreateNestedManyWithoutUserInput
    foodImages?: FoodImageUncheckedCreateNestedManyWithoutUserInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFollowersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>
  }

  export type UserUpsertWithoutFollowingInput = {
    update: XOR<UserUpdateWithoutFollowingInput, UserUncheckedUpdateWithoutFollowingInput>
    create: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFollowingInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFollowingInput, UserUncheckedUpdateWithoutFollowingInput>
  }

  export type UserUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    recipes?: RecipeUpdateManyWithoutAuthorNestedInput
    savedRecipes?: SavedRecipeUpdateManyWithoutUserNestedInput
    recipeLikes?: RecipeLikeUpdateManyWithoutUserNestedInput
    recipeReviews?: RecipeReviewUpdateManyWithoutUserNestedInput
    madeRecipes?: MadeRecipeUpdateManyWithoutUserNestedInput
    mealPlans?: MealPlanUpdateManyWithoutUserNestedInput
    foodImages?: FoodImageUpdateManyWithoutUserNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutAuthorNestedInput
    savedRecipes?: SavedRecipeUncheckedUpdateManyWithoutUserNestedInput
    recipeLikes?: RecipeLikeUncheckedUpdateManyWithoutUserNestedInput
    recipeReviews?: RecipeReviewUncheckedUpdateManyWithoutUserNestedInput
    madeRecipes?: MadeRecipeUncheckedUpdateManyWithoutUserNestedInput
    mealPlans?: MealPlanUncheckedUpdateManyWithoutUserNestedInput
    foodImages?: FoodImageUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutFollowersInput = {
    update: XOR<UserUpdateWithoutFollowersInput, UserUncheckedUpdateWithoutFollowersInput>
    create: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFollowersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFollowersInput, UserUncheckedUpdateWithoutFollowersInput>
  }

  export type UserUpdateWithoutFollowersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    recipes?: RecipeUpdateManyWithoutAuthorNestedInput
    savedRecipes?: SavedRecipeUpdateManyWithoutUserNestedInput
    recipeLikes?: RecipeLikeUpdateManyWithoutUserNestedInput
    recipeReviews?: RecipeReviewUpdateManyWithoutUserNestedInput
    madeRecipes?: MadeRecipeUpdateManyWithoutUserNestedInput
    mealPlans?: MealPlanUpdateManyWithoutUserNestedInput
    foodImages?: FoodImageUpdateManyWithoutUserNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFollowersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutAuthorNestedInput
    savedRecipes?: SavedRecipeUncheckedUpdateManyWithoutUserNestedInput
    recipeLikes?: RecipeLikeUncheckedUpdateManyWithoutUserNestedInput
    recipeReviews?: RecipeReviewUncheckedUpdateManyWithoutUserNestedInput
    madeRecipes?: MadeRecipeUncheckedUpdateManyWithoutUserNestedInput
    mealPlans?: MealPlanUncheckedUpdateManyWithoutUserNestedInput
    foodImages?: FoodImageUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutMealPlansInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    bio?: string | null
    avatar?: string | null
    verified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    password?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    recipes?: RecipeCreateNestedManyWithoutAuthorInput
    savedRecipes?: SavedRecipeCreateNestedManyWithoutUserInput
    recipeLikes?: RecipeLikeCreateNestedManyWithoutUserInput
    recipeReviews?: RecipeReviewCreateNestedManyWithoutUserInput
    madeRecipes?: MadeRecipeCreateNestedManyWithoutUserInput
    foodImages?: FoodImageCreateNestedManyWithoutUserInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMealPlansInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    bio?: string | null
    avatar?: string | null
    verified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    password?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutAuthorInput
    savedRecipes?: SavedRecipeUncheckedCreateNestedManyWithoutUserInput
    recipeLikes?: RecipeLikeUncheckedCreateNestedManyWithoutUserInput
    recipeReviews?: RecipeReviewUncheckedCreateNestedManyWithoutUserInput
    madeRecipes?: MadeRecipeUncheckedCreateNestedManyWithoutUserInput
    foodImages?: FoodImageUncheckedCreateNestedManyWithoutUserInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMealPlansInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMealPlansInput, UserUncheckedCreateWithoutMealPlansInput>
  }

  export type MealPlanItemCreateWithoutMealPlanInput = {
    id?: string
    date: Date | string
    mealType: string
    servings?: number
    recipe: RecipeCreateNestedOneWithoutMealPlanItemsInput
  }

  export type MealPlanItemUncheckedCreateWithoutMealPlanInput = {
    id?: string
    recipeId: string
    date: Date | string
    mealType: string
    servings?: number
  }

  export type MealPlanItemCreateOrConnectWithoutMealPlanInput = {
    where: MealPlanItemWhereUniqueInput
    create: XOR<MealPlanItemCreateWithoutMealPlanInput, MealPlanItemUncheckedCreateWithoutMealPlanInput>
  }

  export type MealPlanItemCreateManyMealPlanInputEnvelope = {
    data: MealPlanItemCreateManyMealPlanInput | MealPlanItemCreateManyMealPlanInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutMealPlansInput = {
    update: XOR<UserUpdateWithoutMealPlansInput, UserUncheckedUpdateWithoutMealPlansInput>
    create: XOR<UserCreateWithoutMealPlansInput, UserUncheckedCreateWithoutMealPlansInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMealPlansInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMealPlansInput, UserUncheckedUpdateWithoutMealPlansInput>
  }

  export type UserUpdateWithoutMealPlansInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    recipes?: RecipeUpdateManyWithoutAuthorNestedInput
    savedRecipes?: SavedRecipeUpdateManyWithoutUserNestedInput
    recipeLikes?: RecipeLikeUpdateManyWithoutUserNestedInput
    recipeReviews?: RecipeReviewUpdateManyWithoutUserNestedInput
    madeRecipes?: MadeRecipeUpdateManyWithoutUserNestedInput
    foodImages?: FoodImageUpdateManyWithoutUserNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    shoppingLists?: ShoppingListUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMealPlansInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutAuthorNestedInput
    savedRecipes?: SavedRecipeUncheckedUpdateManyWithoutUserNestedInput
    recipeLikes?: RecipeLikeUncheckedUpdateManyWithoutUserNestedInput
    recipeReviews?: RecipeReviewUncheckedUpdateManyWithoutUserNestedInput
    madeRecipes?: MadeRecipeUncheckedUpdateManyWithoutUserNestedInput
    foodImages?: FoodImageUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MealPlanItemUpsertWithWhereUniqueWithoutMealPlanInput = {
    where: MealPlanItemWhereUniqueInput
    update: XOR<MealPlanItemUpdateWithoutMealPlanInput, MealPlanItemUncheckedUpdateWithoutMealPlanInput>
    create: XOR<MealPlanItemCreateWithoutMealPlanInput, MealPlanItemUncheckedCreateWithoutMealPlanInput>
  }

  export type MealPlanItemUpdateWithWhereUniqueWithoutMealPlanInput = {
    where: MealPlanItemWhereUniqueInput
    data: XOR<MealPlanItemUpdateWithoutMealPlanInput, MealPlanItemUncheckedUpdateWithoutMealPlanInput>
  }

  export type MealPlanItemUpdateManyWithWhereWithoutMealPlanInput = {
    where: MealPlanItemScalarWhereInput
    data: XOR<MealPlanItemUpdateManyMutationInput, MealPlanItemUncheckedUpdateManyWithoutMealPlanInput>
  }

  export type MealPlanCreateWithoutItemsInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMealPlansInput
  }

  export type MealPlanUncheckedCreateWithoutItemsInput = {
    id?: string
    userId: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MealPlanCreateOrConnectWithoutItemsInput = {
    where: MealPlanWhereUniqueInput
    create: XOR<MealPlanCreateWithoutItemsInput, MealPlanUncheckedCreateWithoutItemsInput>
  }

  export type RecipeCreateWithoutMealPlanItemsInput = {
    id?: string
    title: string
    description?: string | null
    instructions: JsonNullValueInput | InputJsonValue
    prepTime?: number | null
    cookTime?: number | null
    servings?: number | null
    difficulty?: string | null
    cuisine?: string | null
    category?: string | null
    images?: RecipeCreateimagesInput | string[]
    mainImage?: string | null
    aiTags?: RecipeCreateaiTagsInput | string[]
    userTags?: RecipeCreateuserTagsInput | string[]
    allTags?: RecipeCreateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: number
    savesCount?: number
    madeCount?: number
    viewsCount?: number
    avgRating?: number
    reviewsCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    publishedAt?: Date | string | null
    isPublished?: boolean
    author: UserCreateNestedOneWithoutRecipesInput
    ingredients?: RecipeIngredientCreateNestedManyWithoutRecipeInput
    likes?: RecipeLikeCreateNestedManyWithoutRecipeInput
    saves?: SavedRecipeCreateNestedManyWithoutRecipeInput
    reviews?: RecipeReviewCreateNestedManyWithoutRecipeInput
    madeRecipes?: MadeRecipeCreateNestedManyWithoutRecipeInput
    foodImages?: FoodImageCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUncheckedCreateWithoutMealPlanItemsInput = {
    id?: string
    title: string
    description?: string | null
    instructions: JsonNullValueInput | InputJsonValue
    prepTime?: number | null
    cookTime?: number | null
    servings?: number | null
    difficulty?: string | null
    cuisine?: string | null
    category?: string | null
    images?: RecipeCreateimagesInput | string[]
    mainImage?: string | null
    aiTags?: RecipeCreateaiTagsInput | string[]
    userTags?: RecipeCreateuserTagsInput | string[]
    allTags?: RecipeCreateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: number
    savesCount?: number
    madeCount?: number
    viewsCount?: number
    avgRating?: number
    reviewsCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    publishedAt?: Date | string | null
    isPublished?: boolean
    authorId: string
    ingredients?: RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInput
    likes?: RecipeLikeUncheckedCreateNestedManyWithoutRecipeInput
    saves?: SavedRecipeUncheckedCreateNestedManyWithoutRecipeInput
    reviews?: RecipeReviewUncheckedCreateNestedManyWithoutRecipeInput
    madeRecipes?: MadeRecipeUncheckedCreateNestedManyWithoutRecipeInput
    foodImages?: FoodImageUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type RecipeCreateOrConnectWithoutMealPlanItemsInput = {
    where: RecipeWhereUniqueInput
    create: XOR<RecipeCreateWithoutMealPlanItemsInput, RecipeUncheckedCreateWithoutMealPlanItemsInput>
  }

  export type MealPlanUpsertWithoutItemsInput = {
    update: XOR<MealPlanUpdateWithoutItemsInput, MealPlanUncheckedUpdateWithoutItemsInput>
    create: XOR<MealPlanCreateWithoutItemsInput, MealPlanUncheckedCreateWithoutItemsInput>
    where?: MealPlanWhereInput
  }

  export type MealPlanUpdateToOneWithWhereWithoutItemsInput = {
    where?: MealPlanWhereInput
    data: XOR<MealPlanUpdateWithoutItemsInput, MealPlanUncheckedUpdateWithoutItemsInput>
  }

  export type MealPlanUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMealPlansNestedInput
  }

  export type MealPlanUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipeUpsertWithoutMealPlanItemsInput = {
    update: XOR<RecipeUpdateWithoutMealPlanItemsInput, RecipeUncheckedUpdateWithoutMealPlanItemsInput>
    create: XOR<RecipeCreateWithoutMealPlanItemsInput, RecipeUncheckedCreateWithoutMealPlanItemsInput>
    where?: RecipeWhereInput
  }

  export type RecipeUpdateToOneWithWhereWithoutMealPlanItemsInput = {
    where?: RecipeWhereInput
    data: XOR<RecipeUpdateWithoutMealPlanItemsInput, RecipeUncheckedUpdateWithoutMealPlanItemsInput>
  }

  export type RecipeUpdateWithoutMealPlanItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: JsonNullValueInput | InputJsonValue
    prepTime?: NullableIntFieldUpdateOperationsInput | number | null
    cookTime?: NullableIntFieldUpdateOperationsInput | number | null
    servings?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    cuisine?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeUpdateimagesInput | string[]
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    aiTags?: RecipeUpdateaiTagsInput | string[]
    userTags?: RecipeUpdateuserTagsInput | string[]
    allTags?: RecipeUpdateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: IntFieldUpdateOperationsInput | number
    savesCount?: IntFieldUpdateOperationsInput | number
    madeCount?: IntFieldUpdateOperationsInput | number
    viewsCount?: IntFieldUpdateOperationsInput | number
    avgRating?: FloatFieldUpdateOperationsInput | number
    reviewsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    author?: UserUpdateOneRequiredWithoutRecipesNestedInput
    ingredients?: RecipeIngredientUpdateManyWithoutRecipeNestedInput
    likes?: RecipeLikeUpdateManyWithoutRecipeNestedInput
    saves?: SavedRecipeUpdateManyWithoutRecipeNestedInput
    reviews?: RecipeReviewUpdateManyWithoutRecipeNestedInput
    madeRecipes?: MadeRecipeUpdateManyWithoutRecipeNestedInput
    foodImages?: FoodImageUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateWithoutMealPlanItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: JsonNullValueInput | InputJsonValue
    prepTime?: NullableIntFieldUpdateOperationsInput | number | null
    cookTime?: NullableIntFieldUpdateOperationsInput | number | null
    servings?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    cuisine?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeUpdateimagesInput | string[]
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    aiTags?: RecipeUpdateaiTagsInput | string[]
    userTags?: RecipeUpdateuserTagsInput | string[]
    allTags?: RecipeUpdateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: IntFieldUpdateOperationsInput | number
    savesCount?: IntFieldUpdateOperationsInput | number
    madeCount?: IntFieldUpdateOperationsInput | number
    viewsCount?: IntFieldUpdateOperationsInput | number
    avgRating?: FloatFieldUpdateOperationsInput | number
    reviewsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    authorId?: StringFieldUpdateOperationsInput | string
    ingredients?: RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInput
    likes?: RecipeLikeUncheckedUpdateManyWithoutRecipeNestedInput
    saves?: SavedRecipeUncheckedUpdateManyWithoutRecipeNestedInput
    reviews?: RecipeReviewUncheckedUpdateManyWithoutRecipeNestedInput
    madeRecipes?: MadeRecipeUncheckedUpdateManyWithoutRecipeNestedInput
    foodImages?: FoodImageUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type UserCreateWithoutShoppingListsInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    bio?: string | null
    avatar?: string | null
    verified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    password?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    recipes?: RecipeCreateNestedManyWithoutAuthorInput
    savedRecipes?: SavedRecipeCreateNestedManyWithoutUserInput
    recipeLikes?: RecipeLikeCreateNestedManyWithoutUserInput
    recipeReviews?: RecipeReviewCreateNestedManyWithoutUserInput
    madeRecipes?: MadeRecipeCreateNestedManyWithoutUserInput
    mealPlans?: MealPlanCreateNestedManyWithoutUserInput
    foodImages?: FoodImageCreateNestedManyWithoutUserInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    followers?: FollowCreateNestedManyWithoutFollowingInput
  }

  export type UserUncheckedCreateWithoutShoppingListsInput = {
    id?: string
    email: string
    username: string
    name?: string | null
    bio?: string | null
    avatar?: string | null
    verified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    password?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutAuthorInput
    savedRecipes?: SavedRecipeUncheckedCreateNestedManyWithoutUserInput
    recipeLikes?: RecipeLikeUncheckedCreateNestedManyWithoutUserInput
    recipeReviews?: RecipeReviewUncheckedCreateNestedManyWithoutUserInput
    madeRecipes?: MadeRecipeUncheckedCreateNestedManyWithoutUserInput
    mealPlans?: MealPlanUncheckedCreateNestedManyWithoutUserInput
    foodImages?: FoodImageUncheckedCreateNestedManyWithoutUserInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
  }

  export type UserCreateOrConnectWithoutShoppingListsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutShoppingListsInput, UserUncheckedCreateWithoutShoppingListsInput>
  }

  export type UserUpsertWithoutShoppingListsInput = {
    update: XOR<UserUpdateWithoutShoppingListsInput, UserUncheckedUpdateWithoutShoppingListsInput>
    create: XOR<UserCreateWithoutShoppingListsInput, UserUncheckedCreateWithoutShoppingListsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutShoppingListsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutShoppingListsInput, UserUncheckedUpdateWithoutShoppingListsInput>
  }

  export type UserUpdateWithoutShoppingListsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    recipes?: RecipeUpdateManyWithoutAuthorNestedInput
    savedRecipes?: SavedRecipeUpdateManyWithoutUserNestedInput
    recipeLikes?: RecipeLikeUpdateManyWithoutUserNestedInput
    recipeReviews?: RecipeReviewUpdateManyWithoutUserNestedInput
    madeRecipes?: MadeRecipeUpdateManyWithoutUserNestedInput
    mealPlans?: MealPlanUpdateManyWithoutUserNestedInput
    foodImages?: FoodImageUpdateManyWithoutUserNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    followers?: FollowUpdateManyWithoutFollowingNestedInput
  }

  export type UserUncheckedUpdateWithoutShoppingListsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutAuthorNestedInput
    savedRecipes?: SavedRecipeUncheckedUpdateManyWithoutUserNestedInput
    recipeLikes?: RecipeLikeUncheckedUpdateManyWithoutUserNestedInput
    recipeReviews?: RecipeReviewUncheckedUpdateManyWithoutUserNestedInput
    madeRecipes?: MadeRecipeUncheckedUpdateManyWithoutUserNestedInput
    mealPlans?: MealPlanUncheckedUpdateManyWithoutUserNestedInput
    foodImages?: FoodImageUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type SessionCreateManyUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type RecipeCreateManyAuthorInput = {
    id?: string
    title: string
    description?: string | null
    instructions: JsonNullValueInput | InputJsonValue
    prepTime?: number | null
    cookTime?: number | null
    servings?: number | null
    difficulty?: string | null
    cuisine?: string | null
    category?: string | null
    images?: RecipeCreateimagesInput | string[]
    mainImage?: string | null
    aiTags?: RecipeCreateaiTagsInput | string[]
    userTags?: RecipeCreateuserTagsInput | string[]
    allTags?: RecipeCreateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: number
    savesCount?: number
    madeCount?: number
    viewsCount?: number
    avgRating?: number
    reviewsCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    publishedAt?: Date | string | null
    isPublished?: boolean
  }

  export type SavedRecipeCreateManyUserInput = {
    id?: string
    recipeId: string
    savedAt?: Date | string
    notes?: string | null
  }

  export type RecipeLikeCreateManyUserInput = {
    id?: string
    recipeId: string
    likedAt?: Date | string
  }

  export type RecipeReviewCreateManyUserInput = {
    id?: string
    recipeId: string
    rating: number
    comment?: string | null
    images?: RecipeReviewCreateimagesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MadeRecipeCreateManyUserInput = {
    id?: string
    recipeId: string
    madeAt?: Date | string
    rating?: number | null
    notes?: string | null
    images?: MadeRecipeCreateimagesInput | string[]
  }

  export type MealPlanCreateManyUserInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FoodImageCreateManyUserInput = {
    id?: string
    filename: string
    base64: string
    uploadedAt?: Date | string
    analysis?: NullableJsonNullValueInput | InputJsonValue
    recipeId?: string | null
  }

  export type FollowCreateManyFollowerInput = {
    id?: string
    followingId: string
    createdAt?: Date | string
  }

  export type FollowCreateManyFollowingInput = {
    id?: string
    followerId: string
    createdAt?: Date | string
  }

  export type ShoppingListCreateManyUserInput = {
    id?: string
    name: string
    items: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipeUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: JsonNullValueInput | InputJsonValue
    prepTime?: NullableIntFieldUpdateOperationsInput | number | null
    cookTime?: NullableIntFieldUpdateOperationsInput | number | null
    servings?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    cuisine?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeUpdateimagesInput | string[]
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    aiTags?: RecipeUpdateaiTagsInput | string[]
    userTags?: RecipeUpdateuserTagsInput | string[]
    allTags?: RecipeUpdateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: IntFieldUpdateOperationsInput | number
    savesCount?: IntFieldUpdateOperationsInput | number
    madeCount?: IntFieldUpdateOperationsInput | number
    viewsCount?: IntFieldUpdateOperationsInput | number
    avgRating?: FloatFieldUpdateOperationsInput | number
    reviewsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    ingredients?: RecipeIngredientUpdateManyWithoutRecipeNestedInput
    likes?: RecipeLikeUpdateManyWithoutRecipeNestedInput
    saves?: SavedRecipeUpdateManyWithoutRecipeNestedInput
    reviews?: RecipeReviewUpdateManyWithoutRecipeNestedInput
    madeRecipes?: MadeRecipeUpdateManyWithoutRecipeNestedInput
    mealPlanItems?: MealPlanItemUpdateManyWithoutRecipeNestedInput
    foodImages?: FoodImageUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: JsonNullValueInput | InputJsonValue
    prepTime?: NullableIntFieldUpdateOperationsInput | number | null
    cookTime?: NullableIntFieldUpdateOperationsInput | number | null
    servings?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    cuisine?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeUpdateimagesInput | string[]
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    aiTags?: RecipeUpdateaiTagsInput | string[]
    userTags?: RecipeUpdateuserTagsInput | string[]
    allTags?: RecipeUpdateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: IntFieldUpdateOperationsInput | number
    savesCount?: IntFieldUpdateOperationsInput | number
    madeCount?: IntFieldUpdateOperationsInput | number
    viewsCount?: IntFieldUpdateOperationsInput | number
    avgRating?: FloatFieldUpdateOperationsInput | number
    reviewsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    ingredients?: RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInput
    likes?: RecipeLikeUncheckedUpdateManyWithoutRecipeNestedInput
    saves?: SavedRecipeUncheckedUpdateManyWithoutRecipeNestedInput
    reviews?: RecipeReviewUncheckedUpdateManyWithoutRecipeNestedInput
    madeRecipes?: MadeRecipeUncheckedUpdateManyWithoutRecipeNestedInput
    mealPlanItems?: MealPlanItemUncheckedUpdateManyWithoutRecipeNestedInput
    foodImages?: FoodImageUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: JsonNullValueInput | InputJsonValue
    prepTime?: NullableIntFieldUpdateOperationsInput | number | null
    cookTime?: NullableIntFieldUpdateOperationsInput | number | null
    servings?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    cuisine?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeUpdateimagesInput | string[]
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    aiTags?: RecipeUpdateaiTagsInput | string[]
    userTags?: RecipeUpdateuserTagsInput | string[]
    allTags?: RecipeUpdateallTagsInput | string[]
    pairings?: NullableJsonNullValueInput | InputJsonValue
    nutrition?: NullableJsonNullValueInput | InputJsonValue
    likesCount?: IntFieldUpdateOperationsInput | number
    savesCount?: IntFieldUpdateOperationsInput | number
    madeCount?: IntFieldUpdateOperationsInput | number
    viewsCount?: IntFieldUpdateOperationsInput | number
    avgRating?: FloatFieldUpdateOperationsInput | number
    reviewsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SavedRecipeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    recipe?: RecipeUpdateOneRequiredWithoutSavesNestedInput
  }

  export type SavedRecipeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SavedRecipeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecipeLikeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recipe?: RecipeUpdateOneRequiredWithoutLikesNestedInput
  }

  export type RecipeLikeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipeLikeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipeReviewUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeReviewUpdateimagesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recipe?: RecipeUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type RecipeReviewUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeReviewUpdateimagesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipeReviewUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeReviewUpdateimagesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MadeRecipeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    madeAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    images?: MadeRecipeUpdateimagesInput | string[]
    recipe?: RecipeUpdateOneRequiredWithoutMadeRecipesNestedInput
  }

  export type MadeRecipeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    madeAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    images?: MadeRecipeUpdateimagesInput | string[]
  }

  export type MadeRecipeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    madeAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    images?: MadeRecipeUpdateimagesInput | string[]
  }

  export type MealPlanUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: MealPlanItemUpdateManyWithoutMealPlanNestedInput
  }

  export type MealPlanUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: MealPlanItemUncheckedUpdateManyWithoutMealPlanNestedInput
  }

  export type MealPlanUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodImageUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    base64?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    analysis?: NullableJsonNullValueInput | InputJsonValue
    recipe?: RecipeUpdateOneWithoutFoodImagesNestedInput
  }

  export type FoodImageUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    base64?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    analysis?: NullableJsonNullValueInput | InputJsonValue
    recipeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FoodImageUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    base64?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    analysis?: NullableJsonNullValueInput | InputJsonValue
    recipeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FollowUpdateWithoutFollowerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    following?: UserUpdateOneRequiredWithoutFollowersNestedInput
  }

  export type FollowUncheckedUpdateWithoutFollowerInput = {
    id?: StringFieldUpdateOperationsInput | string
    followingId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowUncheckedUpdateManyWithoutFollowerInput = {
    id?: StringFieldUpdateOperationsInput | string
    followingId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    follower?: UserUpdateOneRequiredWithoutFollowingNestedInput
  }

  export type FollowUncheckedUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    followerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowUncheckedUpdateManyWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    followerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShoppingListUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    items?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShoppingListUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    items?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShoppingListUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    items?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipeIngredientCreateManyRecipeInput = {
    id?: string
    ingredientId: string
    amount?: number | null
    unit?: string | null
    preparation?: string | null
    optional?: boolean
  }

  export type RecipeLikeCreateManyRecipeInput = {
    id?: string
    userId: string
    likedAt?: Date | string
  }

  export type SavedRecipeCreateManyRecipeInput = {
    id?: string
    userId: string
    savedAt?: Date | string
    notes?: string | null
  }

  export type RecipeReviewCreateManyRecipeInput = {
    id?: string
    userId: string
    rating: number
    comment?: string | null
    images?: RecipeReviewCreateimagesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MadeRecipeCreateManyRecipeInput = {
    id?: string
    userId: string
    madeAt?: Date | string
    rating?: number | null
    notes?: string | null
    images?: MadeRecipeCreateimagesInput | string[]
  }

  export type MealPlanItemCreateManyRecipeInput = {
    id?: string
    mealPlanId: string
    date: Date | string
    mealType: string
    servings?: number
  }

  export type FoodImageCreateManyRecipeInput = {
    id?: string
    filename: string
    base64: string
    uploadedAt?: Date | string
    analysis?: NullableJsonNullValueInput | InputJsonValue
    userId?: string | null
  }

  export type RecipeIngredientUpdateWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    preparation?: NullableStringFieldUpdateOperationsInput | string | null
    optional?: BoolFieldUpdateOperationsInput | boolean
    ingredient?: IngredientUpdateOneRequiredWithoutRecipeIngredientsNestedInput
  }

  export type RecipeIngredientUncheckedUpdateWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    ingredientId?: StringFieldUpdateOperationsInput | string
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    preparation?: NullableStringFieldUpdateOperationsInput | string | null
    optional?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RecipeIngredientUncheckedUpdateManyWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    ingredientId?: StringFieldUpdateOperationsInput | string
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    preparation?: NullableStringFieldUpdateOperationsInput | string | null
    optional?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RecipeLikeUpdateWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRecipeLikesNestedInput
  }

  export type RecipeLikeUncheckedUpdateWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipeLikeUncheckedUpdateManyWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    likedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedRecipeUpdateWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutSavedRecipesNestedInput
  }

  export type SavedRecipeUncheckedUpdateWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SavedRecipeUncheckedUpdateManyWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecipeReviewUpdateWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeReviewUpdateimagesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRecipeReviewsNestedInput
  }

  export type RecipeReviewUncheckedUpdateWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeReviewUpdateimagesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipeReviewUncheckedUpdateManyWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    images?: RecipeReviewUpdateimagesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MadeRecipeUpdateWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    madeAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    images?: MadeRecipeUpdateimagesInput | string[]
    user?: UserUpdateOneRequiredWithoutMadeRecipesNestedInput
  }

  export type MadeRecipeUncheckedUpdateWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    madeAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    images?: MadeRecipeUpdateimagesInput | string[]
  }

  export type MadeRecipeUncheckedUpdateManyWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    madeAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    images?: MadeRecipeUpdateimagesInput | string[]
  }

  export type MealPlanItemUpdateWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mealType?: StringFieldUpdateOperationsInput | string
    servings?: IntFieldUpdateOperationsInput | number
    mealPlan?: MealPlanUpdateOneRequiredWithoutItemsNestedInput
  }

  export type MealPlanItemUncheckedUpdateWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    mealPlanId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mealType?: StringFieldUpdateOperationsInput | string
    servings?: IntFieldUpdateOperationsInput | number
  }

  export type MealPlanItemUncheckedUpdateManyWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    mealPlanId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mealType?: StringFieldUpdateOperationsInput | string
    servings?: IntFieldUpdateOperationsInput | number
  }

  export type FoodImageUpdateWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    base64?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    analysis?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneWithoutFoodImagesNestedInput
  }

  export type FoodImageUncheckedUpdateWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    base64?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    analysis?: NullableJsonNullValueInput | InputJsonValue
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FoodImageUncheckedUpdateManyWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    base64?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    analysis?: NullableJsonNullValueInput | InputJsonValue
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecipeIngredientCreateManyIngredientInput = {
    id?: string
    recipeId: string
    amount?: number | null
    unit?: string | null
    preparation?: string | null
    optional?: boolean
  }

  export type RecipeIngredientUpdateWithoutIngredientInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    preparation?: NullableStringFieldUpdateOperationsInput | string | null
    optional?: BoolFieldUpdateOperationsInput | boolean
    recipe?: RecipeUpdateOneRequiredWithoutIngredientsNestedInput
  }

  export type RecipeIngredientUncheckedUpdateWithoutIngredientInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    preparation?: NullableStringFieldUpdateOperationsInput | string | null
    optional?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RecipeIngredientUncheckedUpdateManyWithoutIngredientInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    preparation?: NullableStringFieldUpdateOperationsInput | string | null
    optional?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MealPlanItemCreateManyMealPlanInput = {
    id?: string
    recipeId: string
    date: Date | string
    mealType: string
    servings?: number
  }

  export type MealPlanItemUpdateWithoutMealPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mealType?: StringFieldUpdateOperationsInput | string
    servings?: IntFieldUpdateOperationsInput | number
    recipe?: RecipeUpdateOneRequiredWithoutMealPlanItemsNestedInput
  }

  export type MealPlanItemUncheckedUpdateWithoutMealPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mealType?: StringFieldUpdateOperationsInput | string
    servings?: IntFieldUpdateOperationsInput | number
  }

  export type MealPlanItemUncheckedUpdateManyWithoutMealPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mealType?: StringFieldUpdateOperationsInput | string
    servings?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}